<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:officeooo="http://openoffice.org/2009/office" xmlns:css3t="http://www.w3.org/TR/css3-text/" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rpt="http://openoffice.org/2005/report" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:xforms="http://www.w3.org/2002/xforms" office:version="1.3" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><dc:date>2022-04-28T09:24:02.007746218</dc:date><dc:creator>Stefan Bartl</dc:creator><meta:editing-duration>P1DT11H9M19S</meta:editing-duration><meta:editing-cycles>56</meta:editing-cycles><meta:generator>LibreOffice/7.3.2.2$Linux_X86_64 LibreOffice_project/454130fadb9a820d3728b86ccb63c8f359d70528</meta:generator><meta:document-statistic meta:table-count="2" meta:image-count="8" meta:object-count="0" meta:page-count="83" meta:paragraph-count="1816" meta:word-count="26223" meta:character-count="164402" meta:non-whitespace-character-count="138254"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">2484730</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">35927</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">16318</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">9781</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">2494236</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">2484730</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">35925</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">2501046</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">90</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="KeepRatio" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectFields" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectBookmarks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmptyDbFieldHidesPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="GutterAtTop" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedComplexScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedAsianScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedLatinScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedOnlyUsedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ContinuousEndnotes" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="HeaderSpacingBelowLastPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FrameAutowidthWithMorePara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveThumbnail" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">1259367</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FootnoteInColumnToPageEnd" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaLineSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">999148</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompMinLineHeightByFly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;"/>
  <style:font-face style:name="Lohit Devanagari1" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC" svg:font-family="&apos;Noto Sans CJK SC&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans Mono CJK SC" svg:font-family="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Noto Serif CJK SC" svg:font-family="&apos;Noto Serif CJK SC&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol" style:font-charset="x-symbol"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.3cm" draw:shadow-offset-y="0.3cm" draw:start-line-spacing-horizontal="0.283cm" draw:start-line-spacing-vertical="0.283cm" draw:end-line-spacing-horizontal="0.283cm" draw:end-line-spacing-vertical="0.283cm" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="de" fo:country="AT" style:letter-kerning="true" style:font-name-asian="Noto Serif CJK SC" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Devanagari1" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="1.251cm" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="de" fo:country="AT" style:letter-kerning="true" style:font-name-asian="Noto Serif CJK SC" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Devanagari1" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2" loext:hyphenation-no-caps="false"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.423cm" fo:margin-bottom="0.212cm" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC" style:font-family-asian="&apos;Noto Sans CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.247cm" style:contextual-spacing="false" fo:line-height="115%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" style:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:language="zxx" fo:country="none" style:font-size-asian="12pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Table_20_Contents" style:display-name="Table Contents" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:orphans="0" fo:widows="0" text:number-lines="false" text:line-number="0"/>
  </style:style>
  <style:style style:name="Table_20_Heading" style:display-name="Table Heading" style:family="paragraph" style:parent-style-name="Table_20_Contents" style:class="extra">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="1" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.423cm" fo:margin-bottom="0.212cm" style:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="24pt" fo:font-weight="bold" style:font-name-asian="Noto Serif CJK SC" style:font-family-asian="&apos;Noto Serif CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="24pt" style:font-weight-asian="bold" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="24pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="2" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.353cm" fo:margin-bottom="0.212cm" style:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="18pt" fo:font-weight="bold" style:font-name-asian="Noto Serif CJK SC" style:font-family-asian="&apos;Noto Serif CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="18pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="3" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.247cm" fo:margin-bottom="0.212cm" style:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="14pt" fo:font-weight="bold" style:font-name-asian="Noto Serif CJK SC" style:font-family-asian="&apos;Noto Serif CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-weight-asian="bold" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-name-asian="Noto Sans Mono CJK SC" style:font-family-asian="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="10pt" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="Heading_20_4" style:display-name="Heading 4" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="4" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" style:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="12pt" fo:font-weight="bold" style:font-name-asian="Noto Serif CJK SC" style:font-family-asian="&apos;Noto Serif CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="12pt" style:font-weight-asian="bold" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="12pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Quotations" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-left="1cm" fo:margin-right="1cm" fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Emphasis" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" loext:opacity="100%" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Strong_20_Emphasis" style:display-name="Strong Emphasis" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" fo:font-family="OpenSymbol" style:font-charset="x-symbol" style:font-name-asian="OpenSymbol" style:font-family-asian="OpenSymbol" style:font-charset-asian="x-symbol" style:font-name-complex="OpenSymbol" style:font-family-complex="OpenSymbol" style:font-charset-complex="x-symbol"/>
  </style:style>
  <style:style style:name="Source_20_Text" style:display-name="Source Text" style:family="text">
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" style:font-name-asian="Noto Sans Mono CJK SC" style:font-family-asian="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed"/>
  </style:style>
  <style:style style:name="Visited_20_Internet_20_Link" style:display-name="Visited Internet Link" style:family="text">
   <style:text-properties fo:color="#800000" loext:opacity="100%" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="User_20_Entry" style:display-name="User Entry" style:family="text">
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" style:font-name-asian="Noto Sans Mono CJK SC" style:font-family-asian="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <style:style style:name="Graphics" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0cm" svg:y="0cm" style:wrap="dynamic" style:number-wrapped-paragraphs="no-limit" style:wrap-contour="false" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <style:style style:name="Frame" style:family="graphic">
   <style:graphic-properties text:anchor-type="as-char" svg:y="0cm" style:wrap="none" style:vertical-pos="middle" style:vertical-rel="line"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" loext:num-list-format="%1%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" loext:num-list-format="%2%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" loext:num-list-format="%3%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" loext:num-list-format="%4%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" loext:num-list-format="%5%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" loext:num-list-format="%6%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" loext:num-list-format="%7%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" loext:num-list-format="%8%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" loext:num-list-format="%9%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" loext:num-list-format="%10%" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.499cm" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="Tabelle1" style:family="table">
   <style:table-properties style:width="10.056cm" table:align="left"/>
  </style:style>
  <style:style style:name="Tabelle1.A" style:family="table-column">
   <style:table-column-properties style:column-width="2.628cm"/>
  </style:style>
  <style:style style:name="Tabelle1.B" style:family="table-column">
   <style:table-column-properties style:column-width="7.428cm"/>
  </style:style>
  <style:style style:name="Tabelle1.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0.049cm" fo:border="none"/>
  </style:style>
  <style:style style:name="Tabelle2" style:family="table">
   <style:table-properties style:width="17cm" table:align="left"/>
  </style:style>
  <style:style style:name="Tabelle2.A" style:family="table-column">
   <style:table-column-properties style:column-width="4.941cm"/>
  </style:style>
  <style:style style:name="Tabelle2.B" style:family="table-column">
   <style:table-column-properties style:column-width="12.06cm"/>
  </style:style>
  <style:style style:name="Tabelle2.A1" style:family="table-cell">
   <style:table-cell-properties style:vertical-align="middle" fo:padding="0.049cm" fo:border="none"/>
  </style:style>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false" fo:break-before="page"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties officeooo:paragraph-rsid="000f3eec"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:paragraph-rsid="000f3eec"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="000f3eec"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:rsid="000f3eec" officeooo:paragraph-rsid="000f3eec"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="000f3eec"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties officeooo:paragraph-rsid="00116806"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:text-properties officeooo:paragraph-rsid="00116806"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:paragraph-rsid="00116806"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00116806"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#939598" loext:opacity="100%"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="1cm" fo:margin-right="1cm" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="0011d422" officeooo:paragraph-rsid="0011d422"/>
  </style:style>
  <style:style style:name="P20" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="L7"/>
  <style:style style:name="P21" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="L7">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P22" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="L37"/>
  <style:style style:name="P23" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="L37">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P24" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P25" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1"/>
  <style:style style:name="P26" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P27" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L2"/>
  <style:style style:name="P28" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L2">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P29" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L3"/>
  <style:style style:name="P30" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L3">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P31" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L4"/>
  <style:style style:name="P32" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L4">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P33" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L5"/>
  <style:style style:name="P34" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L5">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P35" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L6"/>
  <style:style style:name="P36" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L6">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P37" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L7"/>
  <style:style style:name="P38" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L7">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P39" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L8"/>
  <style:style style:name="P40" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L8">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P41" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L9"/>
  <style:style style:name="P42" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L9">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P43" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L10"/>
  <style:style style:name="P44" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L10">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P45" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L11"/>
  <style:style style:name="P46" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L11">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P47" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L12"/>
  <style:style style:name="P48" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L12">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P49" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L13"/>
  <style:style style:name="P50" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L13">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P51" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L14"/>
  <style:style style:name="P52" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L14">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P53" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L15"/>
  <style:style style:name="P54" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L15">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P55" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L16"/>
  <style:style style:name="P56" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L16">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P57" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L17"/>
  <style:style style:name="P58" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L17">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P59" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L18"/>
  <style:style style:name="P60" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L18">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P61" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L19"/>
  <style:style style:name="P62" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L19">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P63" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L20"/>
  <style:style style:name="P64" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L20">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P65" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L21"/>
  <style:style style:name="P66" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L21">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P67" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L22"/>
  <style:style style:name="P68" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L22">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P69" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L23"/>
  <style:style style:name="P70" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L23">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P71" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L24"/>
  <style:style style:name="P72" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L24">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P73" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L25"/>
  <style:style style:name="P74" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L25">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P75" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L26"/>
  <style:style style:name="P76" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L26">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P77" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L27"/>
  <style:style style:name="P78" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L27">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P79" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L28"/>
  <style:style style:name="P80" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L28">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P81" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L29"/>
  <style:style style:name="P82" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L29">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P83" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L30"/>
  <style:style style:name="P84" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L30">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P85" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L31"/>
  <style:style style:name="P86" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L31">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P87" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L32"/>
  <style:style style:name="P88" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L32">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P89" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L33"/>
  <style:style style:name="P90" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L33">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P91" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L34"/>
  <style:style style:name="P92" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L34">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P93" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L35"/>
  <style:style style:name="P94" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L35">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P95" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L36"/>
  <style:style style:name="P96" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L36">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P97" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L37"/>
  <style:style style:name="P98" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L37">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P99" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L38"/>
  <style:style style:name="P100" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L38">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P101" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L39"/>
  <style:style style:name="P102" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L39">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P103" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L40"/>
  <style:style style:name="P104" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L40">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P105" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L41"/>
  <style:style style:name="P106" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L42"/>
  <style:style style:name="P107" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L42">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P108" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L43"/>
  <style:style style:name="P109" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L43">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P110" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L44"/>
  <style:style style:name="P111" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L44">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P112" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L45"/>
  <style:style style:name="P113" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L45">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P114" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L46"/>
  <style:style style:name="P115" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L46">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P116" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:color="#e85d7f" loext:opacity="100%"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:color="#ffe083" loext:opacity="100%"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:color="#b3ccff" loext:opacity="100%"/>
  </style:style>
  <style:style style:name="fr1" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" style:vertical-pos="top" style:vertical-rel="baseline" fo:padding="0cm" fo:border="none" style:mirror="none" fo:clip="rect(0cm, 0cm, 0cm, 0cm)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <style:style style:name="fr2" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties style:vertical-pos="top" style:vertical-rel="paragraph" style:mirror="none" fo:clip="rect(0cm, 0cm, 0cm, 0cm)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <style:style style:name="fr3" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties style:vertical-pos="from-top" style:vertical-rel="paragraph" style:horizontal-pos="from-left" style:horizontal-rel="paragraph" style:mirror="none" fo:clip="rect(0cm, 0cm, 0cm, 0cm)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <text:list-style style:name="L1">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L2">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L3">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L4">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L5">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L6">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L7">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L8">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L9">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L10">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L11">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L12">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L13">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L14">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L15">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L16">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L17">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L18">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L19">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L20">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L21">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L22">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L23">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L24">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L25">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L26">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L27">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L28">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L29">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L30">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L31">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L32">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L33">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L34">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L35">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L36">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L37">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L38">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L39">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L40">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L41">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L42">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L43">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L44">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L45">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L46">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.752cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="2.002cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.253cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.503cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.754cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="7.005cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.255cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.506cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.756cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="12.007cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="21.001cm" fo:page-height="29.7cm" style:num-format="1" style:print-orientation="portrait" fo:margin-top="2cm" fo:margin-bottom="2cm" fo:margin-left="2cm" fo:margin-right="2cm" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.706cm" style:layout-grid-ruby-height="0.353cm" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0cm" loext:margin-gutter="0cm">
    <style:footnote-sep style:width="0.018cm" style:distance-before-sep="0.101cm" style:distance-after-sep="0.101cm" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
  <style:style style:name="dp1" style:family="drawing-page">
   <style:drawing-page-properties draw:background-size="full"/>
  </style:style>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1" draw:style-name="dp1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Figure"/>
   </text:sequence-decls>
   <text:p text:style-name="Standard">What is the Back-end?</text:p>
   <text:h text:style-name="P1" text:outline-level="1">Back-End Web Architecture</text:h>
   <text:p text:style-name="Text_20_body">This article provides an overview of servers, databases, routing, and anything else that happens between when a client makes a request and receives a response.</text:p>
   <text:p text:style-name="Text_20_body">Software engineers seem to always be discussing the front-end and the back-end of their apps. But what exactly does this mean?</text:p>
   <text:p text:style-name="Text_20_body">The front-end is the code that is executed on the client side. This code (typically HTML, CSS, and JavaScript) runs in the user’s browser and creates the user interface.</text:p>
   <text:p text:style-name="Text_20_body">The back-end is the code that runs on the server, that receives requests from the clients, and contains the logic to send the appropriate data back to the client. The back-end also includes the database, which will persistently store all of the data for the application. This article focuses on the hardware and software on the server-side that make this possible.</text:p>
   <text:p text:style-name="Text_20_body">Review <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/http-requests" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP</text:a> and <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/what-is-rest" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">REST</text:a> if you want to refresh your memory on these topics. These are the main conventions that provide structure to the request-response cycle between clients and servers.</text:p>
   <text:p text:style-name="Text_20_body">Let’s start by reviewing the client-server relationship, and then we can start to put the pieces all together!</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What are the clients?</text:h>
   <text:p text:style-name="Text_20_body">The clients are anything that send requests to the back-end. They are often browsers that make requests for the HTML and JavaScript code that they will execute to display websites to the end user. However, there are many different kinds of clients: they might be a mobile application, an application running on another server, or even a web enabled smart appliance.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a back-end?</text:h>
   <text:p text:style-name="Text_20_body">The back-end is all of the technology required to process the incoming request and generate and send the response to the client. This typically includes three major parts:</text:p>
   <text:list xml:id="list1801686622" text:style-name="L1">
    <text:list-item>
     <text:p text:style-name="P26">The server. This is the computer that receives requests. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P26">The app. This is the application running on the server that listens for requests, retrieves information from the database, and sends a response. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P25">The database. Databases are used to organize and persist data. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a server?</text:h>
   <text:p text:style-name="Text_20_body">A server is simply a computer that listens for incoming requests. Though there are machines made and optimized for this particular purpose, any computer that is connected to a network can act as a server. In fact, you will often use your very own computer as server when developing apps.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What are the core functions of the app?</text:h>
   <text:p text:style-name="Text_20_body">The server runs an app that contains logic about how to respond to various requests based on the <text:soft-page-break/><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP verb</text:a> and the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Glossary/URI" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Uniform Resource Identifier (URI)</text:a>. The pair of an HTTP verb and a URI is called a <text:span text:style-name="Emphasis">route</text:span> and matching them based on a request is called <text:span text:style-name="Emphasis">routing</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Some of these handler functions will be <text:span text:style-name="Emphasis">middleware</text:span>. In this context, middleware is any code that executes between the server receiving a request and sending a response. These middleware functions might modify the request object, query the database, or otherwise process the incoming request. Middleware functions typically end by passing control to the next middleware function, rather than by sending a response.</text:p>
   <text:p text:style-name="Text_20_body">Eventually, a middleware function will be called that ends the request-response cycle by sending an HTTP response back to the client.</text:p>
   <text:p text:style-name="Text_20_body">Often, programmers will use a framework like Express or Ruby on Rails to simplify the logic of routing. For now, just think that each route can have one or many handler functions that are executed whenever a request to that route (HTTP verb and URI) is matched.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What kinds of responses can a server send?</text:h>
   <text:p text:style-name="Text_20_body">The data that the server sends back can come in different forms. For example, a server might serve up an HTML file, send data as JSON, or it might send back only an <text:a xlink:type="simple" xlink:href="http://www.restapitutorial.com/httpstatuscodes.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP status code</text:a>. You’ve probably seen the status code “404 - Not Found” whenever you’ve tried navigating to a URI that doesn’t exist, but there are many more status codes that indicate what happened when the server received the request.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a database, and why do we need to use them?</text:h>
   <text:p text:style-name="Text_20_body">Databases are commonly used on the back-end of web applications. These databases provide an interface to save data in a persistent way to memory. Storing the data in a database both reduces the load on the main memory of the server CPU and allows the data to be retrieved if the server crashes or loses power.</text:p>
   <text:p text:style-name="Text_20_body">Many requests sent to the server might require a database query. A client might request information that is stored in the database, or a client might submit data with their request to be added to the database.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a Web API, really?</text:h>
   <text:p text:style-name="Text_20_body">An API is a collection of clearly defined methods of communication between different software components.</text:p>
   <text:p text:style-name="Text_20_body">More specifically, a <text:span text:style-name="Emphasis">Web API</text:span> is the interface created by the back-end: the collection of endpoints and the resources these endpoints expose.</text:p>
   <text:p text:style-name="Text_20_body">A Web API is defined by the types of requests that it can handle, which is determined by the routes that it defines, and the types of responses that the clients can expect to receive after hitting those routes.</text:p>
   <text:p text:style-name="Text_20_body">One Web API can be used to provide data for different front-ends. Since a Web API can provide data without really specifying how the data is viewed, multiple different HTML pages or mobile applications can be created to view the data from the Web API.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:soft-page-break/>Other principles of the request-response cycle:</text:h>
   <text:list xml:id="list766902576" text:style-name="L2">
    <text:list-item>
     <text:p text:style-name="P28">The server typically cannot initiate responses without requests! </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P28">Every request needs a response, even if it’s just a 404 status code indicating that the content was not found. Otherwise your client will be left <text:span text:style-name="Emphasis">hanging</text:span> (indefinitely waiting). </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P27">The server should not send more than one response per request. This will throw errors in your code. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">Mapping out a request</text:h>
   <text:p text:style-name="Text_20_body">Let’s make all of this a bit more concrete, by following an example of the main steps that happen when a client makes a request to the server.</text:p>
   <text:p text:style-name="Text_20_body">1. Alice is shopping on SuperCoolShop.com. She clicks on a picture of a cover for her smartphone, and that click event makes a GET request to <text:span text:style-name="Source_20_Text">http://www.SuperCoolShop.com/products/66432</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Remember, GET describes the kind of request (the client is just asking for data, not changing anything). The URI (uniform resource identifier) <text:span text:style-name="Source_20_Text">/products/66432</text:span> specifies that the client is looking for more information about a product, and that product, has an id of 66432.</text:p>
   <text:p text:style-name="Text_20_body">SuperCoolShop has an huge number of products, and many different categories for filtering through them, so the actual URI would be more complicated than this. But this is the general principle for how requests and resource identifiers work.</text:p>
   <text:p text:style-name="Text_20_body">2. Alice’s request travels across the internet to one of SuperCoolShop’s servers. This is one of the slower steps in the process, because the request cannot go faster than the speed of light, and it might have a long distance to travel. For this reason, major websites with users all over the world will have many different servers, and they will direct users to the server that is closest to them!</text:p>
   <text:p text:style-name="Text_20_body">3. The server, which is actively listening for requests from all users, receives Alice’s request!</text:p>
   <text:p text:style-name="Text_20_body">4. Event listeners that match this request (the HTTP verb: GET, and the URI: <text:span text:style-name="Source_20_Text">/products/66432</text:span>) are triggered. The code that runs on the server between the request and the response is called <text:span text:style-name="Emphasis">middleware</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">5. In processing the request, the server code makes a database query to get more information about this smartphone case. The database contains all of the other information that Alice wants to know about this smartphone case: the name of the product, the price of the product, a few product reviews, and a string that will provide a path to the image of the product.</text:p>
   <text:p text:style-name="Text_20_body">6. The database query is executed, and the database sends the requested data back to the server. It’s worth noting that database queries are one of the slower steps in this process. Reading and writing from static memory is fairly slow, and the database might be on a different machine than the original server. This query itself might have to go across the internet!</text:p>
   <text:p text:style-name="Text_20_body">7. The server receives the data that it needs from the database, and it is now ready to construct and send its response back to the client. This response body has all of the information needed by the browser to show Alice more details (price, reviews, size, etc) about the phone case she’s interested in. The response header will contain an HTTP status code 200 to indicate that the request has succeeded.</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>8. The response travels across the internet, back to Alice’s computer.</text:p>
   <text:p text:style-name="Text_20_body">9. Alice’s browser receives the response and uses that information to create and render the view that Alice ultimately sees!</text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3">The Web Server</text:p>
   <text:p text:style-name="Text_20_body">We talked about how the front-end consists of the information sent to a client so that a user can see and interact with a website, but where does the information come from? The answer is a <text:span text:style-name="Emphasis">web server</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">The word “server” can mean a lot of things in computing, but we’re going to focus on web servers specifically. A <text:span text:style-name="Emphasis">web server</text:span> is a process running on a computer that listens for incoming requests for information over the internet and sends back responses. Each time a user navigates to a website on their browser, the browser makes a request to the web server of that website. Every website has at least one web server. A large company like Facebook has thousands of powerful computers running web servers in facilities located all around the world which are listening for requests, but we could also run a simple web server from our own computer!</text:p>
   <text:p text:style-name="Text_20_body">The specific format of a request (and the resulting response) is called the <text:span text:style-name="Emphasis">protocol</text:span>. You might be familiar with the protocol used to access websites: HTTP. When a visitor navigates to a website on their browser, similarly to how one places an order for takeout, they make <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/http-requests" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">an HTTP request</text:a> for the resources that make up that site.</text:p>
   <text:p text:style-name="Text_20_body">For the simplest websites, a client makes a single request. The web server receives that request and sends the client a response containing everything needed to view the website. This is called a <text:span text:style-name="Emphasis">static website</text:span>. This doesn’t mean the website is not interactive. As with the individual static assets, a website is static because once those files are received, they don’t change or move. A static website might be a good choice for a simple personal website with a short bio and family photos. A user navigating Twitter, however, wants access to new content as it’s created, which a static website couldn’t provide. </text:p>
   <text:p text:style-name="Text_20_body">A static website is like ordering takeout, but modern web applications are like dining in person at a sit-down restaurant. A restaurant patron might order drinks, different courses, make substitutions, or ask questions of the waiter. To accomplish this level of complexity, an equally complex back-end is required.</text:p>
   <text:p text:style-name="Text_20_body"><draw:frame draw:style-name="fr2" draw:name="Bild2" text:anchor-type="char" svg:width="17cm" svg:height="9.562cm" draw:z-index="0"><draw:image draw:mime-type="image/png">
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAAB4AAAAQ4CAYAAADo08FDAACcnElEQVR4nOz9B5xcZX4nev9R
       RK0cWhKKrZyQAIFQACRyjjMww3iyx2OvvXd917vv9eeu74Z3d693/a7vrr3ea6/XnrFnPOOJ
       zJAGECCSECChACiBAlILxVZq5Szx9nNwY0l0qO6u7lYffb+fT33QqKrOeerUKU2d+j3//9Oh
       35BZHwcAAAAAAAAAbV6H1h4AAAAAAAAAAMUhAAYAAAAAAADICQEwAAAAAAAAQE4IgAEAAAAA
       AAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAAAAAAAAAA
       OSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQ
       AAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIAB
       AAAAAAAAckIADAAAAAAAAJATAmAAAAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAA
       AAAAADkhAAYAAAAAAADICQEwAAAAAAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAA
       AICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABA
       TgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQAAMAAAAAAADkhAAYAAAAAAAAICcE
       wAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAAAJATAmAA
       AAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADICQEwAAAA
       AAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAA
       ACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQ
       EwJgAAAAAAAAgJwQAAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkB
       MAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAAAJATAmAAAAAAAACAnBAAAwAAAAAAAOSEABgA
       AAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADICQEwAAAAAAAAQE4IgAEAAAAAAAByQgAMAAAA
       AAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAAAAAAAAAAOSEABgAAAAAA
       AMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQAAMAAAAAAADk
       hAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIABAAAAAAAAckIA
       DAAAAAAAAJATAmAAAAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkhAAYA
       AAAAAADICQEwAAAAAAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAA
       AAAA5IQAGAAAAAAAACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAA
       AHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQAAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAAAAA5
       IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAAAJATAmAAAAAAAACAnBAA
       AwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADICQEwAAAAAAAAQE4IgAEA
       AAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAAAAAA
       AAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAAAAAA
       gJwQAAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBO
       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
       fPFJLZHnvbwwrrpiYlwzdVKNj0nh3u23zopl767OwsbzW+mm//3Sqwuz6tYvfeGeOoPYFAI3
       pNXyR5u3x89/8XzWOrimFr6prfAzz8+PYUMHxb13zak1xK7efwphe/cqePcFS2N7dcHirJr5
       ztuvr3M92rMrbOuTqm/feHNZtu2aWnBX7zutr5vW4O3Xr0+tx7cxx3/b9l3x2OMvxMK33zvn
       +Kf22SnMfvD+W2p9v9PfN6SyOoXFy955P2srXptP1iY+XPWnxrfrBgAAgPMJgAEAaJPqC3+r
       CYEvPinYffnVhTFq5NBa19JNbX1Te90P1mw4Zx3eaqky+Ge/mBtdu3bJ2g03taVyksLHn/z8
       2XjuxdezoLc2aV3bx5+aF4MG9Y9Z06+oM3yty6l/CDgb+/w0jp8+9lxW1XzllHGN3s7Z43lz
       0Xvxgx8/nW27Lun4pDWWe/fuGY987o6iHf+f/eK5bLtnr52cnDxxMvpU7atb165N3k+S1h2e
       98pbWTvrutbqTW2wd1TsqbVlOQAAADSGABgAgDan0PC3mhD44pLCwxdffjOunjopq+qsSTon
       rp91ddaKeNfuyhoD2RQM/+3fPZ6tFfu5B27L2j43Rgo+07ZS5WkKH2tqO322FBimCtVOHTtk
       a8jOmnFVwRW21VLYuX7DR1E2bFCjx53GkdoNd+zUMb7x1Yey1tkNHUe1o1Wv481F78b3qo7n
       +dW3tUktjn/0019llcL33X1j1mq5sSF0qsb9+S+fj8eeeKHG1slpPOmc6dChfba28fhxI2tc
       f7gQKfx9ft6CbAJBTW2+z5Zafi9fsaZJxxYAAADOJwAGAKBNaWj4W00IfHFJ6/jOe+mtbI3W
       2gLQVFV61x03xMrV62L+giU1PiYFt9/74ROxecuOuGn2tTHtmskNqkZNQexbi97J2lKn9YnP
       rzytTQo9X3plYbZe7tqqMaSW1alqub4A9Oywed/+g1kL68YGwGePY+fOPfHAfTfHrTfNzFpj
       FxrEpvFsKN8Sr72+OOa+sCCWLFtVa+vnmlQf/43lW+OOW6+rc03imlRUjXvxkhXZms6vv7m0
       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
       AAAAAABALgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABA
       EgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAA
       AAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAA
       AEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBIC
       MAAAAAAAAEASAjAAAAAAAABAEgIwAAAAAAAAQBICMAAAAAAAAEASAjAAAAAAAABAEgIwAAAA
       AAAAQBL/CX7+gk/1gh3xAAAAAElFTkSuQmCC
      </office:binary-data>
     </draw:image>
    </draw:frame><text:soft-page-break/></text:p>
   <text:p text:style-name="Text_20_body"><draw:frame draw:style-name="fr3" draw:name="Bild1" text:anchor-type="char" svg:x="0cm" svg:y="-1.334cm" svg:width="17cm" svg:height="9.562cm" draw:z-index="1"><draw:image draw:mime-type="image/png">
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAAB4AAAAQ4CAYAAADo08FDAAC6BklEQVR4nOz9B5iUZ3onet8C
       GugmhwZEbBA5KoBASAIFFJE00owm5x2PvbbPeu3d79s9Z+Pn9SYfn117vWe89no8nvHkGWmU
       RhLKCCEJCSQhBIggEUTOqaHJ+vp55cYgQXd1d3V6+f2uqy4xVNVbT1W9xdRT/+e+nw59B8/8
       MAAAAAAAAABo8zq09AAAAAAAAAAAKA4BMAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAAAJAT
       AmAAAAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADICQEw
       AAAAAAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAA
       AAAAACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAA
       AACQEwJgAAAAAAAAgJwQAAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAA
       yAkBMAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAAAJATAmAAAAAAAACAnBAAAwAAAAAAAOSE
       ABgAAAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADICQEwAAAAAAAAQE4IgAEAAAAAAAByQgAM
       AAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAAAAAAAAAAOSEABgAA
       AAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQAAMAAAAA
       AADkhAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIABAAAAAAAA
       ckIADAAAAAAAAJATAmAAAAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkh
       AAYAAAAAAADICQEwAAAAAAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAAD
       AAAAAAAA5IQAGAAAAAAAACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAA
       AAAAAHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQAAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAA
       AAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAAAJATAmAAAAAAAACA
       nBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADICQEwAAAAAAAAQE4I
       gAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAA
       AAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAA
       AAAAgJwQAAMAAAAAAADkhAAYAAAAAAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAA
       AEBOCIABAAAAAAAAckIADAAAAAAAAJATAmAAAAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAg
       JwTAAAAAAAAAADkhAAYAAAAAAADICQEwAAAAAAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMC
       YAAAAAAAAICcEAADAAAAAAAA5IQAGAAAAAAAACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAA
       AAAAAABATgiAAQAAAAAAAHJCAAwAAAAAAACQEwJgAAAAAAAAgJwQAAMAAAAAAADkhAAYAAAA
       AAAAICcEwAAAAAAAAAA5IQAGAAAAAAAAyAkBMAAAAAAAAEBOCIABAAAAAAAAckIADAAAAAAA
       AJATAmAAAAAAAACAnBAAAwAAAAAAAOSEABgAAAAAAAAgJwTAAAAAAAAAADkhAAYAAAAAAADI
       CQEwAAAAAAAAQE4IgAEAAAAAAAByQgAMAAAAAAAAkBMCYAAAAAAAAICcEAADAAAAAAAA5IQA
       GAAAAAAAACAnBMAAAAAAAAAAOSEABgAAAAAAAMgJATAAAAAAAABATgiAAQAAAAAAAHJCAAwA
       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
       nHNxjB33RoFGBgAAUDYBGAAAAKAMpw05Oq767SXRqFHt/vrkzbemxSlnXBizZs0u0MgAAADK
       JwADAAAArOeiC86Jiy88t9bHGfnyuDjz3O/FggULCzAqAACAygnAAAAAAP9V1KhR/O7XF8Xn
       Tz2m1sf690NPZXv+rly1qgAjAwAAqBoBGAAAAKBE8+bN4oa/Xh4D+/ep9bGu+cttcdkvri3A
       qAAAAKpHAAYAAAA2e23btok7bvpd7LVnj1od55NPPokfXvqH+PuN9xRoZAAAANUjAAMAAACb
       tW5dd447bv597NRph1odp7h4WZx3weUxdNiTBRoZAABA9QnAAAAAwGbroAP2iltu+E1s07pV
       rY4zf8HCOPOcS+KlUeMLNDIAAICaEYABAACAzdKxgwfE3675aTRqVLu/Hnl3xvtx8unfjqlT
       ZxZoZAAAADUnAAMAANDgjR43IfbcvXu03rp2szSh1PnfOCN+/P2v1/o4r4ydFGecc0nMnftR
       AUYFAABQewIwAAAADd6vr7kh7n5oRHxxyLExeNCA2HH7dvU9JDZRRY0axS9/fkGcfcYJtT7W
       oyOejy+fd2ksXVpc+4EBAAAUiAAMAABAg9SoSatotHxBrFpZnD0mT54c37t8clz1t5vjyCM+
       E2ced3jsu+ce9T1MNkG7de9S62Nc94+749KfXRMrV60qwIgAAAAKRwAGAACgQWrSbNsoatwy
       Vq5YFMUL380icDJ7zpy46ZZ/xp33PBC9998nvnnmydG/74FRVFRUzyPe/Lz3wZz4xx3/ihvv
       vK++h1JlKdieee73Yth9f47uXTvX6BiX/vya+NPfbi/swAAAAApEAAYAAKDB2mLLxlkITo9V
       KxbH8qVzo3jx+9n3lhUvjueeey57dOu6a5x72okx5NijolXLFrHFFlvU88jzq3jZshg9dkJc
       d+ud8cjTL60J85uSBQsWxilnXBiPPHhdtG+3bZVft2LFyvja+ZfF0GFP1uHoAAAAakcABgAA
       YJPQqHGL7NGsZYcoXjQrVv53eehkyltvx/cu/1389trr46yT+sfgI0+IXrt1Myu4QD755JP4
       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
       y9iuPXOzMvvv1zO23LL8/WjTsr0nn3h4pcdpXFSULdtbnjTDc/2ZoSkKLlq0pNwljVNk/FTf
       /bMZxGkMM2Z+EGPHvxEvjRqfRbpCzsBMew1XtldykmLktX+7LT7d74ByQ2PP3Xfd4Gtp+efW
       JddTXmh/4aWxFcbfUun7afnhE44bmC1HXNbxDuq9V5mzcCvz0ujXKo30aSb4Bx/MrXQ/5LLG
       nfaO3nqv3cpdvvrA3ntm+0mn8D9j1uySc03M9pxO0TuNqSqxtW+ffcqN7AtLPmt9D9wnepd8
       Fmsj3du9evXIQjkAAACbBwEYAKhTL7zwQjbzt7rxt1SKwE88PiI6deoUbdu2LciY0j7Ez780
       utrxt1SaCZzC9LZt20fXrl3tCQwlLv35NbF4ydJ1vjag34EV7sGaQmma0VsazKqi804dKvw1
       l/bZXb36kyodq6J9V/fbe/cNvpaiYFrS9yvnDClzpmWSrrV9u22zR5p5mWafDjnpiJjy1vR4
       8umX4577Hy1zueTqSHvejhk7qcr3LIW/FK/7HrR3mUshp5jZo1vndZbN3qPHrhUG8vsffDwW
       zK/adaTA//Szo7L3rqz7lpah3nHHdtW+L4sXL630Oel63vtgbnTrunO1AnBy978eid177FLu
       8tnpeCn6p0daynrPnt3ipOM/E18+9714ePgzlb7XaTnzli23Kndc6bj/880z45NP/r9Kx9qs
       WZMK92rerUeXbEayGcAAAACbBwEYqHdpH81mzZrV9zAgN9Jyy6tXr67vYWTSWMa++kqNQ2up
       qdPfiymTX49WrVrVesZtWvp59Msvx7z5i2p1nBSmJ0yYkIVp+wFDxMOPPRuzZ89b52ujX52Y
       zaTdvv22ZUauFP7+55tfiNcmTalwmdu1pWi7xRb/r9zvp/BaCGlsRUUb/nEpLbvc75D9o1fP
       bpUGxRSD0yOFvA47to+99uwRgwYeHFddfdMGexRXx+zZH8bKlVV/bTrPyJfGZssWl7cX7vpL
       JKf9ZCuaaT1+4pvVGn/ai/g//9tU9g8DbN9uu3WWzC6k1atq9r+JKeAedWS/csP52taOwWnv
       3xTUjz/2sPjbDXfH8EeeLfO6OuzYrsJjps/O9u23q9HY11feXscAAADkkwAM1Lttt902WrRo
       UelfrAFVU1xcnC273BBMmjA+5s2r+tKu5Vm1sjhGj3kluvXYvdazgKdNmxYzZ83Kjllbo0eN
       in79+gnAEP+Zjbl+XEpB79bbHyx3/9dkr17ds71Ly9qDtr6l2Z9pluva8S4tu3zFVTfERRec
       U6UIXKo05qX9i3fp3DF+/uu/lBsGK/PKuNdjxYqV1XrN8uUrqvX8imaTJtVZtjuZOn1WhTOz
       G5cR2+tbmr37459dHX/83Q+q9V6n56UfRGi73Tax4w7tss/4VX+8eYPPd5PGjeti2GUqb69j
       AAAA8qnh/Skb2OykZRzTjD5LqEL+vD11eixcvKxAx5qRxe3amjFjRsECeZrZnI7Xpk0bv4dB
       GVLcrGz/1xRG07LNjz3xQrZUcUNaorasaJbG98zzY+KDOR/GuWedHCcdP6jcJa7Lkp7bpXPH
       +OkPz4uPP16U7Q1c3Wvu1HH7as/m3GabrQv6+1Ravrg6Ebh9220rnFHcUKUfYvja+ZfFF79w
       Ypx84hHV2ks4PW+nTjtkn+/JJcd5YOjjDerzDQAAQH4JwABAnZn9wfsFmWmbpD2EP/zww+jQ
       oeL9Pyszb87sWFnAFbKXLV0cq1atEoChHCkSXnX1zXHFL7+bLatcljRb8ryvfD7+56Jf1TqQ
       vTvj/VrvsVtqaXHZP8CSwmuK1b/+/XVx973DY8CnD4q+ffbJZnpWdUWTFAa/eOaJMfqVidW+
       5rR3cnXtvtsuFS6dPX+9ezan5H2raMburl06VWvJ5h49ulT4++S7sz5okHE0jSnt35xm8D4w
       9Inod2jv6HPQPtl+v1WNwWlZ6AvO/0KMePLFdT6b70ybWeHriks+f9Omz6rWct/leXPK1GrP
       GgcAAGDTJQADAHWmeNnygh6vELF1xepPSo5RuAL8/uy5DWbPZWioHnrkmfjcqYMr3Et10GEH
       x9FH9Kt0luSbb02P/v0OLPf79z7wWNyXjlGA2DXrvTnljiV9Pe1bPGf2vHh98jtx253/jh22
       b5vF2QP27xWH9N2v0kCYriPtA5sCY3WkpYX7HLBXPP7kyCpF0z326Bo9d+9a4Vhmvjd7nWO9
       8eY7FR77pOMGVfn8zZs3i4N671nustIpdFZ3SemNLY0vLQc+ecq0bG/g9N72PWjf2GvP7nFw
       yT/L2+e6VJoBv/57lo63aNGScj8nKcBf9IPfxUfzP671+NMPMxTi1wQAAACbBgEYAKAWWjTx
       f6egMmnG7G9///e44+bfR4sWZf+aSbOD0yzJF18em4XV8rwydlI2k7G8ZZf32G3XMvdbLbQu
       XTpm+wGnmJfiYHpMmzYrxk94Mx4Y9kQWaT9zWN/48jlDyg186Zp367FL9rrqzH5Nx/ryuafE
       yFHjqzTbOc00TnsPlxcoX3/j7ViyZN379eaU6RXGyRSve+/Xs0pLWKc9njt13KHc8497bXJB
       ZrnWldLlrtN1pvtdes+nTX8ve6+33rpl9N63Z3zp7M9Gj+5dyrzO9LU9e3XPlg8vvV/pn+NL
       rn3HHdqW+ZrmzZtm9+2VVyc1yNnRAAAANFz+xhIAqDNbt2oZHxQ1K9gy0Nu2bV/l5VXL03jL
       LbJZaKsKNBGqZettLP8MVZAi1n0PjohTTz6q3HibZkmmWHjtX28vN+CmALxw0ZIsjpUVzfr2
       2TdOPvHwuP3OYRVGs7Sf61lnHJ+NZeq0mbFo8dJYXPKY+t9leV98aWy5YTbF39/96uKY/OY7
       WWwunb26diBMETsFwvnzF8YPL/lquctf79a9S5Vn0q7tgP16xnlf/VylsfsbX/lcHHX4p8qd
       fZs8/tRLGywPnI45asxrsX377UruUdnx+tIffCO+8/3fVrh3c1oy+SvnDsner/I889zoBrs8
       cZq9/MuffjtWf7I6fnPl9TF16v8t27zOe53F/8lx161XZUs+l3es9T35zMtZTC/rByPS5zv9
       UMRb70yv8B6n4172429ms8/TTN/p02eVjPeTbKyLlywteS+XbbD8NAAAAPkmAAMAdaZDx07x
       9tQZBYmtbbbZJtq0aVPr2Nppp07RfPxrsaxAkwMLEaVhc5Di1Z+vuyMGDji43OVy09fOOuOE
       eOyJF8oNXmnJ5RdfejWOPXpAuWHyO//zxWhcVJQt1bt+9EqxLAXib37t87HzTjtm59y9xy7Z
       crvpfMuXr4hPPvn/4vob74m/3/ivDcaQXn/ht87OAmzaB3bPnt2zvWHLOlf678r2ea2pZs2a
       Zveq804dSsZ5zwazRFOk/sLnj4+Tjv9MNhu5ouWJH/h32Utm/+Xvd8Zh/fuUG+x7lVz/7391
       cdx+10MbXH+aNTvkxCPi9M8ds+Y+l2X2nHnZa+t6xnZNXXTBOdny5FtuuUU2u/zmfz5Y5nud
       xp+Cf3U9OOzJ7PNa3g80pB+KSPf4B5f+b5kzgdPy3l89Z0gcdUS/bLZ2st/eu2f/XFIyptJ9
       nCdNflsABgAA2Iz420qg3i1atKi+hwC50pD2o+3Vq1eMHjWqILG1W/fuUVRUdoSo1nF67B5F
       jzxW+wFFCixdChKlYXORZkn+9e93xve++6UsYJalfbtt46JvnxNfPu/SMgNw+loKkxXtu5qW
       1P32t74Qxx97WIx8eVzMmPlB9vVOHbeP/fbtmUW1tV+7/ljSnrQvjRpfZhRNs26P+Mwh0aRJ
       4+x1B/beM7p07rjmXM8+PyYWLloccz+cHz26dYkLSsbRtGnjcu/JaxPerPHerGmmaRrL3nv1
       yPYRTjE1zfzcrk3r2HWXTrH99m0r3Yf43w89lYXLsu51ivBPPDXyv7F9w99/03FTBE73+nOn
       HJ0t5Vx6/p067RDt229XaXy+/a5hMXv2vBpdf11Ls8SHnHTEmji7+267rrnWl0aPjxdfSp+t
       97P3uuOO7ePzpw6OrcqY5VsqW0Z6vfc6Rdlbb38wvvX108v8NVF6j/945Q9j3PjJ2edyxcr/
       HGP/ffeIfffePVsmeu2AXDrbvPSf6T1+7705BbknAAAAbBoEYKDeLViwIBYvXlzfw4DcWL58
       eX0PYY3OnTtHl5LHwsXLarUMdKOiZrHPPvtEs2bl/8V6VaVg23P33eLjRUtjWXHtfu/pd2jf
       aNWq7KU+gQ2lyHjbXcOyWLrPXruVGwY/dcj+FS7jnMJkRdEsSSE5xce0J2tx8X9+X2zWrEm0
       bNG80ln7f/zzP+O1iVM2OPexgwfEGZ87bp2omv659rmOP+aw7HWrV62Opk2bRIcdy18lIAXb
       1yZteJ7qSNefAnQ6T+kyyinWpiWfKwqvSQrdKaYvWby0zO+ncf3+DzdWGNtLrz89dunSqVrn
       H/3KxOzz0BBn/6aZtWn55fUDdum1duq0Qxwx6NBYVvK/uaXvddvt2lS41PaYVyeW+fUbb70/
       m2Vc3q+J9LX0HqfluPsctHc2Qz3ZpnXL7AcRKrrP6TNW0XsMAABAPgnAQL1LsxUb0oxFoHCa
       NGkSnx4wIGbOmhWz59T8L/j79T0gdtlll+x4tZVm6x586KfizbffiZkzax6Ae/Tokc0mLsSY
       YHOSZjxe85fb4urf/aDcfXFT1Pzql06Jx58ame2vur4UJlM06961cxx9ZL9ylyhOYSzNkt2m
       ddXHl2ZLlhUl05LKF337ixWG0P+cq+o/FPLgsCeyPYILId2D8u5DeX79u7+XGbrXlmZt/+iy
       P8SvfnZBpbN5y3s/y/LujPfjV1f8LWbO+KBaY94Y0jLfP//J+bFL547lXm913+v0uZo8ZVqZ
       9zrNDP7Fb/4a1/7vj6Nd2zblnjP9uijvBx7KkgL/5b/+S6XvMQAAAPkjAAMAdSrNAu736U/H
       8IcfjkU1mO2flllOwbZly5YFG1OHDh1i8ODBcf9998XsOdVfFjONKb0+zSYGqu/xJ0fGCyNf
       jcP6H1Tu7Ni0TPOXzj45rrjqhjJniKZo9tNfXpv9e0URuDqeeX5M/PKKv2X7DK9v8eKl2VLS
       3bruXOnM1qp4/Y234x8331ej2a8p7FU287MyKcLffd8jlZ4/hcP0fn3/J1dVKQJXRYq/F/3g
       d/HiyLENMkymZZrfmToj+hywV0GOl663slm46V6kfX4LdY/TZ+RHl10dwx97rkHOsAYAAKBu
       CcAAQJ1KM2T79u2b/fvjI0bER/PnV/m1e+21VwwaNCjat29f0H1207F69uyZ/fvw4cNj1ntz
       qrxEdYq/J554Yha27f0LNZOC1NV/ujUO6L1nubMoUwA7/bRj4smnXyo3FKbZwSkCz533UZx1
       +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
       hAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIw
       AAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAA
       AAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAA
       AOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJAT
       AjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAA
       AAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAA
       AAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAA
       kBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4I
       wAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMA
       AAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAA
       AACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABA
       TgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEA
       AwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAA
       AAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAA
       AEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5
       IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAM
       AAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAA
       AAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAA
       ADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSE
       AAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAA
       AAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAA
       AAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA
       5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMC
       MAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAA
       AAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAA
       AADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQ
       EwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjA
       AAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAA
       AAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAA
       AJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBO
       CMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQAD
       AAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAA
       AAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAA
       QE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkh
       AAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwA
       AAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAA
       AABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAA
       OSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5IQA
       DAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADkhAAMAAAAAAAAkBMCMAAA
       AAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIwAAAAAAAAQE4IwAAAAAAA
       AAA5IQADAAAAAAAA5IQADAAAAAAAAJATAjAAAAAAAABATgjAAAAAAAAAADkhAAMAAAAAAADk
       hAAMAAAAAAAAkBMCMAAAAAAAAEBOCMAAAAAAAAAAOSEAAwAAAAAAAOSEAAwAAAAAAACQEwIw
       AAAAAAAAQE4IwAAAAAAAAAA5IQADAAAAAAAA5MT/D6a/2JFaVm6uAAAAAElFTkSuQmCC
      </office:binary-data>
     </draw:image>
    </draw:frame></text:p>
   <text:p text:style-name="Standard">What is the Back-end?</text:p>
   <text:p text:style-name="P3">So What is the Back-end?</text:p>
   <text:p text:style-name="Text_20_body">When a user navigates to google.com, their request specifies the URL but not the filename for today’s <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Google_Doodle" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Google Doodle</text:a>. The web application’s back-end will need to hold the logic for deciding which assets to send. Moreover, modern web applications often cater to the specific user rather than sending the same files to every visitor of a webpage. This is known as <text:span text:style-name="Emphasis">dynamic content</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">When we eat at a restaurant, we’ll order to our tastes, make substitutions, etc; the result is a dining experience unique to us. Aside from that, there’s a lot happening behind the scenes to make a <text:soft-page-break/>restaurant work: ingredients are ordered from suppliers, new menus are designed, and employees’ schedules are created. Similarly, to make a web application that runs smoothly, the back-end is doing a lot more than simply sending assets to browsers.</text:p>
   <text:p text:style-name="Text_20_body">The collection of programming logic required to deliver dynamic content to a client, manage security, process payments, and myriad other tasks is sometimes known as the “application” or <text:span text:style-name="Emphasis">application server</text:span>. The application server can be responsible for anything from sending an email confirmation after a purchase to running the complicated algorithms a search engine uses to give us meaningful results.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Standard">What is the Back-end?</text:p>
   <text:p text:style-name="P3">Storing Data</text:p>
   <text:p text:style-name="Text_20_body">You’ve probably heard that data is a big deal. By some measures, 90% of the world’s data has been generated in just the past two years! From a stored credit card number on an e-commerce site to the timestamp when you hit pause on Netflix, modern web applications collect a lot of data. For that data to be useful, it has to be organized and stored somewhere. </text:p>
   <text:p text:style-name="Text_20_body">The back-ends of modern web applications include some sort of <text:span text:style-name="Emphasis">database</text:span>, often more than one. Databases are collections of information. There are many different databases, but we can divide them into two types: <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/what-is-rdbms-sql" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">relational databases</text:a> and <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/NoSQL" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">non-relational databases (also known as NoSQL databases)</text:a>. Whereas relational databases store information in tables with columns and rows, non-relational databases might use other systems such as key-value pairs or a document storage model. <text:span text:style-name="Emphasis">SQL</text:span>, <text:span text:style-name="Strong_20_Emphasis">S</text:span>tructured <text:span text:style-name="Strong_20_Emphasis">Q</text:span>uery <text:span text:style-name="Strong_20_Emphasis">L</text:span>anguage, is a programming language for accessing and changing data stored in relational databases. Popular relational databases include <text:a xlink:type="simple" xlink:href="https://www.mysql.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">MySQL</text:a> and <text:a xlink:type="simple" xlink:href="https://www.postgresql.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">PostgreSQL</text:a> while popular NoSQL databases include <text:a xlink:type="simple" xlink:href="https://www.mongodb.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">MongoDB</text:a> and <text:a xlink:type="simple" xlink:href="https://redis.io/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Redis</text:a>. </text:p>
   <text:p text:style-name="Text_20_body">In addition to the database itself, the back-end needs a way to programmatically access, change, and analyze the data stored there.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P6">What is the Back-end?</text:p>
   <text:p text:style-name="P3">What is an API?</text:p>
   <text:p text:style-name="Text_20_body">When a user navigates to a specific item for sale on an e-commerce site, the price listed for that item is stored in a database, and when they purchase it, the database will need to be updated with the correct inventory for that item type. In fact, much of what the back-end entails is reading, updating, or deleting information stored in a database. </text:p>
   <text:p text:style-name="Text_20_body">In order to have consistent ways of interacting with data, a back-end will often include a <text:span text:style-name="Emphasis">web API</text:span>. API stands for <text:span text:style-name="Strong_20_Emphasis">A</text:span>pplication <text:span text:style-name="Strong_20_Emphasis">P</text:span>rogram <text:span text:style-name="Strong_20_Emphasis">I</text:span>nterface and can mean a lot of different things, but a <text:span text:style-name="Emphasis">web API</text:span> is a collection of predefined ways of, or rules for, interacting with a web application’s data, often through an HTTP request-response cycle. Unlike the HTTP requests a client makes when a user navigates to a website’s URL, this type of request indicates how it would like to interact with a web application’s data (create new data, read existing data, update existing data, or delete existing data), and it receives some data back as a response.</text:p>
   <text:p text:style-name="Text_20_body">Let’s walk through the example of making an online purchase again, but this time, we’ll imagine <text:soft-page-break/>how the application’s web API might be used. When a user presses the button to submit an order, that will trigger a request to send them to a different view of the website, an order confirmation page, but an additional request will be triggered from the front-end, unseen by the user, to the web API so that the database can be updated with the information from the order.</text:p>
   <text:p text:style-name="Text_20_body">Some web APIs are open to the public. <text:a xlink:type="simple" xlink:href="https://www.instagram.com/developer/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Instagram</text:a>, for example, has an API that other developers can use to access some of the data Instagram stores. Others are only used by the web application internally— Codecademy, for example, has a web API that employees use to accomplish internal tasks. </text:p>
   <text:p text:style-name="P7"><draw:frame draw:style-name="fr2" draw:name="Bild3" text:anchor-type="char" svg:width="17cm" svg:height="12.949cm" draw:z-index="2"><draw:image draw:mime-type="image/png">
      <office:binary-data>iVBORw0KGgoAAAANSUhEUgAABQQAAAPSCAYAAAAtKdeTAAEXd0lEQVR4nOz9CXzU95nn+z5V
       pQUEaEOAEIh93xcDNhiMjfd9d5w4jtvdSXfSN56emTP9OnPvPec1p++Zc9N3pmfO9EyS7p50
       OosT23Ec7/sKtrHBxuyYfRUgMEgCsWmpqlvfn1xEiFqlUqmk/+f9eslgVKr61wL1q+//+T1P
       XsWIxWEDAAAAAAAA4Al5PX0AAAAAAAAAALKHQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAA
       AAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8
       hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJB
       AAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAA
       AAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAA
       ADyEQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQ
       AkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQB
       AAAAAAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAA
       AAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA
       8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJBAAAAAAAAwEMI
       BAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQA
       AAAAAAA8hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAAADyEQBAAAAAA
       AADwEAJBAAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADA
       QwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQ
       BAAAAAAAADyEQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAA
       AAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA8BACQQAAAAAA
       AMBDCAQBAAAAAAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAAAAAP
       IRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQ
       AAAAAAAA8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJBAAAA
       AAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAA
       AA8hEAQAAAAAAAA8hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAAADyE
       QBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEA
       AAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA8BACQQAAAAAAAMBDCAQBAAAA
       AAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEAAAAAAAAPIRAEAAAAAAAA
       PIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAAAAA8hEAQAAAAAAAA8BAC
       QQAAAAAAAMBDCAQBAAAAAAAADyEQBAAAAAAAADyEQBAAAAAAAADwEAJBAAAAAAAAwEMIBAEA
       AAAAAAAPIRAEAAAAAAAAPIRAEAAAAAAAAPAQAkEAAAAAAADAQwgEAQAAAAAAAA8hEAQAAAAA
       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
       aTjy/wMDNBBE1xAIAgAAAAA6be3atbZ69eq43y8vL3eBVzyqmvvss8/sF7/4hbuew8dr7Ux9
       owWDLZddVuFdIJDvAsN33nnHrr76anvsscds6dKlVlBQkPA4jx8/bm+++aa9+OKLLpRTAFh/
       qsmaLzQk/DmFeW+//bb7uYceesjuuefelCsUVX342muv2rPPPusep3i3F71fmzdvtrfeesvd
       jkLUkSNHXgws4VEdw0ChQhAZQCAIAAAAAEibgjyFcv/0T/9kO3bsins59RjUlthYFJg9//wf
       7Je//KUL+RobG5PeroLCxsYWd1mFegr3FAo+/PA34wZ1r732mv3DP/yDC9z0M6ncTpQuq68T
       J+rcVl9VLj7++J8mDQV1337+8392Qacen1gBZ8f7pUrL6O3Mnz/fVRLC46gQRDchEAQAZEQo
       sohtbWmMrFkCll9Y0tOHAwAAukFtba0dPHjQDhw44LbAvvfee7Z775G4YdegQYPc9leFgh0p
       MHvqqd/a3/3d39mhQ4eTBmaxKKjbsGGTuw6FZ/GCOoWACgO7Um2n49Nx/uQnP3H//+d/8f24
       25Xr60+5MFCXTfe+6bI6zo5bmOFRVAiimxAIAgC6TGHgmYZdbgtMQb9SC+QVmT8Qp3k9AADI
       eb/5zW9cv7uOFLpF+98psDp37kLCsEu996677rrLtvOqulBbaX/60592OgyMigZ1qsTTABBt
       t+14ezoObS/u6vbb6G299NJLNm/ePFuxYsVll9F9e+65ZzsVBraXThUj+jAqBNFNCAQBAF3S
       0nTKzp85fLEfjn5VODiwdCKhIAD0BvqweeGCWShk5vf39NEgRyg462p4pqpADciYO3feZd/b
       sGGD66uXbCutJv2qj57U1NTEHV6i69B16TonT55sCxcuvOxYNLDjiy++cANFYlE1Y7TXYaIg
       T3+u7c3qdxird6H6IT7zzDNdDjoBhwpBdBMCQQBApzVfqLMLZ2sva46t/79w7pgVDRrZMwcG
       ALhMa+SzY16sghJ92Dx/3sJ1dearqMj6caFvKqkot/vuu89NAi4q6n/J9zTlV8M9Pvjgg7iB
       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
       4TBLexAOGTJE3n777Yi3ixiqhe5TB3ToY9MegTrIo7X706pL3ap76qmnyuWXXx79MdnQ+7zi
       iiukoaHBTFBu60CUg2koOG7c8WY4ja5Jfz+6jTiWYND0Czx+pHk82qNQKzhTvM5sK0frAhvX
       S3Dtmqi30TBwNYEgHEIgCABJak15ndmK29UmD+vwkMdf3OL4JGEAQGxa3TYcoj2sAp98LJ4T
       TkzgyhCJBjzDhw2TPn37yaRJk0xfweXLl5vhEJ9++qmZAPv5rjLT305DN51Aq2FWeOrvuHHj
       TKBWWtrL0UqvnkccIV//+rnmfnQ9OgRFJwvrYA+dPhxei04BnjBhglm7DjFpayCpj3/EiGOk
       d+8+cvbZZ5v+fdpbMPzY165db0JPDSn1vs477zzzuPuGzpfP75fbb789YsCWkZFh1nUoPUf6
       2C6+5FtmerHen4aKen96nvfVBWTUMYPNOdaf18uYMePM1uQHH3ww4mPIy8sz4akdvc/+/QfI
       LbfcYoLbxYsXy9atW01AGGnd+vgirf1LxzvySDniiJ4ycuRI83fmnXfeMRWM+jgO/R0d/Fg0
       RNUAWteMBNJhIhvWSyB0saMDodguDCcRCAJAEtO+fDqsQ4eMHDMwp7OX86XhIQCAzhHeNjw5
       z2s/XGTTRgks/1A8o0aLZGQmeIU4jG4hzsmW3GHDZPDgwWZba11drezZs8dcrcGYSk1NlZSU
       FElPT5cePXpITm6e+bmOWlNWVqaMGjnS9MDTajRdj8/nM4FTbm6uuZl+1Qq4eAImDbg0SMzP
       P16OHjZcpk6d+qX70om5GpTpfWkwqP+t/P6A2Xbt9/sjrN8jmRnpto9Nz5tW2un03ilTpsje
       vXvNeW5ubjb3o+dYH5deNLTU+5o+fXrkw3m80iMrerWtPsbS0lIT4o0YMTL0uOrM4zuU/n6z
       c3Lt137QY9Dfz/D9f2dOOOEEc670cRx83sJ/X/Qx6fb0w4a8ICGCmz+TwMoVIvV7bW+zdl9A
       ltZF+LsMtBOBIAAkOR3aMbhPD5k5/SgpLWrlxWMHr+N3L2w2XwEAnevT0BvLZXsDcnaezXZA
       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
       ceIWhk6hgy90i/Dzzz8vixcvlrVr19tWBioNpL7zne/I6NGjv/R9DaD0e71LX5bNm2sO+znd
       fqz3MWTIEBk6dKjt8efPny+vvvqqWZeGWxrOZWRkyMCBA03FXc+ePUNrKG33VuVRo0aZY+oE
       5UjmzJkjEyZMkGnTvmF7H7q2xx57TNatW2fWpmvSMFTX27t3b7POPn37SW5OdpvX11oPQR3k
       ooFmpEBQz/FLL70kI0eOjFoluODtJTL/zb+bicQHn2Nde3Ho//MahsZzjuGs4BflLR/S2Cj3
       e2W3n0AQ8SEQBAAAAFyg1h+UCl9QilMiVABqZeDuGgnuKiMQ7Obeffdd215wOq1369atsmbN
       GtmxY4ds27YtalWg8npT5bLLLpOvfvWrkp19eNh16qmnmt6DkarvNGR87oW/meBpxowZh21J
       1cq8t956y2xXfv/99833POmpkhG6T93iq9tY1cyZM2XatGkR7z8WRUXFJvBbtGiRCcQOpaHa
       Aw88YP5btw4fej86ffnxxx+XP//5z6YiT+nawtuQ9b+PO+44uemmm2Ts2LFtWps+7lWrN8oR
       BQVipaZGvE1r5/jFF1805/jWW2+NGLxq+Hv/b35pqkDVwec4vH49xxde+E1JSbHfWo3EMS0c
       ystsr9eesDvoH4g4EQgCAAAALvB5U9BcIgaCIVqNEty+TWTEyASvDE7SAO7NN9+MeJ1O662v
       rw9dGqJWBB7sggvOk4svvlj69Okb8fpBgwbLWWedZfoQRgrbdldUyVN/fVqWL18up5122oEq
       Q72thmEffvihbNi0Q5oa9geToS+7D/p57ZGn1XGZmVkxrTcSrWT82te+Jq+//nrENeq5WPrP
       T+S2224z1XYaHmpVpNK+irpOfXwVoccSPm+HBqkaWLZny7Ee+7ofXXmguk8rETUoveOOO2TK
       lCnme62dY12LBoYa9Oo51sEvGhDqsXT9S5YsMZWNB9Zsc47T09PbvH50gMbGlufj3bttb6I9
       YavbPtAa+BICQQAAAMAFdNJwWXNQRttcr9uFzRY17WfWyhZGdF0awOklXloZqGHgj667WY49
       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
       LkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiB
       IAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAA
       AAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAA
       AAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4
       CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSC
       AAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAA
       AAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAA
       ALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAi
       BIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgC
       AAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAA
       AAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA
       4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQ
       CAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgA
       AAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAA
       AADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACA
       ixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIg
       CAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAA
       AAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAA
       AICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAu
       QiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEg
       AAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAA
       AAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAA
       AC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgI
       gSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIA
       AAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAA
       AAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAA
       uAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIE
       ggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIA
       AAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAA
       AAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADg
       IgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAixAI
       AgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICLEAgCAAAAAAAALkIgCAAA
       AAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAIAAAAAAAAuAiBIAAAAAAA
       AOAiBIIAAAAAAACAixAIAgAAAAAAAC5CIAgAAAAAAAC4CIEgAAAAAAAA4CIEggAAAAAAAICL
       EAgCAAAAAAAALkIgCAAAAAAAALgIgSAAAAAAAADgIgSCAAAAAAAAgIsQCAIAAAAAAAAuQiAI
       AAAAAAAAuAiBIAAAAAAAAOAiBIIAAAAAAACAi/x/COM1Px1p0J4AAAAASUVORK5CYII=
      </office:binary-data>
     </draw:image>
    </draw:frame></text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P6">What is the Back-end?</text:p>
   <text:p text:style-name="P3">Authorization and Authentication</text:p>
   <text:p text:style-name="Text_20_body">Two other concepts we’ll want our server-side logic to handle are <text:span text:style-name="Emphasis">authentication</text:span> and <text:span text:style-name="Emphasis">authorization</text:span>. </text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Emphasis">Authentication</text:span> is the process of validating the identity of a user. One technique for authentication is to use logins with usernames and passwords. These credentials need to be securely stored in the back-end on a database and checked upon each visit. Web applications can also use external resources for authentication. You’ve likely logged into a website or application using your Facebook, Google, or Github credentials; that’s also an authentication process.</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Emphasis">Authorization</text:span> controls which users have access to which resources and actions. Certain application <text:soft-page-break/>views, like the page to edit a social media personal profile, are only accessible to that user. Other activities, like deleting a post, are often similarly restricted.</text:p>
   <text:p text:style-name="Text_20_body">When building a robust web application back-end, we need to incorporate both authentication (Who is this user? Are they who they claim to be?) and authorization (Who is allowed to do and see what?) into our server-side logic to make sure we’re creating secure, personalized, and dynamic content. </text:p>
   <text:p text:style-name="P6">What is the Back-end?</text:p>
   <text:p text:style-name="P3">Different Back-end Stacks</text:p>
   <text:p text:style-name="Text_20_body">Unlike the front-end, which must be built using HTML, CSS, and JavaScript, there’s a lot of flexibility in which technologies can be used in order to create the back-end of a web application. Developers can construct back-ends in many different languages like PHP, Java, JavaScript, Python, and more. </text:p>
   <text:p text:style-name="Text_20_body">You don’t need to reinvent the wheel to create a robust back-end. Instead, most developers make use of <text:span text:style-name="Emphasis">frameworks</text:span> which are collections of tools that shape the organization of your back-end and provide efficient ways of accomplishing otherwise difficult tasks.</text:p>
   <text:p text:style-name="Text_20_body">There are numerous <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks#A_few_good_web_frameworks" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">back-end frameworks</text:a> from which developers can choose. Here are a few examples: </text:p>
   <table:table table:name="Tabelle1" table:style-name="Tabelle1">
    <table:table-column table:style-name="Tabelle1.A"/>
    <table:table-column table:style-name="Tabelle1.B"/>
    <table:table-header-rows>
     <table:table-row table:style-name="TableLine93933868505504">
      <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Framework</text:p>
      </table:table-cell>
      <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Language</text:p>
      </table:table-cell>
     </table:table-row>
    </table:table-header-rows>
    <table:table-row table:style-name="TableLine93933868687264">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://laravel.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Laravel</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="http://www.php.net/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">PHP</text:a></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868687888">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://expressjs.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Express.js</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">JavaScript</text:a> (runs in the <text:a xlink:type="simple" xlink:href="https://nodejs.org/en/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Node environment</text:a>)</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868688560">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://rubyonrails.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Ruby on Rails</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.ruby-lang.org/en/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Ruby</text:a></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868689184">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://spring.io/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Spring</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.oracle.com/java/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Java</text:a></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868689808">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">JSF</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.oracle.com/java/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Java</text:a></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868690432">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="http://flask.pocoo.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Flask</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.python.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Python</text:a></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868691216">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.djangoproject.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Django</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://www.python.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Python</text:a></text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868692000">
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://dotnet.microsoft.com/learn/aspnet/what-is-aspnet" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ASP.NET</text:a></text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle1.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"><text:a xlink:type="simple" xlink:href="https://dotnet.microsoft.com/learn/csharp" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">C#</text:a></text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">The collection of technologies used to create the front-end and back-end of a web application is referred to as a <text:span text:style-name="Emphasis">stack</text:span>. This is where the term <text:span text:style-name="Emphasis">full-stack developer</text:span> comes from; rather than working in either the front-end or the back-end exclusively, a full-stack developer works in both. </text:p>
   <text:p text:style-name="Text_20_body">For example, <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/MEAN_(software_bundle)" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the MEAN stack</text:a> is a technology stack for building web applications that uses <text:span text:style-name="Strong_20_Emphasis">M</text:span>ongoDB, <text:span text:style-name="Strong_20_Emphasis">E</text:span>xpress.js, <text:span text:style-name="Strong_20_Emphasis">A</text:span>ngularJS, and <text:span text:style-name="Strong_20_Emphasis">N</text:span>ode.js: MongoDB is used as the database, Node.js with Express.js for the rest of the back-end, and Angular is used as a front-end framework. While the <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">LAMP Stack</text:a>, sometimes considered the archetypal stack, uses <text:span text:style-name="Strong_20_Emphasis">L</text:span>inux, <text:span text:style-name="Strong_20_Emphasis">A</text:span>pache, <text:span text:style-name="Strong_20_Emphasis">M</text:span>ySQL, and <text:span text:style-name="Strong_20_Emphasis">P</text:span>HP. </text:p>
   <text:p text:style-name="P8">Review</text:p>
   <text:p text:style-name="Text_20_body">In order to deliver the front-end of a website or web application to a user, a lot needs to happen behind the scenes on the back-end! Understanding what makes up the back-end can be overwhelming because the back-end has a lot of different parts, and different websites or web applications can have dramatically different back-ends. We covered a lot in this lesson, so let’s review what we learned:</text:p>
   <text:list xml:id="list1688145066" text:style-name="L3">
    <text:list-item>
     <text:p text:style-name="P30">The front-end of a website or application consists of the HTML, CSS, JavaScript, and static <text:soft-page-break/>assets sent to a client, like a web browser. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30">A web server is a process running on a computer somewhere that listens for incoming requests for information over the internet and sends back responses. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30">Storing, accessing, and manipulating data is a large part of a web application’s back-end </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30">Data is stored in databases which can be relational databases or NoSQL databases. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30">The server-side of a web application, sometimes called the application server, handles important tasks such as authorization and authentication. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P30">The back-end of web application often has a web API which is a way of interacting with an application’s data through HTTP requests and responses. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P29">Together the technologies used to build the front-end and back-end of a web application are known as the stack, and many different languages and frameworks can be used to build a robust back-end. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Now that you have a sense for server-side web development and what the back-end is, you’re ready to dive in and learn about the different parts in more depth!</text:p>
   <text:p text:style-name="P9"/>
   <text:p text:style-name="P7"/>
   <text:h text:style-name="P5" text:outline-level="1">JavaScript for Node.js</text:h>
   <text:p text:style-name="Text_20_body">Review of essential JavaScript concepts for Node.js</text:p>
   <text:p text:style-name="Text_20_body">Welcome, Codecademy Learners. Congratulations on the progress you have made thus far. </text:p>
   <text:p text:style-name="Text_20_body">The goal of this article is to review some important JavaScript concepts that will be useful to fully utilize Node.js, which we will dive into in the next module. This article will cover topics such as, arrow expressions, non-blocking I/O(Input/Output), the <text:span text:style-name="Source_20_Text">setInterval()</text:span> function, and the <text:span text:style-name="Source_20_Text">setTimeout()</text:span> function, and modules. If you are thinking to yourself, “wow, I’m not sure what these concepts are”, that’s ok. If you would like to learn more about a topic, click on the links throughout this article. Now, let’s get to our first topic—arrow expressions.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-arrow-expressions"/>Arrow Expressions</text:h>
   <text:p text:style-name="Text_20_body">With the introduction of ES6 (ECMAScript) in 2015 came a new feature called <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Emphasis">arrow expressions</text:span></text:a>. Arrow expressions has allowed developers to omit parts of the function they don’t need. This means that it allows your code to become more maintainable and organized. </text:p>
   <text:p text:style-name="Text_20_body">Let’s take a look at the code below. You will see two different functions defined. The first is anonymous (function is not named), and the second is named. When using an arrow expression, we do not use the <text:span text:style-name="Source_20_Text">function</text:span> declaration. To define an arrow expression you simply use: <text:span text:style-name="Source_20_Text">() =&gt; { }</text:span>. You can pass arguments to an arrow expression between the parenthesis (<text:span text:style-name="Source_20_Text">()</text:span>).</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Defining an anonymous arrow expression that simply logs a string to the console.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">console.log(() =&gt; console.log(&apos;Shhh, Im anonymous&apos;));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Defining a named function by creating an arrow expression and saving it to a const variable helloWorld. </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const helloWorld = (name) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(`Welcome ${name} to Codecademy, this is an arrow expression.`)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Calling the helloWorld() function.</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">helloWorld(&apos;Codey&apos;); //Output: Welcome Codey to Codecademy, this is an Arrow Function Expression.</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-asynchronous-concepts"/>Asynchronous Concepts</text:h>
   <text:p text:style-name="Text_20_body">When it comes to development in Node.js and JavaScript, we use a mix of synchronous code (blocking I/O), and <text:a xlink:type="simple" xlink:href="https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">asynchronous code</text:a> (non-blocking I/O). A common example of asynchronous code are Promises.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-promises"/>Promises</text:h>
   <text:p text:style-name="Text_20_body">A <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/courses/asynchronous-javascript/lessons/promises/exercises/introduction" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Emphasis">Promise</text:span></text:a> is a JavaScript object that represents the eventual outcome of an asynchronous operation. A <text:span text:style-name="Source_20_Text">Promise</text:span> has three different outcomes: pending (the result is undefined and the expression is waiting for a result), fulfilled (the promise has been completed successfully and returned a value), and rejected (the promise did not successfully complete, the result is an error object).</text:p>
   <text:p text:style-name="Text_20_body">In the code below a new <text:span text:style-name="Source_20_Text">Promise</text:span> is being defined and is passed a function that takes two arguments, a fulfilled condition, and a rejected condition. We then log the returned value of the <text:span text:style-name="Source_20_Text">Promise</text:span> to the console and chain a <text:span text:style-name="Source_20_Text">.catch()</text:span> method to handle errors.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Creating a new Promise and saving it to the testLuck variable. Two arguments are being passed, one for when the promise resolves, and one for if the promise gets rejected.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const testLuck = new Promise((resolve, reject) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  if (Math.random() &lt; 0.5) { </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    resolve(&apos;Lucky winner!&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  } else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    reject(new Error(&apos;Unlucky!&apos;))</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">testLuck.then(message =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(message) // Log the resolved value of the Promise</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}).catch(error =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.error(error) // Log the rejected error of the Promise</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-asyncawait"/>Async/Await</text:h>
   <text:p text:style-name="Text_20_body">The <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/courses/asynchronous-javascript/lessons/async-await/exercises/introductio" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">async...await</text:span></text:a><text:a xlink:type="simple" xlink:href="https://www.codecademy.com/courses/asynchronous-javascript/lessons/async-await/exercises/introductio" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> syntax</text:a> allows developers to easily implement <text:span text:style-name="Source_20_Text">Promise</text:span>-based code. The keyword <text:span text:style-name="Source_20_Text">async</text:span> used in conjunction with a function declaration creates an <text:span text:style-name="Emphasis">async function</text:span> that returns a <text:span text:style-name="Source_20_Text">Promise</text:span>. Async functions allow us to use the keyword <text:span text:style-name="Source_20_Text">await</text:span> to block the event loop until a given <text:span text:style-name="Source_20_Text">Promise</text:span> resolves or rejects. The <text:span text:style-name="Source_20_Text">await</text:span> keyword also allows us to assign the resolved value of a <text:span text:style-name="Source_20_Text">Promise</text:span> to a variable. </text:p>
   <text:p text:style-name="Text_20_body">Let’s take a look at the code below. In the code below an asynchronous arrow expression is defined with the <text:span text:style-name="Source_20_Text">async</text:span> keyword. In the function body we are creating a new <text:span text:style-name="Source_20_Text">Promise</text:span> which passes a function that is executed after 5 seconds, we <text:span text:style-name="Source_20_Text">await</text:span> the <text:span text:style-name="Source_20_Text">Promise</text:span> to resolve and save the value returned to <text:span text:style-name="Source_20_Text">finalResult</text:span>, and the output of the <text:span text:style-name="Source_20_Text">Promise</text:span> is logged to the console.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Creating a new promise that runs the function in the setTimeout after 5 seconds. </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">const newPromise = new Promise((resolve, reject) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  setTimeout(() =&gt; resolve(&quot;All done!&quot;), 5000);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Creating an asynchronous function using an arrow expression and saving it to a the variable asyncFunction. </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const asyncFunction = async () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  // Awaiting the promise to resolve and saving the result to the variable finalResult.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const finalResult = await newPromise;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  // Logging the result of the promise to the console</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(finalResult); // Output: All done!</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">asyncFunction();</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-setinterval-and-settimeout"/><text:span text:style-name="Source_20_Text">setInterval()</text:span> and <text:span text:style-name="Source_20_Text">setTimeout()</text:span></text:h>
   <text:p text:style-name="Text_20_body">In addition to utilizing the <text:span text:style-name="Source_20_Text">async...await</text:span> syntax, we can also use the <text:span text:style-name="Source_20_Text">setInterval()</text:span> and <text:span text:style-name="Source_20_Text">setTimeout()</text:span> functions. In the example code of the previous section, we created a <text:span text:style-name="Source_20_Text">setTimeout()</text:span> instance in the <text:span text:style-name="Source_20_Text">Promise</text:span> constructor.</text:p>
   <text:p text:style-name="Text_20_body">The <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">setInterval()</text:span></text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> function</text:a> executes a code block at a specified interval, in milliseconds. The <text:span text:style-name="Source_20_Text">setInterval()</text:span> function requires two arguments: the name of the function (the code block that will be executed), and the number of milliseconds (how often the function will be executed). Optionally, we can pass additional arguments which will be supplied as parameters for the function that will be executed by <text:span text:style-name="Source_20_Text">setInterval()</text:span>. The <text:span text:style-name="Source_20_Text">setInterval()</text:span> function will continue to execute until the <text:span text:style-name="Source_20_Text">clearInterval()</text:span> function is called or the node process is exited. In the code block below, the <text:span text:style-name="Source_20_Text">setInterval()</text:span> function in the <text:span text:style-name="Source_20_Text">showAlert()</text:span> function will display an alert box every 5000 milliseconds.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Defining a function that instantiates setInterval</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const showAlert = () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  // Calling setInterval() and passing a function that shows an alert every 5 seconds.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  setInterval(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    alert(&apos;I show every 5 seconds!&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }, 5000);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Calling the newInterval() function that calls the setInterval</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">showAlert();</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">setTimeout()</text:span></text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> function</text:a> executes a code block after a specified amount of time (in milliseconds) and is only executed once. The <text:span text:style-name="Source_20_Text">setTimeout()</text:span> function accepts the same arguments as the <text:span text:style-name="Source_20_Text">setInterval()</text:span> function. Using the <text:span text:style-name="Source_20_Text">clearTimeout()</text:span> function will prevent the function specified from being executed. In the code block below, a function named <text:span text:style-name="Source_20_Text">showTimeout()</text:span> is declared as an arrow expression. The <text:span text:style-name="Source_20_Text">setTimeout()</text:span> function is then defined and displays an alert box after 5 seconds.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Defining a function that calls setTimeout</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const showTimeout = () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  // Calling setTimeout() that passes a function that shows an alert after 5 seconds.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  setTimeout(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">    alert(&apos;I only show once after 5 seconds!&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }, 5000);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Calling the showTimeout() function</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">showTimeout();</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-review"/>Review</text:h>
   <text:p text:style-name="Text_20_body">Congratulations—you made it to the end of the article! You are ready for your journey to learning Node.js. We covered essential JavaScript topics such as arrow expressions, asynchronous programming (non-blocking I/O), the <text:span text:style-name="Source_20_Text">setInterval()</text:span> function, and the <text:span text:style-name="Source_20_Text">setTimeout()</text:span> function.</text:p>
   <text:p text:style-name="Text_20_body">If you are unclear or want to learn more about any of the topics that have been covered in this article, please utilize the <text:a xlink:type="simple" xlink:href="https://discuss.codecademy.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Codecademy Forum</text:a> or click on the links in the article to learn more!</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"/>
   <text:h text:style-name="P5" text:outline-level="1">What Is JSON?</text:h>
   <text:p text:style-name="Text_20_body">A brief guide to understanding JSON and its use cases.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-introduction"/>Introduction</text:h>
   <text:p text:style-name="Text_20_body">In a world inundated with data, it is becoming more important to know how to work with a variety of data. As programmers, we need to be able to transfer our populated data structures from any language we choose to a format that is recognizable and readable by other languages and platforms. Fortunately for us, there exists such a data-exchange format. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-what-is-json"/>What is JSON?</text:h>
   <text:p text:style-name="Text_20_body">JSON, or JavaScript Object Notation, is a popular, language-independent, standard format for storing and exchanging data. Adopted by <text:a xlink:type="simple" xlink:href="http://ecma-international.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ECMA International</text:a>, an industry association founded in 1961 to standardize information and communication systems, <text:a xlink:type="simple" xlink:href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">JSON</text:a> has become the de facto standard that facilitates storing and sending data between all programming languages. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-common-uses-of-json"/>Common Uses of JSON</text:h>
   <text:p text:style-name="Text_20_body">JSON is heavily used to facilitate data transfer in web applications between a client, such as a web browser, and a server. A typical example where such data transfer occurs is when you fill out a web form. The form data is converted from HTML to JavaScript objects to JSON objects and sent to a remote web server for processing. These transactions could be as simple as entering a search engine query to a multi-page job application.</text:p>
   <text:p text:style-name="Text_20_body">When companies make their data public for other applications, like Spotify sharing its music library or Google sharing its map data, the information is formatted in JSON. This way, any application, regardless of language, can collect and parse the data.</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Some of the popular web APIs that utilize JSON in data exchanges are:</text:p>
   <text:list xml:id="list2262396890" text:style-name="L4">
    <text:list-item>
     <text:p text:style-name="P32"><text:a xlink:type="simple" xlink:href="https://developers.google.com/maps/documentation/geocoding/start" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Google Maps</text:a> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P32"><text:a xlink:type="simple" xlink:href="https://developers.google.com/identity/protocols/oauth2/service-account" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Google Auth 2.0 Authentication</text:a> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P32"><text:a xlink:type="simple" xlink:href="https://developers.facebook.com/docs/messenger-platform/reference/send-api" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Facebook Social Graph API</text:a> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P32"><text:a xlink:type="simple" xlink:href="https://developer.spotify.com/documentation/web-api/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Spotify Music Web API</text:a> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P31"><text:a xlink:type="simple" xlink:href="https://docs.microsoft.com/en-us/linkedin/shared/integrations/people/profile-api" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">LinkedIn Profile API</text:a> </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-json-syntax"/>JSON Syntax</text:h>
   <text:p text:style-name="Text_20_body">Since JSON is derived from the JavaScript programming language, its appearance is similar to that of JavaScript objects.</text:p>
   <text:p text:style-name="Text_20_body">A sample JSON object is represented as follows:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;student&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;name&quot;: &quot;Rumaisa Mahoney&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;age&quot;: 30,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;fullTime&quot;: true,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;languages&quot;: [ &quot;JavaScript&quot;, &quot;HTML&quot;, &quot;CSS&quot; ],</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;GPA&quot;: 3.9,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;favoriteSubject&quot;: null</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Note the following syntax rules for JSON:</text:p>
   <text:list xml:id="list2364445346" text:style-name="L5">
    <text:list-item>
     <text:p text:style-name="P34">The curly braces, <text:span text:style-name="Source_20_Text">{..}</text:span>, hold objects. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P34">The square brackets, <text:span text:style-name="Source_20_Text">[..]</text:span>, hold arrays. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P34">Data is stored in name-value pairs separated by a colon, <text:span text:style-name="Source_20_Text">:</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P34">Every name-value pair is separated from another pair by a comma, <text:span text:style-name="Source_20_Text">,</text:span>. Similarly, every item in an array is delimited by a comma as well. <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Trailing commas</text:a> are forbidden. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P33">JSON property names must be in double-quoted <text:span text:style-name="Source_20_Text">(&quot; &quot;)</text:span> text even though JavaScript names do not hold by this stringency. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-json-data-types"/>JSON Data Types</text:h>
   <text:p text:style-name="Text_20_body">A JSON data type must be one of the following:</text:p>
   <text:list xml:id="list536069780" text:style-name="L6">
    <text:list-item>
     <text:p text:style-name="P36">string (double-quoted) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P36">number (integer or floating point) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P36">object (name-value pair) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P36">array (comma-delimited) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P36">boolean (true or false) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P35">null </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Try to find all the data types in this JSON example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;student&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;name&quot;: &quot;Rumaisa Mahoney&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;age&quot;: 30,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;fullTime&quot;: true,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">    &quot;languages&quot;: [ &quot;JavaScript&quot;, &quot;HTML&quot;, &quot;CSS&quot; ],</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;GPA&quot;: 3.9,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;favoriteSubject&quot;: null</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Notably, JSON doesn’t cover every data type. Types that are not represented in JSON such as dates can be stored as a string and converted to a language-specific data structure. Here’s an acceptable internationally-recognized date format in <text:a xlink:type="simple" xlink:href="https://www.iso.org/iso-8601-date-and-time-format.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ISO 8601</text:a>:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">&quot;2014-01-01T23:28:56.782Z&quot;</text:span></text:p>
   <text:p text:style-name="Text_20_body">This above format contains parts which resemble a date and time. However, as a string, it is hard for a programming language to use as is. Conveniently, every programming language has built-in JSON facilities to convert this string into a more readable and usable format, such as:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Wed Jan 01 2014 13:28:56 GMT-1000 (Hawaiian Standard Time)</text:span></text:p>
   <text:p text:style-name="Text_20_body">This pretty much covers the basic description of JSON, its popularity, and its syntax. Congratulations on reaching this milestone!</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P6">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">The Node REPL</text:p>
   <text:p text:style-name="Text_20_body"><text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Read–eval–print_loop" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">REPL</text:a> is an abbreviation for <text:span text:style-name="Strong_20_Emphasis">r</text:span>ead–<text:span text:style-name="Strong_20_Emphasis">e</text:span>val–<text:span text:style-name="Strong_20_Emphasis">p</text:span>rint <text:span text:style-name="Strong_20_Emphasis">l</text:span>oop. It’s a program that <text:span text:style-name="Strong_20_Emphasis">l</text:span>oops, or repeatedly cycles, through three different states: a <text:span text:style-name="Strong_20_Emphasis">r</text:span>ead state where the program <text:span text:style-name="Strong_20_Emphasis">r</text:span>eads input from a user, the <text:span text:style-name="Strong_20_Emphasis">e</text:span>val state where the program <text:span text:style-name="Strong_20_Emphasis">e</text:span>valuates the user’s input, and the <text:span text:style-name="Strong_20_Emphasis">p</text:span>rint state where the program <text:span text:style-name="Strong_20_Emphasis">p</text:span>rints out its evaluation to a console. Then it <text:span text:style-name="Strong_20_Emphasis">l</text:span>oops through these states again. </text:p>
   <text:p text:style-name="Text_20_body">When you install Node, it comes with a built-in JavaScript REPL. You can access the REPL by typing the command <text:span text:style-name="Source_20_Text">node</text:span> (with nothing after it) into the terminal and hitting <text:span text:style-name="User_20_Entry">enter</text:span>. A <text:span text:style-name="Source_20_Text">&gt;</text:span> character will show up in the terminal, indicating the REPL is running and prompting your input. The Node REPL will evaluate your input line by line. </text:p>
   <text:p text:style-name="Text_20_body">By default, you indicate the input is ready for eval when you hit <text:span text:style-name="User_20_Entry">enter</text:span>. If you’d like to type multiple lines and then have them evaluated at once, you can type <text:span text:style-name="Source_20_Text">.editor</text:span> while in the REPL. Once in “editor” mode, you can type <text:span text:style-name="User_20_Entry">control</text:span> + <text:span text:style-name="User_20_Entry">d</text:span> when you’re ready for the input to be evaluated. Each session of the REPL has a single shared memory; you can access any variables or functions you define until you exit the REPL.</text:p>
   <text:p text:style-name="Text_20_body">A REPL can be extremely useful for performing calculations, learning a language, and developing code. It’s a place where you can explore language features and try things out while receiving immediate feedback. Figuring out how to do this outside of the browser or a website can be really empowering. </text:p>
   <text:p text:style-name="Text_20_body">The Node environment contains a number of Node-specific global elements in addition to those <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">built into the JavaScript language</text:a>. Every Node-specific global property sits inside the <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/globals.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the Node </text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/globals.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">global</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/globals.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> object</text:a>. This object contains a number of useful properties and methods that are available anywhere in the Node environment. </text:p>
   <text:p text:style-name="Text_20_body">Let’s try out the Node REPL. This will be a good way for you to explore the Node <text:span text:style-name="Source_20_Text">global</text:span> object!</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:soft-page-break/>Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Let’s enter the Node REPL. Type <text:span text:style-name="Source_20_Text">node</text:span> in the terminal and press <text:span text:style-name="User_20_Entry">enter</text:span>. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Experiment on your own within the REPL to get a better sense of it. Here are some suggestions for things to try:</text:p>
   <text:list xml:id="list2658980240" text:style-name="L7">
    <text:list-item>
     <text:p text:style-name="P38">Access the <text:span text:style-name="Source_20_Text">global</text:span> object. You can <text:span text:style-name="Source_20_Text">console.log(global)</text:span> or, since the REPL displays the return of each evaluated line, simply type <text:span text:style-name="Source_20_Text">global</text:span> and then <text:span text:style-name="User_20_Entry">enter</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P38">Woah… it looks huge. A lot of that is because of the <text:span text:style-name="Source_20_Text">global.process</text:span> object. Check out an easier to read list of the properties on the <text:span text:style-name="Source_20_Text">global</text:span> object with <text:span text:style-name="Source_20_Text">Object.keys(global)</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P38">The <text:span text:style-name="Source_20_Text">global</text:span> object has a lot of useful properties and methods, and it’s not common to add any to it. However, it is just an object, so we can! Add a property to the <text:span text:style-name="Source_20_Text">global</text:span> object, eg. <text:span text:style-name="Source_20_Text">global.cat = &apos;meow!&apos;</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P37">Now print or return the property you just added:</text:p>
     <text:p text:style-name="P20"><text:span text:style-name="Source_20_Text">&gt; console.log(global.cat)</text:span></text:p>
     <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text">&apos;meow!&apos;</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P37">If you’re familiar with running JavaScript on the browser, you’ve likely encountered the <text:span text:style-name="Source_20_Text">Window</text:span> object. Here’s one major way that Node differs: try to access the <text:span text:style-name="Source_20_Text">Window</text:span> object (this will throw an error). The <text:span text:style-name="Source_20_Text">Window</text:span> object is the JavaScript object in the browser that holds the DOM, since we don’t have a DOM here, there’s no <text:span text:style-name="Source_20_Text">Window</text:span> object. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">You’ll learn more about the <text:span text:style-name="Source_20_Text">global</text:span> object as you explore Node, but remember that, at its core, it’s just a JavaScript object! </text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P6">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">Running a Program with Node</text:p>
   <text:p text:style-name="Text_20_body">Node was designed with server-side web development in mind and has a lot of thoughtful functionality towards that end. At its most simple, however, it provides the ability to run JavaScript programs on our own computers instead of just in the browser’s console or embedded in HTML. </text:p>
   <text:p text:style-name="Text_20_body">In this lesson, we’ll explore some of the functionality and properties specific to the Node environment, but first, let’s see how we run a program. </text:p>
   <text:p text:style-name="Text_20_body">We’ll need to create a file with a <text:span text:style-name="Source_20_Text">.js</text:span> extension. We’ll call ours <text:span text:style-name="Strong_20_Emphasis">myProgram.js</text:span>. Next, we’ll open that file with a text editor and add our code:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Inside myProgram.js</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(&apos;Hello World&apos;);</text:span></text:p>
   <text:p text:style-name="Text_20_body">Our code is complete! Now, we want to execute it. We’ll open our terminal and navigate to the directory that contains <text:span text:style-name="Strong_20_Emphasis">myProgram.js</text:span>. Finally, we’ll type the command <text:span text:style-name="Source_20_Text">node myProgram.js</text:span> into our terminal. </text:p>
   <text:p text:style-name="P2"><text:soft-page-break/><text:span text:style-name="Source_20_Text">$ node myProgram.js</text:span></text:p>
   <text:p text:style-name="Text_20_body">The results of our program will print to the terminal. </text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Hello World</text:span></text:p>
   <text:p text:style-name="Text_20_body">Let’s write a program and run it in Node. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">We’ve written a silly sentence JavaScript program in the <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> file. There are a number of variables assigned the string <text:span text:style-name="Source_20_Text">&apos;____&apos;</text:span>. Replace each of them with words of the designated type:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">let adjective = &apos;silly&apos;;</text:span></text:p>
   <text:p text:style-name="Text_20_body">When you’re ready to move on to the next step, click the “Check Work” button. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Let’s run the program in the terminal so we can see its output. Type <text:span text:style-name="Source_20_Text">node app.js</text:span> in the terminal and press <text:span text:style-name="User_20_Entry">enter</text:span> or <text:span text:style-name="User_20_Entry">return</text:span>, and then press “Check Work”. You should see the output of the program in the terminal!</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P6">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">Core Modules</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Emphasis">Modularity</text:span> is a software design technique where one program has distinct parts, each providing a single piece of the overall functionality. These separate <text:span text:style-name="Emphasis">modules</text:span> come together to build a cohesive whole. Modularity is essential for creating scalable programs which incorporate libraries and frameworks and separate the program’s concerns into manageable chunks. Essentially, a module is a collection of code located in a file. Instead of having an entire program located in a single file, code is organized into separate files based on the concerns they address. These files can then be included in other files by using the <text:span text:style-name="Source_20_Text">require()</text:span> function. </text:p>
   <text:p text:style-name="Text_20_body">To save developers from reinventing the wheel each time, Node.js has several built-in modules to perform common tasks efficiently. These are known as the <text:span text:style-name="Emphasis">core modules</text:span>. The core modules are defined within Node.js’s source code and are located in the <text:span text:style-name="Strong_20_Emphasis">lib/</text:span> folder. Core modules can be required by passing a string with the name of the module into the <text:span text:style-name="Source_20_Text">require()</text:span> function:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Require in the &apos;events&apos; core module:</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">const events = require(&apos;events&apos;);</text:span></text:p>
   <text:p text:style-name="Text_20_body">The example above shows how the <text:span text:style-name="Source_20_Text">events</text:span> module is required into a file and stored in an <text:span text:style-name="Source_20_Text">events</text:span> variable. Understanding the specifics of this module isn’t necessary at this point, but the <text:span text:style-name="Source_20_Text">events</text:span> module is a Node.js core module that provides key functions for working with, well… events. You’ll learn more about it in a later lesson. </text:p>
   <text:p text:style-name="Text_20_body">Some core modules are actually used inside other core modules. For instance, the <text:span text:style-name="Source_20_Text">util</text:span> module can be used in the <text:span text:style-name="Source_20_Text">console</text:span> module to format messages. We’ll cover these two modules in this lesson, <text:soft-page-break/>as well as two other commonly used core modules: <text:span text:style-name="Source_20_Text">process</text:span> and <text:span text:style-name="Source_20_Text">os</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Node.js has several core modules, far too many to cover in this lesson. We’ll learn how to get the full list and then dive deeper into the aforementioned modules throughout the next few exercises.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Let’s start by listing all of the core modules built into Node.js. We can do this from the Node REPL. To enter the Node REPL, type <text:span text:style-name="Source_20_Text">node</text:span> in the terminal and press <text:span text:style-name="User_20_Entry">enter</text:span> or <text:span text:style-name="User_20_Entry">return</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Once in the REPL, a complete list of core modules can be accessed by typing the command:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">require(&apos;module&apos;).builtinModules</text:span></text:p>
   <text:p text:style-name="Text_20_body">As you can see, there are many modules already built into Node.js and ready to be utilized! In the next few exercises, we’ll explore some of the more useful ones in further detail.</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7">&gt; require(&apos;module&apos;).builtinModules</text:p>
   <text:p text:style-name="P7">[</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;_http_agent&apos;, <text:s text:c="6"/>&apos;_http_client&apos;, <text:s text:c="7"/>&apos;_http_common&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;_http_incoming&apos;, <text:s text:c="3"/>&apos;_http_outgoing&apos;, <text:s text:c="5"/>&apos;_http_server&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;_stream_duplex&apos;, <text:s text:c="3"/>&apos;_stream_passthrough&apos;, &apos;_stream_readable&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;_stream_transform&apos;, &apos;_stream_wrap&apos;, <text:s text:c="7"/>&apos;_stream_writable&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;_tls_common&apos;, <text:s text:c="6"/>&apos;_tls_wrap&apos;, <text:s text:c="10"/>&apos;assert&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;async_hooks&apos;, <text:s text:c="6"/>&apos;buffer&apos;, <text:s text:c="13"/>&apos;child_process&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;cluster&apos;, <text:s text:c="10"/>&apos;console&apos;, <text:s text:c="12"/>&apos;constants&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;crypto&apos;, <text:s text:c="11"/>&apos;dgram&apos;, <text:s text:c="14"/>&apos;diagnostics_channel&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;dns&apos;, <text:s text:c="14"/>&apos;domain&apos;, <text:s text:c="13"/>&apos;events&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;fs&apos;, <text:s text:c="15"/>&apos;fs/promises&apos;, <text:s text:c="8"/>&apos;http&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;http2&apos;, <text:s text:c="12"/>&apos;https&apos;, <text:s text:c="14"/>&apos;inspector&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;module&apos;, <text:s text:c="11"/>&apos;net&apos;, <text:s text:c="16"/>&apos;os&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;path&apos;, <text:s text:c="13"/>&apos;perf_hooks&apos;, <text:s text:c="9"/>&apos;process&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;punycode&apos;, <text:s text:c="9"/>&apos;querystring&apos;, <text:s text:c="8"/>&apos;readline&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;repl&apos;, <text:s text:c="13"/>&apos;stream&apos;, <text:s text:c="13"/>&apos;string_decoder&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;sys&apos;, <text:s text:c="14"/>&apos;timers&apos;, <text:s text:c="13"/>&apos;tls&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;trace_events&apos;, <text:s text:c="5"/>&apos;tty&apos;, <text:s text:c="16"/>&apos;url&apos;,</text:p>
   <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/>&apos;util&apos;, <text:s text:c="13"/>&apos;v8&apos;, <text:s text:c="17"/>&apos;vm&apos;,</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>&apos;wasi&apos;, <text:s text:c="13"/>&apos;worker_threads&apos;, <text:s text:c="5"/>&apos;zlib&apos;</text:p>
   <text:p text:style-name="P7">]</text:p>
   <text:p text:style-name="P6">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">The Console Module</text:p>
   <text:p text:style-name="Text_20_body">One of the most commonly used Node.js core modules is the <text:span text:style-name="Source_20_Text">console</text:span> module. In Node.js, the terminal is used to send and receive text feedback to and from a program, often for debugging purposes. This may sound familiar to how we use the console in the web browser. That’s because in Node.js, the built-in <text:span text:style-name="Source_20_Text">console</text:span> module exports a global <text:span text:style-name="Source_20_Text">console</text:span> object that gives the terminal similar functionality. The <text:span text:style-name="Source_20_Text">console</text:span> object provides many of the same familiar methods such as:</text:p>
   <text:list xml:id="list2333796060" text:style-name="L8">
    <text:list-item>
     <text:p text:style-name="P40"><text:span text:style-name="Source_20_Text">.log()</text:span> — to print messages to the terminal. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P40"><text:span text:style-name="Source_20_Text">.assert()</text:span> — to print a message to the terminal if the value is falsy. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P39"><text:span text:style-name="Source_20_Text">.table()</text:span> — to print out a table in the terminal from an object or array. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Since <text:span text:style-name="Source_20_Text">console</text:span> is a global module, its methods can be accessed from anywhere, and the <text:span text:style-name="Source_20_Text">require()</text:span> function is not necessary.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Inside <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, we have an array of pets, cleverly named <text:span text:style-name="Source_20_Text">petsArray</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">Use <text:span text:style-name="Source_20_Text">console.log()</text:span> to print <text:span text:style-name="Source_20_Text">petsArray</text:span> to the terminal.</text:p>
   <text:p text:style-name="Text_20_body">For these checkpoints, we’ll check the program with <text:span text:style-name="Source_20_Text">node app.js</text:span> behind the scenes when you press the Run button.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Next, using the <text:span text:style-name="Source_20_Text">console.table()</text:span> method, print <text:span text:style-name="Source_20_Text">petsArray</text:span> to the terminal as a table.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Lastly, inside the <text:span text:style-name="Source_20_Text">console.assert()</text:span> method, check if the length of petsArray is greater than 5.</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P6">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">The Process Module</text:p>
   <text:p text:style-name="Text_20_body">In computer science, a <text:span text:style-name="Emphasis">process</text:span> is the instance of a computer program that is being executed. You can open Task Manager if you’re on a Windows machine or Activity Monitor from a Mac to see information about the various processes running on your computer right now. Node has a global <text:span text:style-name="Source_20_Text">process</text:span> object with useful methods and information about the current process.</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">process.env</text:span> property is an object which stores and controls information about the environment in which the process is currently running. For example, the <text:span text:style-name="Source_20_Text">process.env</text:span> object contains a <text:span text:style-name="Source_20_Text">PWD</text:span> property which holds a string with the directory in which the current process is <text:soft-page-break/>located. It can be useful to have some <text:span text:style-name="Source_20_Text">if/else</text:span> logic in a program depending on the current environment— a web application in a development phase might perform different tasks than when it’s live to users. We could store this information on the <text:span text:style-name="Source_20_Text">process.env</text:span>. One convention is to add a property to <text:span text:style-name="Source_20_Text">process.env</text:span> with the key <text:span text:style-name="Source_20_Text">NODE_ENV</text:span> and a value of either <text:span text:style-name="Source_20_Text">production</text:span> or <text:span text:style-name="Source_20_Text">development</text:span>. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">if (process.env.NODE_ENV === &apos;development&apos;){</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(&apos;Testing! Testing! Does everything work?&apos;);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">process.memoryUsage()</text:span> returns information on the CPU demands of the current process. It returns a property that looks similar to this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{ rss: 26247168,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  heapTotal: 5767168,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  heapUsed: 3573032,</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">  external: 8772 }</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Emphasis">Heap</text:span> can mean different things in different contexts: a heap can refer to <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Heap_(data_structure)" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">a specific data structure</text:a>, but it can also refer to a block of <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Memory_management" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">computer memory</text:a>. The <text:span text:style-name="Source_20_Text">process.memoryUsage().heapUsed</text:span> method will return a number representing how many bytes of memory the current process is using. </text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">process.argv</text:span> property holds an array of command line values provided when the current process was initiated. The first element in the array is the absolute path to Node, which ran the process. The second element in the array is the path to the file that’s running. The following elements will be any command line arguments provided when the process was initiated. Command line arguments are separated from one another with spaces.</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">node myProgram.js testing several features</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(process.argv[3]); // Prints &apos;several&apos;</text:span></text:p>
   <text:p text:style-name="Text_20_body">We’ve only covered a few of the properties of the <text:span text:style-name="Source_20_Text">process</text:span> object, so make sure to check out the <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/process.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">documentation on the </text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/process.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">process</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/process.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> object</text:a> to learn more about it and explore some of its other methods and properties. </text:p>
   <text:p text:style-name="Text_20_body">Let’s get some practice using the <text:span text:style-name="Source_20_Text">process</text:span> object! </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">We want the program in <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> to store the starting amount of memory used (<text:span text:style-name="Source_20_Text">heapUsed</text:span>), perform an operation, and then compare the final amount of memory used to the original amount. Right now, the <text:span text:style-name="Source_20_Text">initialMemory</text:span> variable is assigned to <text:span text:style-name="Source_20_Text">null</text:span>. Change this line, so that <text:span text:style-name="Source_20_Text">initialMemory</text:span> is instead assigned the value of the <text:span text:style-name="Source_20_Text">heapUsed</text:span> property on the object returned from invoking the <text:span text:style-name="Source_20_Text">process.memoryUsage()</text:span> method. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">We want the user of the program to be able to fill in their own <text:span text:style-name="Source_20_Text">word</text:span> when they run the program. Right now <text:span text:style-name="Source_20_Text">word</text:span> is assigned to <text:span text:style-name="Source_20_Text">null</text:span>. Change the program so that when a user initiates the <text:soft-page-break/>program with an additional command line argument, <text:span text:style-name="Source_20_Text">word</text:span> will be assigned that value. For example, running the program with the command: <text:span text:style-name="Source_20_Text">node app.js Codecademy</text:span> would result in <text:span text:style-name="Source_20_Text">word</text:span> being assigned the value <text:span text:style-name="Source_20_Text">&apos;Codecademy&apos;</text:span></text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Awesome! Now let’s run the program. Type <text:span text:style-name="Source_20_Text">node app.js</text:span> followed by any word you like and then hit <text:span text:style-name="User_20_Entry">enter</text:span>.</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="Standard">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">The OS Module</text:p>
   <text:p text:style-name="Text_20_body">When developing or debugging an app, it can be helpful to have information about the computer, operating system, and network on which the program is running. Before Node, this information could not be retrieved using JavaScript due to the language being confined to the browser. However, Node.js is a JavaScript runtime, which means it can execute code outside of the browser, and we’re able to get access to much of this information through the <text:span text:style-name="Source_20_Text">os</text:span> core module. </text:p>
   <text:p text:style-name="Text_20_body">Unlike <text:span text:style-name="Source_20_Text">process</text:span> and <text:span text:style-name="Source_20_Text">console</text:span>, the <text:span text:style-name="Source_20_Text">os</text:span> module is not global and needs to be included into the file in order to gain access to it’s methods. You can include the <text:span text:style-name="Source_20_Text">os</text:span> module into your file by typing:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">const os = require(&apos;os&apos;);</text:span></text:p>
   <text:p text:style-name="Text_20_body">With the <text:span text:style-name="Source_20_Text">os</text:span> module saved to the <text:span text:style-name="Source_20_Text">os</text:span> variable, you can call methods like:</text:p>
   <text:list xml:id="list430991504" text:style-name="L9">
    <text:list-item>
     <text:p text:style-name="P42"><text:span text:style-name="Source_20_Text">os.type()</text:span> — to return the computer’s operating system. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P42"><text:span text:style-name="Source_20_Text">os.arch()</text:span> — to return the operating system CPU architecture. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P42"><text:span text:style-name="Source_20_Text">os.networkInterfaces</text:span> — to return information about the network interfaces of the computer, such as IP and MAC address. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P42"><text:span text:style-name="Source_20_Text">os.homedir()</text:span> — to return the current user’s home directory. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P42"><text:span text:style-name="Source_20_Text">os.hostname()</text:span> — to return the hostname of the operating system. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P41"><text:span text:style-name="Source_20_Text">os.uptime()</text:span> — to return the system uptime, in seconds. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Let’s take a look at an example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const os = require(&apos;os&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const local = {  </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &apos;Home Directory&apos;: os.homedir(),    </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &apos;Operating System&apos;: os.type(),</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &apos;Last Reboot&apos;: os.uptime()</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">In the above example code, we first require the <text:span text:style-name="Source_20_Text">os</text:span> module and store it in a variable, <text:span text:style-name="Source_20_Text">os</text:span>. Below that, we have an object, <text:span text:style-name="Source_20_Text">local</text:span>, that will hold some information about the user’s computer: the name of the home directory, the type of operating system, and the time since the computer was last rebooted.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &apos;Home Directory&apos;: &apos;/Users/luca&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &apos;Operating System&apos;: &apos;Darwin&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &apos;Time since reboot&apos;: 86997</text:span></text:p>
   <text:p text:style-name="P2"><text:soft-page-break/><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="Text_20_body">When we run the program, the <text:span text:style-name="Source_20_Text">local</text:span> object stores all the requested information: </text:p>
   <text:list xml:id="list574560794" text:style-name="L10">
    <text:list-item>
     <text:p text:style-name="P44">the user’s home directory — <text:span text:style-name="Source_20_Text">&apos;/Users/luca&apos;</text:span>, </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P44">the operating system — <text:span text:style-name="Source_20_Text">&apos;Darwin&apos;</text:span> (<text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Darwin_(operating_system)" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Darwin</text:a> is the underlying operating system of macOS.), </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P43">and the time since the computer was last rebooted — 86997 seconds. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Feel free to try running some of the <text:span text:style-name="Source_20_Text">os</text:span> module methods on your own computer to get more information about the hardware, OS, and network you’re on! </text:p>
   <text:p text:style-name="Text_20_body">Note that in the exercises below, the <text:span text:style-name="Source_20_Text">os</text:span> module will return information from the learning environment hosted by Codecademy, and not your local computer.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">In <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, using the <text:span text:style-name="Source_20_Text">const</text:span> keyword, declare a variable, <text:span text:style-name="Source_20_Text">os</text:span>, that stores the <text:span text:style-name="Source_20_Text">os</text:span> module.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Next, below the line requiring in the <text:span text:style-name="Source_20_Text">os</text:span> module, use <text:span text:style-name="Source_20_Text">const</text:span> to create an empty object named <text:span text:style-name="Source_20_Text">server</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Inside <text:span text:style-name="Source_20_Text">server</text:span>, add the keys: <text:span text:style-name="Source_20_Text">type</text:span>, <text:span text:style-name="Source_20_Text">architecture</text:span>, and <text:span text:style-name="Source_20_Text">uptime</text:span>. Store their respective values using <text:a xlink:type="simple" xlink:href="https://nodejs.org/docs/latest-v14.x/api/os.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">methods</text:a> from the <text:span text:style-name="Source_20_Text">os</text:span> module.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Finally, <text:span text:style-name="Source_20_Text">console.log()</text:span> the <text:span text:style-name="Source_20_Text">server</text:span> object, and run the program by typing <text:span text:style-name="Source_20_Text">node app.js</text:span> in the terminal.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Standard">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">The Util Module</text:p>
   <text:p text:style-name="Text_20_body">Developers sometimes classify outlier functions used to maintain code and debug certain aspects of a program’s functionality as <text:span text:style-name="Emphasis">utility functions</text:span>. Utility functions don’t necessarily create new functionality in a program, but you can think of them as internal tools used to maintain and debug your code. The Node.js <text:span text:style-name="Source_20_Text">util</text:span> core module contains methods specifically designed for these purposes. The <text:span text:style-name="Source_20_Text">util</text:span> module can be required into the file using:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">const util = require(&apos;util&apos;);</text:span></text:p>
   <text:p text:style-name="Text_20_body">Once required, you have access to many useful objects and methods within the <text:span text:style-name="Source_20_Text">util</text:span> module. One important object is <text:span text:style-name="Source_20_Text">types</text:span>, which provides methods for runtime type checking in Node.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const util = require(&apos;util&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const today = new Date();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">const earthDay = &apos;April 22, 2022&apos;;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">console.log(util.types.isDate(today));</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(util.types.isDate(earthDay));</text:span></text:p>
   <text:p text:style-name="Text_20_body">In the above example, we first require in the <text:span text:style-name="Source_20_Text">util</text:span> module. Next, we declare two variables: <text:span text:style-name="Source_20_Text">today</text:span> stores today’s date as an instance of the <text:span text:style-name="Source_20_Text">Date</text:span> object, and <text:span text:style-name="Source_20_Text">earthDay</text:span> stores the date of Earth Day as a string. We then log the results of type checking each variable using <text:span text:style-name="Source_20_Text">util.types.isDate()</text:span>. The <text:span text:style-name="Source_20_Text">types.isDate()</text:span> method checks for <text:span text:style-name="Source_20_Text">Date</text:span> objects and returns a boolean value, giving us:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">true</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">false</text:span></text:p>
   <text:p text:style-name="Text_20_body">Since <text:span text:style-name="Source_20_Text">today</text:span> is a <text:span text:style-name="Source_20_Text">Date</text:span> object, it returns <text:span text:style-name="Source_20_Text">true</text:span>, and since <text:span text:style-name="Source_20_Text">earthDay</text:span> is a string, it returns <text:span text:style-name="Source_20_Text">false</text:span>!</text:p>
   <text:p text:style-name="Text_20_body">Another important <text:span text:style-name="Source_20_Text">util</text:span> method is <text:span text:style-name="Source_20_Text">.promisify()</text:span>, which turns <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-iterators/cheatsheet#:~:text=Callback%20Functions,can%20be%20passed%20as%20arguments." office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">callback functions</text:a> into <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/introduction-to-javascript/modules/javascript-promises/cheatsheet" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">promises</text:a>. As you know, <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/content-items/9abb26ac5476a0967d2675d03fce444c" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">asynchronous programming is essential to Node.js</text:a>. In the beginning, this asynchrony was achieved using error-first callback functions, which are still very prevalent in the Node ecosystem today. But since promises are often preferred over callbacks <text:a xlink:type="simple" xlink:href="http://callbackhell.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">and especially nested callbacks</text:a>, Node offers a way to turn these into promises. Let’s take a look:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">function getUser (id, callback) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  return setTimeout(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    if (id === 5) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      callback(null, { nickname: &apos;Teddy&apos; })</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    } else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      callback(new Error(&apos;User not found&apos;))</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }, 1000)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">function callback (error, user) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  if (error) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    console.error(error.message)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    process.exit(1)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(`User found! Their nickname is: ${user.nickname}`)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">getUser(1, callback) // -&gt; `User not found`</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">getUser(5, callback) // -&gt; `User found! Their nickname is: Teddy`</text:span></text:p>
   <text:p text:style-name="Text_20_body">Here we have a function that queries a database for a specified user ID. <text:span text:style-name="Source_20_Text">getUser</text:span> methods are very common in back-end applications, and most will also support error-first callbacks. Since a database query typically takes longer to run than other operations, we simulate the query with a <text:span text:style-name="Source_20_Text">setTimeout()</text:span> method that executes a callback function after 1000 milliseconds (or 1 second). If the user with the specified ID is found, the callback function is executed with <text:span text:style-name="Source_20_Text">null</text:span> passed in as the argument for the <text:span text:style-name="Source_20_Text">error</text:span> parameter, and an object containing the returned user information is passed in as an argument for the <text:span text:style-name="Source_20_Text">user</text:span> parameter. If the user is not found, the callback function is executed, passing in a new <text:span text:style-name="Source_20_Text">Error</text:span> as the argument for the <text:span text:style-name="Source_20_Text">error</text:span> parameter. A second argument for <text:span text:style-name="Source_20_Text">user</text:span> is not necessary since the function will end in the case of an error.</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>This way of handling this function may seem a bit convoluted these days, but with <text:span text:style-name="Source_20_Text">.promisify()</text:span>, we can easily change it into a modern, cleaner, and more maintainable version of itself:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const getUserPromise = util.promisify(getUser);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">getUserPromise(id)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  .then((user) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      console.log(`User found! Their nickname is: ${user.nickname}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  })</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  .catch((error) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      console.log(&apos;User not found&apos;, error);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  });</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">getUser(1) // -&gt; `User not found`</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">getUser(5) // -&gt; `User found! Their nickname is: Teddy`</text:span></text:p>
   <text:p text:style-name="Text_20_body">We declare a <text:span text:style-name="Source_20_Text">getUserPromise</text:span> variable that stores the <text:span text:style-name="Source_20_Text">getUser</text:span> method turned into a promise using the <text:span text:style-name="Source_20_Text">.promisify()</text:span> method. With that in place, we’re able to use <text:span text:style-name="Source_20_Text">getUserPromise</text:span> with <text:span text:style-name="Source_20_Text">.then()</text:span> and <text:span text:style-name="Source_20_Text">.catch()</text:span> methods (or we could also use the <text:span text:style-name="Source_20_Text">async...await</text:span> syntax here) to resolve the promise returned or catch any errors.</text:p>
   <text:p text:style-name="Text_20_body">Now, this is an extremely simplified example, but it’s helpful to recognize how to use this important tool when you start working with more complex callback functions.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">In <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> we’ve required in an object containing long distance hiking trails in the US. You can view that object by opening the <text:span text:style-name="Strong_20_Emphasis">trails.js</text:span> file from the navigator.</text:p>
   <text:p text:style-name="Text_20_body">Below that is a callback function, <text:span text:style-name="Source_20_Text">getTrailDistance</text:span>, that’s ready to be converted using <text:span text:style-name="Source_20_Text">util.promisify()</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Start by requiring the <text:span text:style-name="Source_20_Text">util</text:span> module at the top of the <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, and saving it to a <text:span text:style-name="Source_20_Text">util</text:span> variable.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Next, below the callback function call at the bottom of the file, using <text:span text:style-name="Source_20_Text">const</text:span>, declare a variable, <text:span text:style-name="Source_20_Text">getTrailDistancePromise</text:span>, and store <text:span text:style-name="Source_20_Text">util.promisify(getTrailDistance)</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Then, call the new promisified function, <text:span text:style-name="Source_20_Text">getTrailDistancePromise</text:span>, with <text:span text:style-name="Source_20_Text">&apos;North Country&apos;</text:span> (or any trail property from the <text:span text:style-name="Source_20_Text">trails</text:span> object in <text:span text:style-name="Strong_20_Emphasis">trails.js</text:span>) as the only argument. Resolve the promise with a <text:span text:style-name="Source_20_Text">.then()</text:span> method, and reject the promise with a <text:span text:style-name="Source_20_Text">.catch()</text:span> method.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Lastly, inside of <text:span text:style-name="Source_20_Text">then()</text:span>, log to the console:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">`The ${nickname} is ${mi} miles long!`</text:span></text:p>
   <text:p text:style-name="Text_20_body">where <text:span text:style-name="Source_20_Text">nickname</text:span> is the nickname and <text:span text:style-name="Source_20_Text">mi</text:span> is the distance of the passed-in trail. Inside <text:span text:style-name="Source_20_Text">catch()</text:span>, pass in a function that logs any errors.</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Way to go! You just turned a dusty old callback function into a shiny new promise! You should see identical responses from the callback and the promise.</text:p>
   <text:p text:style-name="Standard">Introduction to Node.js</text:p>
   <text:p text:style-name="P3">Review</text:p>
   <text:p text:style-name="Text_20_body">Awesome work! You’ve learned a lot about some fundamental Node.js concepts and modules. Let’s take a moment to review what we learned:</text:p>
   <text:list xml:id="list3765168844" text:style-name="L11">
    <text:list-item>
     <text:p text:style-name="P46">Node.js is a JavaScript <text:span text:style-name="Emphasis">runtime</text:span>, an environment that allows us to execute our JavaScript code by converting it into something a computer can understand. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">REPLs are processes that <text:span text:style-name="Strong_20_Emphasis">r</text:span>ead, <text:span text:style-name="Strong_20_Emphasis">e</text:span>valuate, <text:span text:style-name="Strong_20_Emphasis">p</text:span>rint, and repeat (<text:span text:style-name="Strong_20_Emphasis">l</text:span>oop), and Node.js comes with its own REPL we can access in our terminal with the <text:span text:style-name="Source_20_Text">node</text:span> command. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">We run JavaScript programs with Node in the terminal by typing <text:span text:style-name="Source_20_Text">node</text:span> followed by the file name (if we’re in the same directory) or the absolute path of the file. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">Code can be organized into separate files, modules, and combined through <text:span text:style-name="Emphasis">requiring</text:span> them where needed using the <text:span text:style-name="Source_20_Text">require()</text:span> function. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">Core modules are built into the Node.js environment to efficiently perform common tasks. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">The <text:span text:style-name="Source_20_Text">console</text:span> module exports a global <text:span text:style-name="Source_20_Text">console</text:span> object allowing the terminal to act as a debugging console, similar to the JavaScript <text:span text:style-name="Source_20_Text">console</text:span> object provided by web browsers. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">The <text:span text:style-name="Source_20_Text">process</text:span> module is a global module that gives access to information about the Node.js runtime environment. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P46">The <text:span text:style-name="Source_20_Text">os</text:span> module provides methods to retrieve information about the computer, operating system, and network interfaces. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P45">The <text:span text:style-name="Source_20_Text">util</text:span> module contains methods used to maintain and debug your code. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">You learned some of the key core modules built into Node.js, but as you know, there are many more. You can even create your own modules, as well as use third-party modules built by other developers. But don’t worry! A good thing to remember when learning Node is that it’s not necessary to memorize every module, method, or other specific aspects of the environment. The best way to get comfortable with Node is to practice making things with it. Your imagination is the limit! So keep going to learn how to <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/setting-up-node-locally" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">download Node on your local machine</text:a>. </text:p>
   <text:p text:style-name="Text_20_body">Great work! We’re excited to see what you build! </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">We’ve required in the core modules you learned about in this lesson. Feel free to use this workspace to practice calling methods from these modules! Some ideas are:</text:p>
   <text:list xml:id="list352651878" text:style-name="L12">
    <text:list-item>
     <text:p text:style-name="P48">Use <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/console.html#console_console_count_label" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">console.count()</text:span></text:a> to log how many times a function is called. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P48">Use <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/process.html#process_process_emitwarning_warning_options" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">process.emitWarning()</text:span></text:a> to create and log a custom warning message to the terminal. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P48">Use <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/os.html#os_os_freemem" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">os.freemem()</text:span></text:a> to check how much free system memory is available in the learning environment. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P47">Use <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/util.html#util_util_format_format_args" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">util.format()</text:span></text:a> to log a formatted object to the terminal. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:soft-page-break/>Node Package Manager</text:h>
   <text:p text:style-name="Text_20_body">Learn now to use the Node package manager to include external packages in your Node.js projects.</text:p>
   <text:p text:style-name="P18"><text:span text:style-name="Strong_20_Emphasis">Note:</text:span> This article assumes that you have some experience with <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/learn-node-js" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Node.js and Node.js modules</text:a>. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-dependencies-a-sea-of-shared-modules"/>Dependencies: A Sea of Shared Modules</text:h>
   <text:p text:style-name="Text_20_body">As you may have learned, when developing Node.js applications, developers have access to a number of core modules that come preshipped when you install Node.js onto your machine. </text:p>
   <text:p text:style-name="Text_20_body">In addition to these core Node.js modules, developers can also take advantage of modules created by other developers, many of which are <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/MIT_License" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">shared freely</text:a>. These third-party modules often solve common problems and simplify the development process. When we use these modules in our code, they are referred to as <text:span text:style-name="Emphasis">dependencies</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Let’s say you’re working on an app that needs to handle various formats of dates – a common and surprisingly difficult task! You could write your own code to handle the date and time manipulation, or you could use <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/dateformat?activeTab=readme" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">a module</text:a> created by another developer (or developers) that has all the functionality you need.</text:p>
   <text:p text:style-name="Text_20_body">Using dependencies is an essential aspect of efficiently creating modern web applications — we don’t have to reinvent the wheel each time we want to include new functionality. Furthermore, well-maintained modules usually solve many edge cases that you would otherwise have to seek out and implement yourself.</text:p>
   <text:p text:style-name="Text_20_body">In the Codecademy learning environment, we’ll handle the installation of any Node.js packages you may need. When developing your own projects on your own machines, however, knowing how to install and manage these third-party modules is an essential skill.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-package-management"/>Package Management</text:h>
   <text:p text:style-name="Text_20_body">So, where do you go to find these dependencies? A hidden temple? Most of the time, these dependencies are installed in <text:span text:style-name="Emphasis">packages</text:span> handled by a <text:span text:style-name="Emphasis">package manager</text:span>. A package is simply a third-party module wrapped up with the list of that module’s own dependencies.</text:p>
   <text:p text:style-name="Text_20_body">Wait, modules can be dependent on other modules?!</text:p>
   <text:p text:style-name="Text_20_body">Yes! This is both a blessing and a curse. This ever-growing chain of modules means that modules can solve more and more complex problems over time while making development lightning-quick. However, managing modules that are dependent on other modules that are dependent on even further modules can be quite cumbersome to handle on your own. </text:p>
   <text:p text:style-name="Text_20_body">We avoid these troubles by using a package manager, an indispensable tool that:</text:p>
   <text:list xml:id="list1807293063" text:style-name="L13">
    <text:list-item>
     <text:p text:style-name="P50">downloads and installs the <text:span text:style-name="Emphasis">packages</text:span> to be used as dependencies on a project. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P50">checks the packages to make sure they don’t have any known vulnerabilities. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P50">checks if packages can be updated to a newer version. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P50">handles all of the packages’ sub-dependencies. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P50">cleanly removes all the files of a package when it’s no longer needed. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P49">provides a repeatable and consistent process of installing dependencies for you and your <text:soft-page-break/>teammates </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">The most popular package manager is <text:span text:style-name="Strong_20_Emphasis">N</text:span>ode <text:span text:style-name="Strong_20_Emphasis">P</text:span>ackage <text:span text:style-name="Strong_20_Emphasis">M</text:span>anager which is the default package manager for Node.js. Its command-line tool, <text:span text:style-name="Source_20_Text">npm</text:span>, is even included in the Node.js installation process. This tool enables developers to download and manage packages via the terminal. </text:p>
   <text:p text:style-name="Text_20_body">The rest of this article will get you familiar with the <text:span text:style-name="Source_20_Text">npm</text:span> ecosystem and walk you through installing a third-party Node.js package. Feel free to follow along!</text:p>
   <text:p text:style-name="P18">Before we get started, check that you have the <text:span text:style-name="Source_20_Text">npm</text:span> command-line tool installed on your computer by typing <text:span text:style-name="Source_20_Text">npm -v</text:span> in the terminal to look up the npm version. If the command returns <text:span text:style-name="Source_20_Text">command not found</text:span>, double-check your <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/setting-up-node-locally" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Node Installation</text:a>.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-initialization"/>Initialization</text:h>
   <text:p text:style-name="Text_20_body">Initializing a Node.js app that utilizes <text:span text:style-name="Source_20_Text">npm</text:span> is a relatively straightforward process. To initialize a Node.js app, we open up a terminal and enter the command: </text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">npm init</text:span></text:p>
   <text:p text:style-name="Text_20_body">This will result in a series of prompts asking us for <text:a xlink:type="simple" xlink:href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">information about our project</text:a>, including our project’s name, version number, description and much more. Once the prompts have been completed, a <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> file will be generated with the information listed in JSON format!</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;name&quot;: &quot;my-project&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;version&quot;: &quot;1.0.0&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;description&quot;: &quot;a basic project&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;main&quot;: &quot;index.js&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;scripts&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;author&quot;: &quot;Super Coder&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;license&quot;: &quot;ISC&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;dependencies&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;express&quot;: &quot;^4.17.1&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  },</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="P18"><text:span text:style-name="Strong_20_Emphasis">Quick tip</text:span>: If you’re looking to get initialized quickly, you can add the flag <text:span text:style-name="Source_20_Text">-y</text:span> to the end of the initialization command to skip the prompts like so: <text:span text:style-name="Source_20_Text">npm init -y</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Direct your attention to the <text:span text:style-name="Source_20_Text">&quot;dependencies&quot;</text:span> dictionary in the file above. This section lists all of the project’s dependencies alongside their version numbers. Importantly, as you install new dependencies using <text:span text:style-name="Source_20_Text">npm</text:span>, this file will be automatically updated so as to maintain the most up-to-date picture of the packages used in the application. As you can see, this project already has the popular routing package <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/express" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">express</text:span></text:a> listed as a dependency.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-installing"/>Installing</text:h>
   <text:p text:style-name="Text_20_body">There are over 1 million of packages created by developers just like you in the npm registry, and you can explore the collection on the <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">npm website</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">Another popular Node.js package is <text:span text:style-name="Source_20_Text">nodemon</text:span>, a tool used to automatically restart a program when a file changes, alleviating the need to do so manually each time you save a file. You can enter <text:soft-page-break/>“nodemon” in the search bar of the <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">npm website</text:a>, or just google “nodemon npm” to get to the <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/nodemon" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">official package page</text:a>. </text:p>
   <text:p text:style-name="Text_20_body">Each package’s <text:span text:style-name="Source_20_Text">npm</text:span> page includes information on using the package, stats about the package, and a link to the GitHub repository. At the top of the right sidebar, you’ll see the install command:</text:p>
   <text:p text:style-name="Text_20_body"><draw:frame draw:style-name="fr1" draw:name="Bild4" text:anchor-type="as-char" svg:width="2cm" svg:height="1cm" draw:z-index="3"><draw:image xlink:href="https://static-assets.codecademy.com/Courses/Learn-Node/intro/npm-website.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>npm website showing install command</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="Text_20_body">In this case:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">npm i nodemon</text:span></text:p>
   <text:p text:style-name="P18"><text:span text:style-name="Strong_20_Emphasis">Note:</text:span> <text:span text:style-name="Source_20_Text">i</text:span> is actually an <text:span text:style-name="Emphasis">alias</text:span> for <text:span text:style-name="Source_20_Text">install</text:span>, and either <text:span text:style-name="Source_20_Text">npm i</text:span> or <text:span text:style-name="Source_20_Text">npm install</text:span> can be used when installing a package. </text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">npm i &lt;package name&gt;</text:span> command installs a package <text:span text:style-name="Emphasis">locally</text:span> in a folder called <text:span text:style-name="Strong_20_Emphasis">node_modules/</text:span> which is created in the project directory that you ran the command from. In addition, the newly installed package will be added to the <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> file:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;name&quot;: &quot;my-project&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;version&quot;: &quot;1.0.0&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;description&quot;: &quot;a basic project&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;main&quot;: &quot;index.js&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;scripts&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;author&quot;: &quot;Super Coder&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;license&quot;: &quot;ISC&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;dependencies&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;express&quot;: &quot;^4.17.1&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;nodemon&quot;: &quot;^2.0.13&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-package-scopes"/>Package Scopes</text:h>
   <text:p text:style-name="Text_20_body">Generally, most npm packages should be installed locally—this way, among other reasons, each project can control which specific versions of its dependencies it uses. That being said, there are a few other ways you might install packages.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-devdependencies"/>devDependencies</text:h>
   <text:p text:style-name="Text_20_body">While most dependencies play a direct role in the functionality of your application, <text:span text:style-name="Emphasis">development dependencies</text:span> are used for the purpose of making development easier or more efficient. </text:p>
   <text:p text:style-name="Text_20_body">In fact, the <text:span text:style-name="Source_20_Text">nodemon</text:span> package is actually better suited as a development dependency since it makes developers’ lives easier but makes no changes to the app itself. To install <text:span text:style-name="Source_20_Text">nodemon</text:span> as a development dependency, we can add the <text:span text:style-name="Source_20_Text">--save-dev</text:span> flag, or its alias, <text:span text:style-name="Source_20_Text">-D</text:span>. </text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">npm install nodemon --save-dev</text:span></text:p>
   <text:p text:style-name="Text_20_body">Development dependencies are listed in the <text:span text:style-name="Source_20_Text">&quot;devDependencies&quot;</text:span> field of the <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> file. This indicates that the package is being used specifically for development and will not be included in a production release of the project.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;name&quot;: &quot;my-project&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;version&quot;: &quot;1.0.0&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;description&quot;: &quot;a basic project&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;main&quot;: &quot;index.js&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;scripts&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;author&quot;: &quot;&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;license&quot;: &quot;ISC&quot;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;dependencies&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;express&quot;: &quot;^4.17.1&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  },</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  &quot;devDependencies&quot;: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;nodemon&quot;: &quot;^2.0.13&quot;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Like local packages, development dependencies are also stored in the local <text:span text:style-name="Strong_20_Emphasis">node_modules/</text:span> folder.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-global-packages"/>Global Packages</text:h>
   <text:p text:style-name="Text_20_body">Some packages can be installed <text:span text:style-name="Emphasis">globally</text:span> meaning they are available system-wide, without the need to install it each time you create a new application. Typically, packages installed this way will be used in the command-line rather than imported into a project’s code. One such example is the <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/http-server" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">http-server</text:span></text:a><text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/http-server" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> package</text:a> which allows you to spin up a zero-configuration server from anywhere in the command-line.</text:p>
   <text:p text:style-name="Text_20_body">To install a package globally, use the <text:span text:style-name="Source_20_Text">-g</text:span> flag with the installation command:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">npm install http-server -g</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text">http-server</text:span> is a good package to install globally since it is a general command-line utility and its purpose is not linked to any specific functionality within an app. </text:p>
   <text:p text:style-name="Text_20_body">Unlike local package dependencies or development dependencies, packages installed globally will not be listed in a projects <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> file and they will be stored in <text:a xlink:type="simple" xlink:href="https://docs.npmjs.com/cli/v7/configuring-npm/folders" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">a separate global </text:a><text:a xlink:type="simple" xlink:href="https://docs.npmjs.com/cli/v7/configuring-npm/folders" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Strong_20_Emphasis">node_modules/</text:span></text:a><text:a xlink:type="simple" xlink:href="https://docs.npmjs.com/cli/v7/configuring-npm/folders" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> folder</text:a>.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-npm-install"/>npm install</text:h>
   <text:p text:style-name="Text_20_body">You may have noticed that, as we install third-party packages from npm, we are creating a <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> file for our own project. Doing so turns our own project into a package, just one that isn’t published in the npm registry (yet). </text:p>
   <text:p text:style-name="Text_20_body">While you may never end up publishing your project as a public package, having this <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> file enables you to easily collaborate with other developers. Anyone who wishes to work with you on your project can simply download your <text:span text:style-name="Strong_20_Emphasis">package.json</text:span> and run the command:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">npm i</text:span></text:p>
   <text:p text:style-name="Text_20_body">Running this command will automatically install all packages listed as dependencies or development dependencies. If you wish to leave out development dependencies, you can run the command with the <text:span text:style-name="Source_20_Text">--production</text:span> flag.</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">npm i --production</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Because of this convenient command, it is recommended that you do not include your local <text:span text:style-name="Strong_20_Emphasis">node_modules/</text:span> folder in any repository that you use to store and share your code to avoid taking up precious storage resources.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-recap"/>Recap</text:h>
   <text:p text:style-name="Text_20_body">Congratulations on getting started with Node Package Manager and <text:span text:style-name="Source_20_Text">npm</text:span>! You now have a deeper understanding of packages and the various ways to use <text:span text:style-name="Source_20_Text">npm</text:span> to install and maintain third-party modules in our code. </text:p>
   <text:p text:style-name="Text_20_body">To continue gaining a deeper understanding of Node, check out our article on how to <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/courses/learn-node-js/articles/implementing-modules-in-node" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">implement modules in your Node.js projects</text:a>! </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">Implementing Modules in Node</text:h>
   <text:p text:style-name="Text_20_body">Article on modular programs and implementing modules in the Node runtime environment.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-what-are-modules"/>What are Modules?</text:h>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Emphasis">Modules</text:span> are reusable pieces of code in a file that can be exported and then imported for use in another file. A <text:span text:style-name="Emphasis">modular</text:span> program is one whose components can be separated, used individually, and recombined to create a complex system. </text:p>
   <text:p text:style-name="Text_20_body">Consider the diagram below of an imaginary program written in a file <text:span text:style-name="Strong_20_Emphasis">my_app.js</text:span>:</text:p>
   <text:p text:style-name="Text_20_body"><draw:frame draw:style-name="fr1" draw:name="Bild5" text:anchor-type="as-char" svg:width="2cm" svg:height="1cm" draw:z-index="4"><draw:image xlink:href="https://static-assets.codecademy.com/Courses/Learn-JavaScript/Modules/modular-program-diagram.svg" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>diagram of a modular program. separate modules are combined to create a complex program</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P18"><text:span text:style-name="Emphasis">Note: The words “module” and “file” are often used interchangably</text:span></text:p>
   <text:p text:style-name="Text_20_body">Instead of having the entire program written within <text:span text:style-name="Strong_20_Emphasis">my_app.js</text:span>, its components are broken up into separate modules that each handle a particular task. For example, the <text:span text:style-name="Strong_20_Emphasis">database_logic.js</text:span> module may contain code for storing and retrieving data from a database. Meanwhile, the <text:span text:style-name="Strong_20_Emphasis">date_formatting.js</text:span> module may contain functions designed to easily convert date values from one format to another (a common headache among programmers!).</text:p>
   <text:p text:style-name="Text_20_body">This modular strategy is sometimes called <text:span text:style-name="Emphasis">separation of concerns</text:span> and is useful for several reasons. What do you think those reasons might be? </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Implementing modules in your program requires a small bit of management. In the remainder of this article, we will be covering:</text:p>
   <text:list xml:id="list2101873899" text:style-name="L14">
    <text:list-item>
     <text:p text:style-name="P52">How to use the Node.js <text:span text:style-name="Source_20_Text">module.exports</text:span> object to <text:span text:style-name="Emphasis">export</text:span> code from a file - meaning its functions and/or data can be used by other files/modules. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P51">How to use the Node.js <text:span text:style-name="Source_20_Text">require()</text:span> function to <text:span text:style-name="Emphasis">import</text:span> functions and/or data from another module. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-implementations-of-modules-in-javascript-nodejs-vs-es6"/><text:soft-page-break/>Implementations of Modules in JavaScript: Node.js vs ES6</text:h>
   <text:p text:style-name="Text_20_body">Before we dive in, it should be noted that there are multiple ways of implementing modules depending on the <text:span text:style-name="Emphasis">runtime environment</text:span> in which your code is executed. In JavaScript, there are two runtime environments and each has a preferred module implementation:</text:p>
   <text:list xml:id="list2528200337" text:style-name="L15">
    <text:list-item>
     <text:p text:style-name="P54">The <text:a xlink:type="simple" xlink:href="https://nodejs.org/en/about/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Node</text:a> runtime environment and the <text:span text:style-name="Source_20_Text">module.exports</text:span> and <text:span text:style-name="Source_20_Text">require()</text:span> syntax. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P53">The browser’s runtime environment and the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ES6</text:a> <text:span text:style-name="Source_20_Text">import</text:span>/<text:span text:style-name="Source_20_Text">export</text:span> syntax. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">This article will focus on using the <text:span text:style-name="Source_20_Text">module.exports</text:span> and <text:span text:style-name="Source_20_Text">require()</text:span> syntax in the Node runtime environment. For more information, you can read the two articles linked below</text:p>
   <text:list xml:id="list333916738" text:style-name="L16">
    <text:list-item>
     <text:p text:style-name="P56"><text:a xlink:type="simple" xlink:href="https://www.codecademy.com/courses/learn-intermediate-javascript/articles/implementing-modules-using-es-6-syntax" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Implementing modules using ES6 Syntax</text:a> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P55"><text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/introduction-to-javascript-runtime-environments" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Introduction to JavaScript Runtime Environments</text:a> </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-implementing-modules-in-node"/>Implementing Modules in Node</text:h>
   <text:p text:style-name="Text_20_body">Every JavaScript file that runs in a Node environment is treated as a distinct module. The functions and data defined within each module can be used by any other module, as long as those resources are properly <text:span text:style-name="Emphasis">exported</text:span> and <text:span text:style-name="Emphasis">imported</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Suppose you wanted to write a simple program that would display the freezing point and boiling point of water in Fahrenheit. However, you only know the values in Celsius to be 0 (freezing) and 100 (boiling). Luckily you happen to know how to convert Celsius to Fahrenheit!</text:p>
   <text:p text:style-name="Text_20_body">Such a program might look like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">/* water-limits.js */</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">function celsiusToFahrenheit(celsius) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  return celsius * (9/5) + 32;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const freezingPointC = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const boilingPointC = 100;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const freezingPointF = celsiusToFahrenheit(freezingPointC);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const boilingPointF = celsiusToFahrenheit(boilingPointC);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">console.log(`The freezing point of water in Fahrenheit is ${freezingPointF}`);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(`The boiling point of water in Fahrenheit is ${boilingPointF}`);</text:span></text:p>
   <text:p text:style-name="Text_20_body">This <text:span text:style-name="Strong_20_Emphasis">water-limits.js</text:span> program is simple but let’s break it down into its parts:</text:p>
   <text:list xml:id="list2362474329" text:style-name="L17">
    <text:list-item>
     <text:p text:style-name="P58">At the top of the file, the function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span> is declared. When given a value in Celsius, it will return the value converted to Fahrenheit. Both input and output will be a number. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P58">Below, <text:span text:style-name="Source_20_Text">freezingPointC</text:span> and <text:span text:style-name="Source_20_Text">boilingPointC</text:span> are assigned the known values <text:span text:style-name="Source_20_Text">0</text:span> and <text:span text:style-name="Source_20_Text">100</text:span>, respectively. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P58">Using these values and the function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span>, the additional values <text:span text:style-name="Source_20_Text">freezingPointF</text:span> and <text:span text:style-name="Source_20_Text">boilingPointF</text:span> are calculated. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P57">Lastly, these values are printed to the console. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Executing this file using Node would look something like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">$ node water-limits.js</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">The freezing point of water in Fahrenheit is 32</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">The boiling point of water in Fahrenheit is 212</text:span></text:p>
   <text:p text:style-name="Text_20_body">Now, you decide to write a second program. In this program, the user can input any temperature value in Celsius and the program responds by printing the input temperature converted to Fahrenheit. </text:p>
   <text:p text:style-name="Text_20_body">For example, you might want to be able to run such a program and see a response like so:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">$ node celsius-to-fahrenheit.js 100</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">100 degrees Celsius = 212 degrees Fahrenheit</text:span></text:p>
   <text:p text:style-name="Text_20_body">The JavaScript below would do just that:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">/* celsius-to-fahrenheit.js */</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">function celsiusToFahrenheit(celsius) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    return celsius * (9/5) + 32;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const celsiusInput = process.argv[2]; // Get the 3rd input from the argument list</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const fahrenheitValue = celsiusToFahrenheit(celsiusInput);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(`${celsiusInput} degrees Celsius = ${fahrenheitValue} degrees Fahrenheit`);</text:span></text:p>
   <text:p text:style-name="Text_20_body">Now, let’s break down the <text:span text:style-name="Strong_20_Emphasis">celsius-to-fahrenheit.js</text:span> program:</text:p>
   <text:list xml:id="list3000858852" text:style-name="L18">
    <text:list-item>
     <text:p text:style-name="P60">At the top of the file, the function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span> is declared. When given a value in Celsius, it will return the value converted to Fahrenheit. Both input and output will be a number. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P60">On the next line of code, <text:span text:style-name="Source_20_Text">celsiusInput</text:span> is assigned <text:span text:style-name="Source_20_Text">process.argv[2]</text:span>. When a program is executed in the Node environment, <text:span text:style-name="Source_20_Text">process.argv</text:span> is an array holding the arguments provided. In this case, it looks like <text:span text:style-name="Source_20_Text">[&apos;node&apos;, &apos;celsius-to-fahrenheit.js&apos;, &apos;100&apos;]</text:span>. So, <text:span text:style-name="Source_20_Text">process.argv[2]</text:span> returns <text:span text:style-name="Source_20_Text">100</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P60">Using this value and the function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span>, the additional value <text:span text:style-name="Source_20_Text">fahrenheitValue</text:span> is calculated. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P59">Lastly, a message is printed to the console displaying this data. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Notice anything similar between the two programs, <text:span text:style-name="Strong_20_Emphasis">water-limits.js</text:span> and <text:span text:style-name="Strong_20_Emphasis">celsius-to-fahrenheit.js</text:span>? Both programs implement the function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span>! Not only did we write this function twice, but if we ever need to make changes to the function we’ll also have to make those changes in two places.</text:p>
   <text:p text:style-name="Text_20_body">Creating a module that exports a <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span> function that can be used by both of these programs would solve this repetitive code problem.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-moduleexports"/>module.exports</text:h>
   <text:p text:style-name="Text_20_body">To create a module, you simply have to create a new file where the functions can be declared. Then, to make these functions available to other files, add them as properties to the built-in <text:span text:style-name="Source_20_Text">module.exports</text:span> object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">/* converters.js */</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">function celsiusToFahrenheit(celsius) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  return celsius * (9/5) + 32;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">module.exports.celsiusToFahrenheit = celsiusToFahrenheit;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">module.exports.fahrenheitToCelsius = function(fahrenheit) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  return (fahrenheit - 32) * (5/9);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">};</text:span></text:p>
   <text:p text:style-name="Text_20_body">The code snippet above demonstrates two ways of exporting functions from a module. Let’s break it down:</text:p>
   <text:list xml:id="list3683262496" text:style-name="L19">
    <text:list-item>
     <text:p text:style-name="P62">At the top of the new file, <text:span text:style-name="Strong_20_Emphasis">converters.js</text:span>, the function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span> is declared. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P62">On the next line of code, the first approach for exporting a function from a module is shown. In this case, the already-defined function <text:span text:style-name="Source_20_Text">celsiusToFahrenheit()</text:span> is assigned to <text:span text:style-name="Source_20_Text">module.exports.celsiusToFahrenheit</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P62">Below, an alternative approach for exporting a function from a module is shown. In this second case, a new function expression is declared and assigned to <text:span text:style-name="Source_20_Text">module.exports.fahrenheitToCelsius</text:span>. This new method is designed to convert Fahrenheit values back to Celsius. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P61">Both approaches successfully store a function within the <text:span text:style-name="Source_20_Text">module.exports</text:span> object. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text">module.exports</text:span> is an object that is built-in to the Node.js runtime environment. Other files can now import this object, and make use of these two functions, with another feature that is built-in to the Node.js runtime environment: the <text:span text:style-name="Source_20_Text">require()</text:span> function. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-require"/>require()</text:h>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">require()</text:span> function accepts a string as an argument. That string provides the <text:a xlink:type="simple" xlink:href="https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">file path</text:a> to the module you would like to import.</text:p>
   <text:p text:style-name="Text_20_body">Let’s update <text:span text:style-name="Strong_20_Emphasis">water-limits.js</text:span> such that it uses <text:span text:style-name="Source_20_Text">require()</text:span> to import the <text:span text:style-name="Source_20_Text">.celsiusToFahrenheit()</text:span> method from the <text:span text:style-name="Source_20_Text">module.exports</text:span> object within <text:span text:style-name="Strong_20_Emphasis">converters.js</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">/* water-limits.js */</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const converters = require(&apos;./converters.js&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const freezingPointC = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const boilingPointC = 100;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const freezingPointF = converters.celsiusToFahrenheit(freezingPointC);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const boilingPointF = converters.celsiusToFahrenheit(boilingPointC);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">console.log(`The freezing point of water in Fahrenheit is ${freezingPointF}`);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(`The boiling point of water in Fahrenheit is ${boilingPointF}`);</text:span></text:p>
   <text:p text:style-name="Text_20_body">In this case, <text:span text:style-name="Source_20_Text">./</text:span> is a relative path indicating that <text:span text:style-name="Strong_20_Emphasis">converters.js</text:span> is stored in the same folder as <text:span text:style-name="Strong_20_Emphasis">water-limits.js</text:span>. When you use <text:span text:style-name="Source_20_Text">require()</text:span>, the entire <text:span text:style-name="Source_20_Text">module.exports</text:span> object is returned and stored in the variable <text:span text:style-name="Source_20_Text">converters</text:span>. This means that both the <text:span text:style-name="Source_20_Text">.celsiusToFahrenheit()</text:span> and <text:span text:style-name="Source_20_Text">.fahrenheitToCelsius()</text:span> methods can be used in this program!</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-using-object-destructuring-to-be-more-selective-with-require"/><text:soft-page-break/>Using Object Destructuring to be more Selective With <text:span text:style-name="Source_20_Text">require()</text:span></text:h>
   <text:p text:style-name="Text_20_body">In many cases, modules will export a large number of functions but only one or two of them are needed. You can use object destructuring to extract only the needed functions.</text:p>
   <text:p text:style-name="Text_20_body">Let’s update <text:span text:style-name="Strong_20_Emphasis">celsius-to-fahrenheit.js</text:span> and only extract the <text:span text:style-name="Source_20_Text">.celsiusToFahrenheit()</text:span> method, leaving <text:span text:style-name="Source_20_Text">.fahrenheitToCelsius()</text:span> behind: </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">/* celsius-to-fahrenheit.js */</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const { celsiusToFahrenheit } = require(&apos;./converters.js&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const celsiusInput = process.argv[2]; </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const fahrenheitValue = celsiusToFahrenheit(celsiusInput);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(`${celsiusInput} degrees Celsius = ${fahrenheitValue} degrees Fahrenheit`);</text:span></text:p>
   <text:p text:style-name="Text_20_body">With this approach, the remainder of the program works the same way but the program avoids importing a function it does not need.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="P12" text:outline-level="2"><text:bookmark text:name="heading-review3"/>Review</text:h>
   <text:p text:style-name="Text_20_body">In this article, you have learned the following:</text:p>
   <text:list xml:id="list167972929" text:style-name="L20">
    <text:list-item>
     <text:p text:style-name="P64">The benefits of implementing modular programs. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P64">How to use the Node.js <text:span text:style-name="Source_20_Text">module.exports</text:span> object to <text:span text:style-name="Emphasis">export</text:span> code from a file - meaning its functions and/or data can be used by other files/modules. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P64">How to use the Node.js <text:span text:style-name="Source_20_Text">require()</text:span> function to <text:span text:style-name="Emphasis">import</text:span> the functions and/or data from another module. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P63">How to use object destructuring to only import the desired components of a module. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Congratulations on reaching this milestone! With a little more practice, you will soon be able to handle Node.js modules with ease.</text:p>
   <text:h text:style-name="P11" text:outline-level="1">Introduction to JavaScript Runtime Environments</text:h>
   <text:p text:style-name="Text_20_body">An introduction to the Node runtime environment and a browser&apos;s runtime environment. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a Runtime Environment?</text:h>
   <text:p text:style-name="Text_20_body">A <text:span text:style-name="Emphasis">runtime environment</text:span> is where your program will be executed. It determines what global objects your program can access and it can also impact how it runs. This article covers the two JavaScript runtime environments: </text:p>
   <text:list xml:id="list750627351" text:style-name="L21">
    <text:list-item>
     <text:p text:style-name="P66">the runtime environment of a browser (like <text:a xlink:type="simple" xlink:href="https://www.google.com/chrome/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Chrome</text:a>, or <text:a xlink:type="simple" xlink:href="https://www.mozilla.org/en-US/firefox/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Firefox</text:a>) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P65">the Node runtime environment </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:soft-page-break/>A Browser’s Runtime Environment</text:h>
   <text:p text:style-name="Text_20_body">The most common place where JavaScript code is executed is in a browser. For example, using any <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/visual-studio-code" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">text editor</text:a>, you could create a file on your own computer called <text:span text:style-name="Strong_20_Emphasis">my_website.html</text:span> and put the following HTML code inside:</text:p>
   <text:p text:style-name="P16">&lt;!-- my_website.html --&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text">&lt;<text:span text:style-name="T1">html</text:span>&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="2"/>&lt;<text:span text:style-name="T1">body</text:span>&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>&lt;<text:span text:style-name="T1">h1</text:span>&gt; My Website &lt;/<text:span text:style-name="T1">h1</text:span>&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>&lt;<text:span text:style-name="T1">script</text:span>&gt; window.alert(<text:span text:style-name="T2">&apos;Hello World&apos;</text:span>); &lt;/<text:span text:style-name="T1">script</text:span>&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="2"/>&lt;/<text:span text:style-name="T1">body</text:span>&gt;</text:p>
   <text:p text:style-name="P2">&lt;/<text:span text:style-name="T1">html</text:span>&gt;</text:p>
   <text:p text:style-name="Text_20_body">Save your file, then open your favorite browser. Most browsers will allow you to load websites that you have created locally by going to the menu File &gt; Open File &gt; <text:span text:style-name="Strong_20_Emphasis">my_website.html</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">Upon loading, the embedded <text:span text:style-name="Source_20_Text">&lt;script&gt;&lt;/script&gt;</text:span> will execute and the <text:span text:style-name="Source_20_Text">window.alert()</text:span> method will create a pop-up box in your browser with the text <text:span text:style-name="Source_20_Text">&quot;Hello World&quot;</text:span>. How is this possible? Where did the <text:span text:style-name="Source_20_Text">window.alert()</text:span> method come from and how can it control your browser?</text:p>
   <text:p text:style-name="Text_20_body">The answer is that you are executing this code in the <text:span text:style-name="Emphasis">browser’s runtime environment</text:span>. The <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">window.alert()</text:span></text:a> method is built into this environment and any program executed in a browser has access to this method. In fact, the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/Window" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">window</text:span></text:a> object provides access to a huge amount of data and functionality relating to the open browser window beyond just <text:span text:style-name="Source_20_Text">.alert()</text:span>.</text:p>
   <text:p text:style-name="P18">Try replacing <text:span text:style-name="Source_20_Text">window.alert()</text:span> with <text:span text:style-name="Source_20_Text">window.prompt()</text:span> or <text:span text:style-name="Source_20_Text">window.confirm()</text:span></text:p>
   <text:p text:style-name="Text_20_body">Applications created for and executed in the browser are known as <text:span text:style-name="Emphasis">front-end</text:span> applications. For a long time, JavaScript code could only be executed in a browser and was used exclusively for creating front-end applications. In order to create <text:span text:style-name="Emphasis">back-end</text:span> applications that could run on a computer WITHOUT a browser, you would need to use other programming languages such as Java or PHP.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">The Node Runtime Environment</text:h>
   <text:p text:style-name="Text_20_body">In 2009, the <text:span text:style-name="Emphasis">Node runtime environment</text:span> was created for the purpose of executing JavaScript code without a browser, thus enabling programmers to create <text:span text:style-name="Emphasis">full-stack</text:span> (front-end and back-end) applications using only the JavaScript language. </text:p>
   <text:p text:style-name="Text_20_body">Node is an entirely different runtime environment, meaning that browser-environment data values and functions, like <text:span text:style-name="Source_20_Text">window.alert()</text:span>, can’t be used. Instead, the Node runtime environment gives back-end applications access to a variety of features unavailable in a browser, such as access to the server’s file system, database, and network.</text:p>
   <text:p text:style-name="Text_20_body">For example, suppose you created a file called <text:span text:style-name="Strong_20_Emphasis">my-app.js</text:span>. We can check to see the directory that this file is located in using the Node runtime environment variable <text:span text:style-name="Source_20_Text">process</text:span>:</text:p>
   <text:p text:style-name="P16">// my-app.js</text:p>
   <text:p text:style-name="P2">console.log(process.env.<text:span text:style-name="T3">PWD</text:span>);</text:p>
   <text:p text:style-name="P18"><text:soft-page-break/>Notice that we are using <text:span text:style-name="Source_20_Text">console.log</text:span> now instead of <text:span text:style-name="Source_20_Text">window.alert()</text:span> since the <text:span text:style-name="Source_20_Text">window</text:span> object isn’t available</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text">process</text:span> is an object containing data relating to the JavaScript file being executed. <text:span text:style-name="Source_20_Text">process.env</text:span> is an object containing environment variables such as <text:span text:style-name="Source_20_Text">process.env.PWD</text:span> which contains the current working directory (and stands for “<text:span text:style-name="Strong_20_Emphasis">P</text:span>rint <text:span text:style-name="Strong_20_Emphasis">W</text:span>orking <text:span text:style-name="Strong_20_Emphasis">D</text:span>irectory”). </text:p>
   <text:p text:style-name="Text_20_body">To execute the JavaScript code in this file, first make sure that you have <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/setting-up-node-locally" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">set up Node on your computer</text:a>. Then, open up a <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/learn-the-command-line" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">terminal</text:a> and run the following command:</text:p>
   <text:p text:style-name="Preformatted_20_Text">$ node my-app.js</text:p>
   <text:p text:style-name="P2">/path/to/working/directory</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">node</text:span> command tells your computer to execute the <text:span text:style-name="Source_20_Text">my-app.js</text:span> file in the Node environment. You can also use the <text:span text:style-name="Source_20_Text">node</text:span> command without a file argument to open up the Node <text:span text:style-name="Strong_20_Emphasis">R</text:span>ead-<text:span text:style-name="Strong_20_Emphasis">E</text:span>val-<text:span text:style-name="Strong_20_Emphasis">P</text:span>rint-<text:span text:style-name="Strong_20_Emphasis">L</text:span>oop (REPL):</text:p>
   <text:p text:style-name="Preformatted_20_Text">$ node</text:p>
   <text:p text:style-name="Preformatted_20_Text">&gt; process.env.HOME</text:p>
   <text:p text:style-name="P2">&apos;/home/ccuser&apos;</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">Summary</text:h>
   <text:p text:style-name="Text_20_body">A <text:span text:style-name="Emphasis">runtime environment</text:span> is where your program will be executed. JavaScript code may be executed in one of two runtime environments:</text:p>
   <text:list xml:id="list1105424774" text:style-name="L22">
    <text:list-item>
     <text:p text:style-name="P68">a browser’s runtime environment </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P67">the Node runtime environment </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">In each of these environments, different data values and functions are available, and these differences help distinguish front-end applications from back-end applications.</text:p>
   <text:list xml:id="list1867184603" text:style-name="L23">
    <text:list-item>
     <text:p text:style-name="P70">Front-end JavaScript applications are executed in a browser’s runtime environment and have access to the <text:span text:style-name="Source_20_Text">window</text:span> object. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P69">Back-end JavaScript applications are executed in the Node runtime environment and have access to the file system, databases, and networks attached to the server. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P13">Node.js Essentials</text:p>
   <text:p text:style-name="P3">Introduction</text:p>
   <text:p text:style-name="Text_20_body">We will continue learning Node.js in this lesson by going into depth, covering modules essential to back-end development with Node.js. We’ll cover core Node.js modules such as <text:span text:style-name="Source_20_Text">events</text:span>, <text:span text:style-name="Source_20_Text">error</text:span>, <text:span text:style-name="Source_20_Text">buffer</text:span>, <text:span text:style-name="Source_20_Text">fs</text:span>, and <text:span text:style-name="Source_20_Text">timer</text:span> modules. We will also learn how to get user input and output and create readable and writable streams. These topics will not only help you get a deeper understanding of Node.js but will also build on the topics that have been covered thus far.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">Review the code in <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>. To see the outputs of the code, type <text:span text:style-name="Source_20_Text">node app.js</text:span> in the terminal and press <text:span text:style-name="User_20_Entry">Enter</text:span> or <text:span text:style-name="User_20_Entry">Return</text:span>. When you are ready to move on, click “Next”.</text:p>
   <text:p text:style-name="Text_20_body">Here are some things that are going on in the code:</text:p>
   <text:list xml:id="list3785674795" text:style-name="L24">
    <text:list-item>
     <text:p text:style-name="P72"><text:soft-page-break/>The <text:span text:style-name="Source_20_Text">events</text:span> module provides <text:span text:style-name="Source_20_Text">EventEmitter</text:span> objects used to assign listener functions triggered on specified events. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P72">The <text:span text:style-name="Source_20_Text">buffer</text:span> module is used to handle binary data. In <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, a <text:span text:style-name="Source_20_Text">Buffer</text:span> object is being created and then converted to a string. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P72">The <text:span text:style-name="Source_20_Text">fs</text:span> module is used to interact with the user’s filesystem. In <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, a statement is logged that verifies that a file was provided in a callback function. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P71">The <text:span text:style-name="Source_20_Text">timer</text:span> module provides the <text:span text:style-name="Source_20_Text">setImmediate()</text:span> function which runs immediately after the current poll phase is completed. Take note of when <text:span text:style-name="Source_20_Text">&apos;Welcome to Node.js&apos;</text:span> is logged to the terminal. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P14">const events = require(&apos;events&apos;);</text:p>
   <text:p text:style-name="P14">const fs = require(&apos;fs&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// EventEmitter object is used to assign listener functions triggered on specific events</text:p>
   <text:p text:style-name="P14">let myEmitter = new events.EventEmitter();</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let newWelcomeMessage = (data) =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>console.log(`Welcome to Nodejs, what&apos;s your name? ${data}.`);</text:p>
   <text:p text:style-name="P14">};</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">myEmitter.on(&apos;welcome&apos;, newWelcomeMessage);</text:p>
   <text:p text:style-name="P14">myEmitter.emit(&apos;welcome&apos;, &apos;Codey&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// Buffer objects are used to handle binary data</text:p>
   <text:p text:style-name="P14">const buffer = Buffer.from(&apos;Hello World&apos;);</text:p>
   <text:p text:style-name="P14">console.log(buffer);</text:p>
   <text:p text:style-name="P14">console.log(buffer.toString());</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let readDataCallback = (err, data) =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>if (err) {</text:p>
   <text:p text:style-name="P14"><text:s text:c="4"/>console.log(`Something went wrong: ${err}`);</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>} else {</text:p>
   <text:p text:style-name="P14"><text:s text:c="4"/>console.log(`Provided file contained: ${data}`);</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="P14">};</text:p>
   <text:p text:style-name="P14"><text:soft-page-break/></text:p>
   <text:p text:style-name="P14">// file.txt file is loaded using the readFile method of the fs module</text:p>
   <text:p text:style-name="P14">fs.readFile(&apos;./file.txt&apos;, &apos;utf-8&apos;, readDataCallback);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// setImmediate function runs immediately after the current poll phase is completed</text:p>
   <text:p text:style-name="P14">setImmediate(() =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>console.log(&apos;Welcome to Node.js&apos;);</text:p>
   <text:p text:style-name="P14">});</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">$ node app.js</text:p>
   <text:p text:style-name="P14">Welcome to Nodejs, what&apos;s your name? Codey.</text:p>
   <text:p text:style-name="P14">&lt;Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64&gt;</text:p>
   <text:p text:style-name="P14">Hello World</text:p>
   <text:p text:style-name="P14">Welcome to Node.js</text:p>
   <text:p text:style-name="P14">Provided file contained: Welcome to Node.js Essentials!</text:p>
   <text:p text:style-name="P14">$ ^C</text:p>
   <text:p text:style-name="P14">$ </text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let {testNumber} = require(&apos;./game.js&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">process.stdout.write(&quot;I&apos;m thinking of a number from 1 through 10. What do you think it is? \n(Write \&quot;quit\&quot; to give up.)\n\nIs the number ... &quot;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let playGame = (userInput) =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>let input = userInput.toString().trim();</text:p>
   <text:p text:style-name="P14"><text:tab/>testNumber(input);</text:p>
   <text:p text:style-name="P14">};</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">process.stdin.on(&apos;data&apos;, playGame);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">The Events Module</text:p>
   <text:p text:style-name="Text_20_body">Node is often described as having event-driven architecture. Let’s explore what that means. </text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>In traditional imperative programming, we give the computer a series of instructions to execute in a pre-defined order. In contrast, when we write web applications, we often need to write logic to handle situations without knowing exactly when they’ll occur. For example, when programming a website, we might provide functionality for a click event without knowing when a user will trigger it. When Node was created, it applied this same concept of event-driven principles to the back-end environment. </text:p>
   <text:p text:style-name="Text_20_body">Node provides an <text:span text:style-name="Source_20_Text">EventEmitter</text:span> class which we can access by requiring in the <text:span text:style-name="Source_20_Text">events</text:span> core module:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Require in the &apos;events&apos; core module</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">let events = require(&apos;events&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Create an instance of the EventEmitter class</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">let myEmitter = new events.EventEmitter();</text:span></text:p>
   <text:p text:style-name="Text_20_body">Each event emitter instance has an <text:span text:style-name="Source_20_Text">.on()</text:span> method which assigns a <text:span text:style-name="Emphasis">listener</text:span> callback function to a named event. The <text:span text:style-name="Source_20_Text">.on()</text:span> method takes as its first argument the name of the event as a string and, as its second argument, the listener callback function. </text:p>
   <text:p text:style-name="Text_20_body">Each event emitter instance also has an <text:span text:style-name="Source_20_Text">.emit()</text:span> method which announces a named event has occurred. The <text:span text:style-name="Source_20_Text">.emit()</text:span> method takes as its first argument the name of the event as a string and, as its second argument, the data that should be passed into the listener callback function. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">let newUserListener = (data) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(`We have a new user: ${data}.`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Assign the newUserListener function as the listener callback for &apos;new user&apos; events</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">myEmitter.on(&apos;new user&apos;, newUserListener)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">// Emit a &apos;new user&apos; event</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">myEmitter.emit(&apos;new user&apos;, &apos;Lily Pad&apos;) //newUserListener will be invoked with &apos;Lily Pad&apos;</text:span></text:p>
   <text:p text:style-name="Text_20_body">Let’s create an event emitter!</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">In <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, we’ve required in the <text:span text:style-name="Source_20_Text">events</text:span> core module and written a function <text:span text:style-name="Source_20_Text">listenerCallback</text:span> which expects to be passed <text:span text:style-name="Source_20_Text">data</text:span> and will log a string to the console which incorporates that <text:span text:style-name="Source_20_Text">data</text:span>. Now it’s time to create an event emitter. Create a new variable, <text:span text:style-name="Source_20_Text">myEmitter</text:span> and assign as its value a new instance of the event emitter class. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Invoke <text:span text:style-name="Source_20_Text">myEmitter</text:span>‘s <text:span text:style-name="Source_20_Text">.on()</text:span> method passing in <text:span text:style-name="Source_20_Text">&apos;celebration&apos;</text:span> as the event name and <text:span text:style-name="Source_20_Text">listenerCallback</text:span> as the listener callback function. </text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Let’s emit a <text:span text:style-name="Source_20_Text">&apos;celebration&apos;</text:span> event! Invoke <text:span text:style-name="Source_20_Text">myEmitter</text:span>‘s <text:span text:style-name="Source_20_Text">.emit()</text:span> method passing in <text:soft-page-break/><text:span text:style-name="Source_20_Text">&apos;celebration&apos;</text:span> as the event name and a string of your choice as the second argument. </text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Let’s see this program run! Use the <text:span text:style-name="Source_20_Text">node</text:span> command to run <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> from the terminal. </text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// Here we require in the &apos;events&apos; module and save a reference to it in an events variable</text:p>
   <text:p text:style-name="P14">let events = require(&apos;events&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let listenerCallback = (data) =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="4"/>console.log(&apos;Celebrate &apos; + data);</text:p>
   <text:p text:style-name="P14">}</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let myEmitter = new events.EventEmitter();</text:p>
   <text:p text:style-name="P14">myEmitter.on(&apos;celebration&apos;, listenerCallback);</text:p>
   <text:p text:style-name="P14">myEmitter.emit(&apos;celebration&apos;, &apos;xxxxx&apos;);</text:p>
   <text:p text:style-name="P13">User Input/Output</text:p>
   <text:p text:style-name="Text_20_body">If you’ve worked with JavaScript before, you’re likely familiar with the concept of <text:span text:style-name="Emphasis">input/output</text:span> even if you haven’t heard it called that. At its most abstract, output is any data or feedback that a computer provides (like to a human user), while input is data provided to the computer. When we use <text:span text:style-name="Source_20_Text">console.log()</text:span> we prompt the computer to output information to the console. In the Node environment, the console is the terminal, and the <text:span text:style-name="Source_20_Text">console.log()</text:span> method is a “thin wrapper” on the <text:span text:style-name="Source_20_Text">.stdout.write()</text:span> method of the <text:span text:style-name="Source_20_Text">process</text:span> object. <text:span text:style-name="Source_20_Text">stdout</text:span> stands for standard output. </text:p>
   <text:p text:style-name="Text_20_body">In Node, we can also receive input from a user through the terminal using the <text:span text:style-name="Source_20_Text">stdin.on()</text:span> method on the <text:span text:style-name="Source_20_Text">process</text:span> object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">process.stdin.on(&apos;data&apos;, (userInput) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  let input = userInput.toString()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(input)</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:p text:style-name="Text_20_body">Here, we were able to use <text:span text:style-name="Source_20_Text">.on()</text:span> because under the hood <text:span text:style-name="Source_20_Text">process.stdin</text:span> is an instance of <text:span text:style-name="Source_20_Text">EventEmitter</text:span>. When a user enters text into the terminal and hits enter, a <text:span text:style-name="Source_20_Text">&apos;data&apos;</text:span> event will be fired and our anonymous listener callback will be invoked. The <text:span text:style-name="Source_20_Text">userInput</text:span> we receive is an instance of <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/buffer.html#buffer_buffer" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the Node </text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/buffer.html#buffer_buffer" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">Buffer</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/buffer.html#buffer_buffer" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> class</text:a>, so we convert it to a string before printing.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">We’ve gotten started making a number guessing game. We’ve written a function <text:span text:style-name="Source_20_Text">playGame()</text:span> which expects a line of user input corresponding to a guess. Input read through the terminal is received as a <text:span text:style-name="Source_20_Text">Buffer</text:span> object with a new line character at the end, so we’ve converted it to a string <text:soft-page-break/>and trimmed off the unnecessary new line character. We then feed the processed input into the <text:span text:style-name="Source_20_Text">testNumber()</text:span> function required in from <text:span text:style-name="Strong_20_Emphasis">game.js</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">Read through the code and try to figure out what has been done and what is left to do to make this an interactive command line program (<text:span text:style-name="Strong_20_Emphasis">game.js</text:span> includes the core game logic, but reading through it is optional). </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Everything about the game is complete except for reading input from the user. Based on what you’ve learned about getting user input from the terminal, complete the game. </text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Awesome! Let’s play! Run <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> and play the game.</text:p>
   <text:p text:style-name="P13">The Error Module</text:p>
   <text:p text:style-name="Text_20_body">The Node environment’s <text:span text:style-name="Source_20_Text">error</text:span> module has all the standard JavaScript errors such as <text:span text:style-name="Source_20_Text">EvalError</text:span>, <text:span text:style-name="Source_20_Text">SyntaxError</text:span>, <text:span text:style-name="Source_20_Text">RangeError</text:span>, <text:span text:style-name="Source_20_Text">ReferenceError</text:span>, <text:span text:style-name="Source_20_Text">TypeError</text:span>, and <text:span text:style-name="Source_20_Text">URIError</text:span> as well as the JavaScript <text:span text:style-name="Source_20_Text">Error</text:span> class for creating new error instances. Within our own code, we can generate errors and <text:span text:style-name="Source_20_Text">throw</text:span> them, and, with synchronous code in Node, we can use <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/javascript-errors-debugging/modules/errors-and-error-handling" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">error handling</text:a> techniques such as <text:span text:style-name="Source_20_Text">try...catch</text:span> statements. Note that the <text:span text:style-name="Source_20_Text">error</text:span> module is within the global scope—there is no need to import the module with the <text:span text:style-name="Source_20_Text">require()</text:span> statement.</text:p>
   <text:p text:style-name="Text_20_body">Many asynchronous Node APIs use <text:span text:style-name="Emphasis">error-first callback functions</text:span>—callback functions which have an error as the first expected argument and the data as the second argument. If the asynchronous task results in an error, it will be passed in as the first argument to the callback function. If no error was thrown, the first argument will be <text:span text:style-name="Source_20_Text">undefined</text:span>. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const errorFirstCallback = (err, data)  =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  if (err) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    console.log(`There WAS an error: ${err}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  } else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    // err was falsy</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    console.log(`There was NO error. Event data: ${data}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">In order to understand why Node uses error-first callbacks in many of its asynchronous APIs, let’s demonstrate that traditional <text:span text:style-name="Source_20_Text">try...catch</text:span> statements won’t work for errors thrown during asynchronous operations. </text:p>
   <text:p text:style-name="Text_20_body">In <text:span text:style-name="Strong_20_Emphasis">naiveAsyncErr.js</text:span>, we require in the local <text:span text:style-name="Strong_20_Emphasis">api.js</text:span> module which contains the <text:span text:style-name="Source_20_Text">api.naiveErrorProneAsyncFunction()</text:span> method. This asynchronous method throws an error whenever it is passed the input <text:span text:style-name="Source_20_Text">&apos;problematic input&apos;</text:span>. We would want the <text:span text:style-name="Source_20_Text">try...catch</text:span> statement in <text:span text:style-name="Strong_20_Emphasis">naiveAsyncErr.js</text:span> to <text:span text:style-name="Source_20_Text">catch</text:span> this error, but it cannot since the error is thrown asynchronously. </text:p>
   <text:p text:style-name="Text_20_body">In the terminal, execute the <text:span text:style-name="Strong_20_Emphasis">naiveAsyncErr.js</text:span> file. You’ll see that the intended output, <text:span text:style-name="Source_20_Text">Something went wrong. ${err}\n</text:span>, wasn’t logged— meaning that the error was never <text:soft-page-break/>caught. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Now take a look at <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>. Here we wrote an error-first callback function. This callback does the error handling so there’s no need for a <text:span text:style-name="Source_20_Text">try...catch</text:span> statement. This is how most Node asynchronous APIs are set up to handle errors. In <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> we require in the <text:span text:style-name="Strong_20_Emphasis">api.js</text:span> module. This time, we’ll use an asynchronous method, <text:span text:style-name="Source_20_Text">api.errorProneAsyncApi()</text:span>, designed to work like the asynchronous methods in Node. </text:p>
   <text:p text:style-name="Text_20_body">At the botton of <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, invoke the <text:span text:style-name="Source_20_Text">api.errorProneAsyncApi()</text:span> method with <text:span text:style-name="Source_20_Text">&apos;problematic input&apos;</text:span> as the first argument and the error-first callback as the second. </text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Let’s run <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> in the terminal so we can see how it properly handles the error created during the asynchronous operation. </text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">The Buffer Module</text:p>
   <text:p text:style-name="Text_20_body">In Node.js, the <text:span text:style-name="Source_20_Text">Buffer</text:span> module is used to handle binary data. The <text:span text:style-name="Source_20_Text">Buffer</text:span> module is within the global scope, which means that <text:span text:style-name="Source_20_Text">Buffer</text:span> objects can be accessed anywhere in the environment without importing the module with <text:span text:style-name="Source_20_Text">require()</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">A <text:span text:style-name="Source_20_Text">Buffer</text:span> object represents a fixed amount of memory that can’t be resized. <text:span text:style-name="Source_20_Text">Buffer</text:span> objects are similar to an array of integers where each element in the array represents a byte of data. The buffer object will have a range of integers from 0 to 255 inclusive. </text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">Buffer</text:span> module provides a variety of methods to handle the binary data such as <text:span text:style-name="Source_20_Text">.alloc()</text:span>, <text:span text:style-name="Source_20_Text">.toString()</text:span>, <text:span text:style-name="Source_20_Text">.from()</text:span>, and <text:span text:style-name="Source_20_Text">.concat()</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">.alloc()</text:span> method creates a new <text:span text:style-name="Source_20_Text">Buffer</text:span> object with the size specified as the first parameter. <text:span text:style-name="Source_20_Text">.alloc()</text:span> accepts three arguments: </text:p>
   <text:list xml:id="list1791898652" text:style-name="L25">
    <text:list-item>
     <text:p text:style-name="P74">Size: Required. The size of the buffer </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P74">Fill: Optional. A value to fill the buffer with. Default is 0. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P73">Encoding: Optional. Default is UTF-8. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const buffer = Buffer.alloc(5);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(buffer); // Ouput: [0, 0, 0, 0, 0]</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">.toString()</text:span> method translates the <text:span text:style-name="Source_20_Text">Buffer</text:span> object into a human-readable string. It accepts three optional arguments: </text:p>
   <text:list xml:id="list2866818673" text:style-name="L26">
    <text:list-item>
     <text:p text:style-name="P76">Encoding: Default is UTF-8. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P76">Start: The byte offset to begin translating in the <text:span text:style-name="Source_20_Text">Buffer</text:span> object. Default is 0. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P75">End: The byte offset to end translating in the <text:span text:style-name="Source_20_Text">Buffer</text:span> object. Default is the length of the buffer. The start and end of the buffer are similar to the start and end of an array, where the first element is 0 and increments upwards. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const buffer = Buffer.alloc(5, &apos;a&apos;);</text:span></text:p>
   <text:p text:style-name="P2"><text:soft-page-break/><text:span text:style-name="Source_20_Text">console.log(buffer.toString()); // Output: aaaaa</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">.from()</text:span> method is provided to create a new <text:span text:style-name="Source_20_Text">Buffer</text:span> object from the specified string, array, or buffer. The method accepts two arguments: </text:p>
   <text:list xml:id="list378897407" text:style-name="L27">
    <text:list-item>
     <text:p text:style-name="P78">Object: Required. An object to fill the buffer with. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P77">Encoding: Optional. Default is UTF-8. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const buffer = Buffer.from(&apos;hello&apos;);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(buffer); // Output: [104, 101, 108, 108, 111]</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">.concat()</text:span> method joins all buffer objects passed in an array into one <text:span text:style-name="Source_20_Text">Buffer</text:span> object. <text:span text:style-name="Source_20_Text">.concat()</text:span> comes in handy because a <text:span text:style-name="Source_20_Text">Buffer</text:span> object can’t be resized. This method accepts two arguments: </text:p>
   <text:list xml:id="list2958712176" text:style-name="L28">
    <text:list-item>
     <text:p text:style-name="P80">Array: Required. An array containing <text:span text:style-name="Source_20_Text">Buffer</text:span> objects. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P79">Length: Optional. Specifies the length of the concatenated buffer. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const buffer1 = Buffer.from(&apos;hello&apos;); // Output: [104, 101, 108, 108, 111]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const buffer2 = Buffer.from(&apos;world&apos;); // Output:[119, 111, 114, 108, 100]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const array = [buffer1, buffer2];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const bufferConcat = Buffer.concat(array);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">console.log(bufferConcat); // Output: [104, 101, 108, 108, 111, 119, 111, 114, 108, 100]</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">In <text:span text:style-name="Strong_20_Emphasis">buffer.js</text:span>, use the <text:span text:style-name="Source_20_Text">.alloc()</text:span> method with a size of ‘15’ and a fill value of <text:span text:style-name="Source_20_Text">&apos;b&apos;</text:span>. Save the created <text:span text:style-name="Source_20_Text">Buffer</text:span> object to a <text:span text:style-name="Source_20_Text">const</text:span> variable named <text:span text:style-name="Source_20_Text">bufferAlloc</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">In <text:span text:style-name="Strong_20_Emphasis">buffer.js</text:span>, create two <text:span text:style-name="Source_20_Text">const</text:span> variables <text:span text:style-name="Source_20_Text">buffer1</text:span> and <text:span text:style-name="Source_20_Text">buffer2</text:span>. Instantiate two <text:span text:style-name="Source_20_Text">Buffer</text:span> objects using the <text:span text:style-name="Source_20_Text">.from()</text:span> method. Pass the string <text:span text:style-name="Source_20_Text">&apos;hello&apos;</text:span> into <text:span text:style-name="Source_20_Text">buffer1</text:span> and <text:span text:style-name="Source_20_Text">&apos;world&apos;</text:span> into <text:span text:style-name="Source_20_Text">buffer2</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Create a variable named <text:span text:style-name="Source_20_Text">bufferArray</text:span> and set it equal to an array that contains <text:span text:style-name="Source_20_Text">buffer1</text:span> and <text:span text:style-name="Source_20_Text">buffer2</text:span>. Then, pass <text:span text:style-name="Source_20_Text">bufferArray</text:span> to the <text:span text:style-name="Source_20_Text">.concat()</text:span> method to combine the two buffers into a new <text:span text:style-name="Source_20_Text">Buffer</text:span> object. Save the result to a <text:span text:style-name="Source_20_Text">const</text:span> variable named <text:span text:style-name="Source_20_Text">bufferConcat</text:span>.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Using the <text:span text:style-name="Source_20_Text">.toString()</text:span> method, save the string translation of <text:span text:style-name="Source_20_Text">bufferConcat</text:span> to a variable named <text:span text:style-name="Source_20_Text">bufferString</text:span>, then log the value of <text:span text:style-name="Source_20_Text">bufferString</text:span> to the console.</text:p>
   <text:p text:style-name="Text_20_body">Remember that you can run <text:span text:style-name="Strong_20_Emphasis">buffer.js</text:span> by running the command:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">node buffer.js</text:span></text:p>
   <text:p text:style-name="P14">// Allocate buffer of size 15 filled with &apos;b&apos;</text:p>
   <text:p text:style-name="P14"><text:soft-page-break/>const bufferAlloc = Buffer.alloc(15, &apos;b&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// Create buffer1 with &apos;hello&apos; and buffer2 with &apos;world&apos;</text:p>
   <text:p text:style-name="P14">const buffer1 = Buffer.from(&apos;hello&apos;);</text:p>
   <text:p text:style-name="P14">const buffer2 = Buffer.from(&apos;world&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// Combine buffer1 and buffer2</text:p>
   <text:p text:style-name="P14">const bufferArray = [buffer1, buffer2];</text:p>
   <text:p text:style-name="P14">const bufferConcat = Buffer.concat(bufferArray);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// Translate buffer to string</text:p>
   <text:p text:style-name="P14">const bufferString = Buffer.toString(bufferConcat);</text:p>
   <text:p text:style-name="P14">console.log(bufferString);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">// Uncomment the apropriate `console.log()` to ouput to console</text:p>
   <text:p text:style-name="P14">//console.log(bufferAlloc);</text:p>
   <text:p text:style-name="P14">//console.log(&apos;Buffer 1:&apos;, buffer1, &apos;Buffer 2:&apos;, buffer2)</text:p>
   <text:p text:style-name="P14">//console.log(bufferConcat);</text:p>
   <text:p text:style-name="P14">//console.log(bufferString);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">The FS Module</text:p>
   <text:p text:style-name="Text_20_body">All of the data on a computer is organized and accessed through a <text:span text:style-name="Emphasis">filesystem</text:span>. When running JavaScript code on a browser, it’s important for a script to have only limited access to a user’s filesystem. This technique of isolating some applications from others is known as <text:span text:style-name="Emphasis">sandboxing</text:span>. Sandboxing protects users from malicious programs and invasions of privacy. </text:p>
   <text:p text:style-name="Text_20_body">In the back-end, however, less restricted interaction with the filesystem is essential. The Node <text:span text:style-name="Source_20_Text">fs</text:span> core module is an API for interacting with the <text:span text:style-name="Strong_20_Emphasis">f</text:span>ile <text:span text:style-name="Strong_20_Emphasis">s</text:span>ystem. It was modeled after the <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/POSIX" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">POSIX</text:a> standard for interacting with the filesystem.</text:p>
   <text:p text:style-name="Text_20_body">Each method available through the <text:span text:style-name="Source_20_Text">fs</text:span> module has a synchronous version and an asynchronous version. One method available on the <text:span text:style-name="Source_20_Text">fs</text:span> core module is the <text:span text:style-name="Source_20_Text">.readFile()</text:span> method which <text:span text:style-name="Strong_20_Emphasis">read</text:span>s data from a provided <text:span text:style-name="Strong_20_Emphasis">file</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const fs = require(&apos;fs&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">let readDataCallback = (err, data) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  if (err) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    console.log(`Something went wrong: ${err}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  } else {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">    console.log(`Provided file contained: ${data}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">fs.readFile(&apos;./file.txt&apos;, &apos;utf-8&apos;, readDataCallback);</text:span></text:p>
   <text:p text:style-name="Text_20_body">Let’s walk through the example above:</text:p>
   <text:list xml:id="list3569650470" text:style-name="L29">
    <text:list-item>
     <text:p text:style-name="P82">We required in the <text:span text:style-name="Source_20_Text">fs</text:span> core module. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P82">We define an error-first callback function which expects an error to be passed as the first argument and <text:span text:style-name="Source_20_Text">data</text:span> as the second. If the error is present, the function will print <text:span text:style-name="Source_20_Text">Something went wrong: ${err}</text:span>, otherwise, it will print <text:span text:style-name="Source_20_Text">Provided file contained: ${data}</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P82">We invoked the <text:span text:style-name="Source_20_Text">.readFile()</text:span> method with three arguments: </text:p>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P82">The first argument is a string that contains a path to the file <text:span text:style-name="Strong_20_Emphasis">file.txt</text:span>. </text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P82">The second argument is a string specifying the file’s <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Character_encoding" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">character encoding</text:a> (usually ‘utf-8’ for text files). </text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P81">The third argument is the callback function to be invoked when the asynchronous task of reading from the file system is complete. Node will pass the contents of <text:span text:style-name="Strong_20_Emphasis">file.txt</text:span> into the provided callback as its second argument. </text:p>
      </text:list-item>
     </text:list>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">We’ve created a devious treasure hunt for you! Your task is to use <text:span text:style-name="Source_20_Text">fs.readFile()</text:span> to figure out the secret word and assign that value to the <text:span text:style-name="Source_20_Text">secretWord</text:span> variable in <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>. Here’s your first clue, found scratched into walls of an abandoned castle: <text:span text:style-name="Strong_20_Emphasis">fileOne.txt</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">There are many ways to complete this treasure hunt! You could write one program in <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> to solve the puzzle or you can run <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> to gain new insight and then change the program based on what you’ve figured out. </text:p>
   <text:p text:style-name="Text_20_body">If you want some direction, but aren’t quite ready to check out the hint: we suggest you use the <text:span text:style-name="Source_20_Text">fs.readFile()</text:span> method to print the contents of <text:span text:style-name="Strong_20_Emphasis">fileOne.txt</text:span>.</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">const fs = require(&apos;fs&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let secretWord = &apos;cheeseburgerpizzabagels&apos;;</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let readDataCallback = (err, data) =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>if (err) {</text:p>
   <text:p text:style-name="P14"><text:s text:c="4"/>console.log(`Something went wrong: ${err}`);</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>} else {</text:p>
   <text:p text:style-name="P14"><text:s text:c="4"/>console.log(`Provided file contained: ${data}`);</text:p>
   <text:p text:style-name="P14"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="P14">};</text:p>
   <text:p text:style-name="P14"><text:s/></text:p>
   <text:p text:style-name="P14">fs.readFile(&apos;./file.txt&apos;, &apos;utf-8&apos;, readDataCallback);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">Readable Streams</text:p>
   <text:p text:style-name="Text_20_body">In the previous exercise, we practiced reading the contents of entire files into our JavaScript programs. In more realistic scenarios, data isn’t processed all at once but rather sequentially, piece by piece, in what is known as a <text:span text:style-name="Emphasis">stream</text:span>. Streaming data is often preferable since you don’t need enough RAM to process all the data at once nor do you need to have all the data on hand to begin processing it. </text:p>
   <text:p text:style-name="Text_20_body">One of the simplest uses of streams is reading and writing to files line-by-line. To read files line-by-line, we can use the <text:span text:style-name="Source_20_Text">.createInterface()</text:span> method from the <text:span text:style-name="Source_20_Text">readline</text:span> core module. <text:span text:style-name="Source_20_Text">.createInterface()</text:span> returns an <text:span text:style-name="Source_20_Text">EventEmitter</text:span> set up to emit <text:span text:style-name="Source_20_Text">&apos;line&apos;</text:span> events:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const readline = require(&apos;readline&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const fs = require(&apos;fs&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const myInterface = readline.createInterface({</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  input: fs.createReadStream(&apos;text.txt&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">myInterface.on(&apos;line&apos;, (fileLine) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(`The line read: ${fileLine}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Text_20_body">Let’s walk through the above code:</text:p>
   <text:list xml:id="list3923812735" text:style-name="L30">
    <text:list-item>
     <text:p text:style-name="P84">We require in the <text:span text:style-name="Source_20_Text">readline</text:span> and <text:span text:style-name="Source_20_Text">fs</text:span> core modules. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P84">We assign to <text:span text:style-name="Source_20_Text">myInterface</text:span> the returned value from invoking <text:span text:style-name="Source_20_Text">readline.createInterface()</text:span> with an object containing our designated <text:span text:style-name="Source_20_Text">input</text:span>. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P84">We set our <text:span text:style-name="Source_20_Text">input</text:span> to <text:span text:style-name="Source_20_Text">fs.createReadStream(&apos;text.txt&apos;)</text:span> which will create a stream from the <text:span text:style-name="Strong_20_Emphasis">text.txt</text:span> file. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P84">Next we assign a listener callback to execute when <text:span text:style-name="Source_20_Text">line</text:span> events are emitted. A <text:span text:style-name="Source_20_Text">&apos;line&apos;</text:span> event will be emitted after each line from the file is read. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P83">Our listener callback will log to the console <text:span text:style-name="Source_20_Text">&apos;The line read: [fileLine]&apos;</text:span>, where <text:span text:style-name="Source_20_Text">[fileLine]</text:span> is the line just read. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Let’s practice making a readable stream. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">You’re going to create a program that reads each item off of a shopping list (located in <text:span text:style-name="Strong_20_Emphasis">shoppingList.txt</text:span>) and prints it to the console. Let’s take it one step at a time.</text:p>
   <text:p text:style-name="Text_20_body">Create a <text:span text:style-name="Source_20_Text">myInterface</text:span> variable. Assign <text:span text:style-name="Source_20_Text">myInterface</text:span> the value returned from invoking <text:soft-page-break/><text:span text:style-name="Source_20_Text">readline.createInterface()</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">You’ll want to invoke <text:span text:style-name="Source_20_Text">readline.createInterface()</text:span> with an object with a key of <text:span text:style-name="Source_20_Text">input</text:span> and a value of <text:span text:style-name="Source_20_Text">fs.createReadStream()</text:span>. Remember that <text:span text:style-name="Source_20_Text">fs.createReadStream()</text:span> expects the file (as a string) from which it should read. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Great work. Let’s create a listener callback function to use in the next step. Name this function <text:span text:style-name="Source_20_Text">printData</text:span>. <text:span text:style-name="Source_20_Text">printData()</text:span> should expect to receive some data (we named our parameter <text:span text:style-name="Source_20_Text">data</text:span>) and it should log that data to the console in the format: <text:span text:style-name="Source_20_Text">Item: [data]</text:span>, where <text:span text:style-name="Source_20_Text">[data]</text:span> is the argument passed into the function. </text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">We’re nearly there! Remember that a <text:span text:style-name="Source_20_Text">&apos;line&apos;</text:span> event will be emitted after each line from the file is read. Let’s assign our <text:span text:style-name="Source_20_Text">printData()</text:span> function to execute whenever a <text:span text:style-name="Source_20_Text">&apos;line&apos;</text:span> event is emitted by using <text:span text:style-name="Source_20_Text">myInterface</text:span>‘s <text:span text:style-name="Source_20_Text">.on()</text:span> method.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Sweet! Let’s run the program in the terminal. Type <text:span text:style-name="Source_20_Text">node app.js</text:span> in the terminal and press <text:span text:style-name="User_20_Entry">enter</text:span>. If everything worked, each item from the shopping list should be printed to the terminal. </text:p>
   <text:p text:style-name="P14">const readline = require(&apos;readline&apos;);</text:p>
   <text:p text:style-name="P14">const fs = require(&apos;fs&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">const myInterface = readline.createInterface(</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>{input: fs.createReadStream(&apos;shoppingList.txt&apos;)}</text:p>
   <text:p text:style-name="P14">);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let printData = (data)=&gt;{</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>console.log(`Item: ${data}`)</text:p>
   <text:p text:style-name="P14">};</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">myInterface.on(&apos;line&apos;, printData);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">Writeable Streams</text:p>
   <text:p text:style-name="Text_20_body">In the previous exercise, we were reading data from a stream, but we can also write to streams! We can create a writeable stream to a file using the <text:span text:style-name="Source_20_Text">fs.createWriteStream()</text:span> method: </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const fs = require(&apos;fs&apos;)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const fileStream = fs.createWriteStream(&apos;output.txt&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">fileStream.write(&apos;This is the first line!&apos;); </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text">fileStream.write(&apos;This is the second line!&apos;);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">fileStream.end();</text:span></text:p>
   <text:p text:style-name="Text_20_body">In the code above, we set the output file as <text:span text:style-name="Strong_20_Emphasis">output.txt</text:span>. Then we <text:span text:style-name="Source_20_Text">.write()</text:span> lines to the file. Unlike a readable stream, which ends when it has no more data to read, a writable stream could remain open indefinitely. We can indicate the end of a writable stream with the <text:span text:style-name="Source_20_Text">.end()</text:span> method. </text:p>
   <text:p text:style-name="Text_20_body">Let’s combine our knowledge of readable and writable streams to create a program which reads from one text file and then writes to another. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">We’re going to create a writeable stream. We want to write to a file named <text:span text:style-name="Strong_20_Emphasis">shoppingResults.txt</text:span>. Create a variable <text:span text:style-name="Source_20_Text">fileStream</text:span> and assign as its value the writable stream. </text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Great work. Let’s create a listener callback function to use in the next step. Name this function <text:span text:style-name="Source_20_Text">transformData</text:span>. <text:span text:style-name="Source_20_Text">transformData</text:span> should expect to receive some data (we named our parameter <text:span text:style-name="Source_20_Text">line</text:span>) and it should <text:span text:style-name="Source_20_Text">write()</text:span> to the writable stream (<text:span text:style-name="Source_20_Text">fileStream</text:span>) in the format <text:span text:style-name="Source_20_Text">They were out of: [line]\n</text:span>, where <text:span text:style-name="Source_20_Text">[line]</text:span> is the argument passed into the function.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">We’re nearly there! Let’s assign our <text:span text:style-name="Source_20_Text">transformData</text:span> function to execute whenever a <text:span text:style-name="Source_20_Text">&apos;line&apos;</text:span> event is emitted on the <text:span text:style-name="Source_20_Text">myInterface</text:span> stream.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Sweet! Let’s run the program in the terminal. Type <text:span text:style-name="Source_20_Text">node app.js</text:span> in the terminal and press <text:span text:style-name="User_20_Entry">enter</text:span>. If everything worked, you should be able to open the <text:span text:style-name="Strong_20_Emphasis">shoppingResults.txt</text:span> file and see that it has the correct contents.</text:p>
   <text:p text:style-name="P14">const readline = require(&apos;readline&apos;);</text:p>
   <text:p text:style-name="P14">const fs = require(&apos;fs&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">const myInterface = readline.createInterface({</text:p>
   <text:p text:style-name="P14"><text:s text:c="2"/>input: fs.createReadStream(&apos;shoppingList.txt&apos;)</text:p>
   <text:p text:style-name="P14">});</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">const fileStream = fs.createWriteStream(&apos;shoppingResults.txt&apos;);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">let transformData = (line) =&gt; {</text:p>
   <text:p text:style-name="P14"><text:soft-page-break/><text:s/>fileStream.write(`They were out of: ${line}\n`); </text:p>
   <text:p text:style-name="P14">};</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14">myInterface.on(&apos;line&apos;, transformData);</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">The Timers Module</text:p>
   <text:p text:style-name="Text_20_body">There are times when we want some of our code to be executed at a specified point in time. This is what the <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/timers.html#timers_class_immediate" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">timers</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/timers.html#timers_class_immediate" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> module</text:a> is used for. Like the <text:span text:style-name="Source_20_Text">Buffer</text:span> module, it is not necessary to use the <text:span text:style-name="Source_20_Text">require()</text:span> import statement as the methods of the <text:span text:style-name="Source_20_Text">timer</text:span> module are global.</text:p>
   <text:p text:style-name="Text_20_body">You may already be familiar with some timer functions such as, <text:span text:style-name="Source_20_Text">setTimeout()</text:span> and <text:span text:style-name="Source_20_Text">setInterval()</text:span>. Timer functions in Node.js behave similarly to how they work in front-end JavaScript programs, but the difference is that they are added to the Node.js <text:a xlink:type="simple" xlink:href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">event loop</text:a>. This means that the timer functions are scheduled and put into a queue. This queue is processed at every iteration of the event loop. If a timer function is executed outside of a module, the behavior will be random (non-deterministic).</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">setImmediate()</text:span> function is often compared with the <text:span text:style-name="Source_20_Text">setTimeout()</text:span> function. When <text:span text:style-name="Source_20_Text">setImmediate()</text:span> is called, it executes the specified callback function after the current (<text:a xlink:type="simple" xlink:href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">poll phase</text:a>) is completed. The method accepts two parameters: the callback function (required) and arguments for the callback function (optional). If you instantiate multiple <text:span text:style-name="Source_20_Text">setImmediate()</text:span> functions, they will be queued for execution in the order that they were created.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">setImmediate(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    console.log(&apos;Hello! My name is Codey.&apos;)</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Use the <text:span text:style-name="Source_20_Text">setImmediate()</text:span> function and pass an empty arrow function as its callback function.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">In the body of the arrow function that was created in the above step, log <text:span text:style-name="Source_20_Text">&apos;I got called right away!&apos;</text:span> to the console.</text:p>
   <text:p text:style-name="Text_20_body">Try running <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> with the <text:span text:style-name="Source_20_Text">node</text:span> command in the terminal!</text:p>
   <text:p text:style-name="P14">setImmediate(() =&gt; {</text:p>
   <text:p text:style-name="P14"><text:s text:c="4"/>console.log(&apos;I got called right away!&apos;)</text:p>
   <text:p text:style-name="P14">});</text:p>
   <text:p text:style-name="P13">Review</text:p>
   <text:p text:style-name="Text_20_body">Congratulations on making it to the end! Let’s take a moment to review the content covered in this lesson:</text:p>
   <text:list xml:id="list650340335" text:style-name="L31">
    <text:list-item>
     <text:p text:style-name="P86">Blocking code runs synchronously and non-blocking code, such as timer functions, runs <text:soft-page-break/>asynchronously. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P86">Core modules are provided to developers to perform common tasks efficiently. Core modules are used by passing a string with the module’s name into the <text:span text:style-name="Source_20_Text">require()</text:span> statement. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P86">We can make our own instances of the <text:span text:style-name="Source_20_Text">EventEmitter</text:span> class, and we can subscribe to listen for named events with the <text:span text:style-name="Source_20_Text">.on()</text:span> method and emit events with the <text:span text:style-name="Source_20_Text">.emit()</text:span> method. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P86">Node allows for both <text:span text:style-name="Emphasis">output</text:span>, data/feedback to a user-provided by a computer, and <text:span text:style-name="Emphasis">input</text:span> data/feedback to the computer provided by the user. To handle errors during asynchronous operations, provided callback functions are expected to have an error as their first parameter. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P86">The <text:span text:style-name="Source_20_Text">buffer</text:span> module provides global <text:span text:style-name="Source_20_Text">Buffer</text:span> objects used to represent a fixed amount of memory that can’t be resized. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P86">The <text:span text:style-name="Source_20_Text">timer</text:span> module provides functions that allow developers to execute callbacks at a specified point of time in the future. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P86">The Node <text:span text:style-name="Source_20_Text">fs</text:span> core module is an API for interacting with the <text:span text:style-name="Strong_20_Emphasis">f</text:span>ile <text:span text:style-name="Strong_20_Emphasis">s</text:span>ystem. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P85"><text:span text:style-name="Emphasis">Streams</text:span> allow us to read or write data piece by piece instead of all at once. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">As an optional challenge, in <text:span text:style-name="Strong_20_Emphasis">app.js</text:span>, use the <text:span text:style-name="Source_20_Text">buffer</text:span> and <text:span text:style-name="Source_20_Text">timer</text:span> modules to create two buffers, join them together, convert them to a string, and log the result to the console after 3 seconds.</text:p>
   <text:p text:style-name="Text_20_body">Remember that you can run <text:span text:style-name="Strong_20_Emphasis">app.js</text:span> with the <text:span text:style-name="Source_20_Text">node</text:span> command in the terminal.</text:p>
   <text:p text:style-name="Text_20_body">In this solution, we use the <text:span text:style-name="Source_20_Text">setTimeout()</text:span> function to run the code that combines two <text:span text:style-name="Source_20_Text">Buffer</text:span> objects that contain strings <text:span text:style-name="Source_20_Text">&apos;Hello&apos;</text:span> and <text:span text:style-name="Source_20_Text">&apos;learner&apos;</text:span>.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">setTimeout(() =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const buffer1 = Buffer.from(&apos;Hello&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const buffer2 = Buffer.from(&apos;learner&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const bufferArray = [buffer1, buffer2];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const bufferConcat = Buffer.concat(bufferArray);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(bufferConcat.toString());</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}, 3000);</text:span></text:p>
   <text:p text:style-name="P14"/>
   <text:h text:style-name="P11" text:outline-level="1">Back-End Web Architecture</text:h>
   <text:p text:style-name="Text_20_body">This article provides an overview of servers, databases, routing, and anything else that happens between when a client makes a request and receives a response.</text:p>
   <text:p text:style-name="Text_20_body">Software engineers seem to always be discussing the front-end and the back-end of their apps. But what exactly does this mean?</text:p>
   <text:p text:style-name="Text_20_body">The front-end is the code that is executed on the client side. This code (typically HTML, CSS, and JavaScript) runs in the user’s browser and creates the user interface.</text:p>
   <text:p text:style-name="Text_20_body">The back-end is the code that runs on the server, that receives requests from the clients, and contains the logic to send the appropriate data back to the client. The back-end also includes the <text:soft-page-break/>database, which will persistently store all of the data for the application. This article focuses on the hardware and software on the server-side that make this possible.</text:p>
   <text:p text:style-name="Text_20_body">Review <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/http-requests" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP</text:a> and <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/what-is-rest" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">REST</text:a> if you want to refresh your memory on these topics. These are the main conventions that provide structure to the request-response cycle between clients and servers.</text:p>
   <text:p text:style-name="Text_20_body">Let’s start by reviewing the client-server relationship, and then we can start to put the pieces all together!</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What are the clients?</text:h>
   <text:p text:style-name="Text_20_body">The clients are anything that send requests to the back-end. They are often browsers that make requests for the HTML and JavaScript code that they will execute to display websites to the end user. However, there are many different kinds of clients: they might be a mobile application, an application running on another server, or even a web enabled smart appliance.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a back-end?</text:h>
   <text:p text:style-name="Text_20_body">The back-end is all of the technology required to process the incoming request and generate and send the response to the client. This typically includes three major parts:</text:p>
   <text:list xml:id="list4091089501" text:style-name="L32">
    <text:list-item>
     <text:p text:style-name="P88">The server. This is the computer that receives requests. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P88">The app. This is the application running on the server that listens for requests, retrieves information from the database, and sends a response. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P87">The database. Databases are used to organize and persist data. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a server?</text:h>
   <text:p text:style-name="Text_20_body">A server is simply a computer that listens for incoming requests. Though there are machines made and optimized for this particular purpose, any computer that is connected to a network can act as a server. In fact, you will often use your very own computer as server when developing apps.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What are the core functions of the app?</text:h>
   <text:p text:style-name="Text_20_body">The server runs an app that contains logic about how to respond to various requests based on the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP verb</text:a> and the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Glossary/URI" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Uniform Resource Identifier (URI)</text:a>. The pair of an HTTP verb and a URI is called a <text:span text:style-name="Emphasis">route</text:span> and matching them based on a request is called <text:span text:style-name="Emphasis">routing</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Some of these handler functions will be <text:span text:style-name="Emphasis">middleware</text:span>. In this context, middleware is any code that executes between the server receiving a request and sending a response. These middleware functions might modify the request object, query the database, or otherwise process the incoming request. Middleware functions typically end by passing control to the next middleware function, rather than by sending a response.</text:p>
   <text:p text:style-name="Text_20_body">Eventually, a middleware function will be called that ends the request-response cycle by sending an HTTP response back to the client.</text:p>
   <text:p text:style-name="Text_20_body">Often, programmers will use a framework like Express or Ruby on Rails to simplify the logic of routing. For now, just think that each route can have one or many handler functions that are executed whenever a request to that route (HTTP verb and URI) is matched.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:soft-page-break/>What kinds of responses can a server send?</text:h>
   <text:p text:style-name="Text_20_body">The data that the server sends back can come in different forms. For example, a server might serve up an HTML file, send data as JSON, or it might send back only an <text:a xlink:type="simple" xlink:href="http://www.restapitutorial.com/httpstatuscodes.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP status code</text:a>. You’ve probably seen the status code “404 - Not Found” whenever you’ve tried navigating to a URI that doesn’t exist, but there are many more status codes that indicate what happened when the server received the request.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a database, and why do we need to use them?</text:h>
   <text:p text:style-name="Text_20_body">Databases are commonly used on the back-end of web applications. These databases provide an interface to save data in a persistent way to memory. Storing the data in a database both reduces the load on the main memory of the server CPU and allows the data to be retrieved if the server crashes or loses power.</text:p>
   <text:p text:style-name="Text_20_body">Many requests sent to the server might require a database query. A client might request information that is stored in the database, or a client might submit data with their request to be added to the database.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">What is a Web API, really?</text:h>
   <text:p text:style-name="Text_20_body">An API is a collection of clearly defined methods of communication between different software components.</text:p>
   <text:p text:style-name="Text_20_body">More specifically, a <text:span text:style-name="Emphasis">Web API</text:span> is the interface created by the back-end: the collection of endpoints and the resources these endpoints expose.</text:p>
   <text:p text:style-name="Text_20_body">A Web API is defined by the types of requests that it can handle, which is determined by the routes that it defines, and the types of responses that the clients can expect to receive after hitting those routes.</text:p>
   <text:p text:style-name="Text_20_body">One Web API can be used to provide data for different front-ends. Since a Web API can provide data without really specifying how the data is viewed, multiple different HTML pages or mobile applications can be created to view the data from the Web API.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">Other principles of the request-response cycle:</text:h>
   <text:list xml:id="list2723269802" text:style-name="L33">
    <text:list-item>
     <text:p text:style-name="P90">The server typically cannot initiate responses without requests! </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P90">Every request needs a response, even if it’s just a 404 status code indicating that the content was not found. Otherwise your client will be left <text:span text:style-name="Emphasis">hanging</text:span> (indefinitely waiting). </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P89">The server should not send more than one response per request. This will throw errors in your code. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">Mapping out a request</text:h>
   <text:p text:style-name="Text_20_body">Let’s make all of this a bit more concrete, by following an example of the main steps that happen when a client makes a request to the server.</text:p>
   <text:p text:style-name="Text_20_body">1. Alice is shopping on SuperCoolShop.com. She clicks on a picture of a cover for her smartphone, and that click event makes a GET request to <text:soft-page-break/><text:span text:style-name="Source_20_Text">http://www.SuperCoolShop.com/products/66432</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Remember, GET describes the kind of request (the client is just asking for data, not changing anything). The URI (uniform resource identifier) <text:span text:style-name="Source_20_Text">/products/66432</text:span> specifies that the client is looking for more information about a product, and that product, has an id of 66432.</text:p>
   <text:p text:style-name="Text_20_body">SuperCoolShop has an huge number of products, and many different categories for filtering through them, so the actual URI would be more complicated than this. But this is the general principle for how requests and resource identifiers work.</text:p>
   <text:p text:style-name="Text_20_body">2. Alice’s request travels across the internet to one of SuperCoolShop’s servers. This is one of the slower steps in the process, because the request cannot go faster than the speed of light, and it might have a long distance to travel. For this reason, major websites with users all over the world will have many different servers, and they will direct users to the server that is closest to them!</text:p>
   <text:p text:style-name="Text_20_body">3. The server, which is actively listening for requests from all users, receives Alice’s request!</text:p>
   <text:p text:style-name="Text_20_body">4. Event listeners that match this request (the HTTP verb: GET, and the URI: <text:span text:style-name="Source_20_Text">/products/66432</text:span>) are triggered. The code that runs on the server between the request and the response is called <text:span text:style-name="Emphasis">middleware</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">5. In processing the request, the server code makes a database query to get more information about this smartphone case. The database contains all of the other information that Alice wants to know about this smartphone case: the name of the product, the price of the product, a few product reviews, and a string that will provide a path to the image of the product.</text:p>
   <text:p text:style-name="Text_20_body">6. The database query is executed, and the database sends the requested data back to the server. It’s worth noting that database queries are one of the slower steps in this process. Reading and writing from static memory is fairly slow, and the database might be on a different machine than the original server. This query itself might have to go across the internet!</text:p>
   <text:p text:style-name="Text_20_body">7. The server receives the data that it needs from the database, and it is now ready to construct and send its response back to the client. This response body has all of the information needed by the browser to show Alice more details (price, reviews, size, etc) about the phone case she’s interested in. The response header will contain an HTTP status code 200 to indicate that the request has succeeded.</text:p>
   <text:p text:style-name="Text_20_body">8. The response travels across the internet, back to Alice’s computer.</text:p>
   <text:p text:style-name="Text_20_body">9. Alice’s browser receives the response and uses that information to create and render the view that Alice ultimately sees!</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"><text:soft-page-break/></text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P13">Setting up a Server with HTTP</text:p>
   <text:p text:style-name="P3">Introduction to HTTP</text:p>
   <text:p text:style-name="Text_20_body">Today is like any other normal day—you visit your favorite website to check out some new content or accomplish a task. The information appears on your page instantly, as if by magic. But have you ever wondered where that data came from and how it got there? <text:span text:style-name="Emphasis">How</text:span> did the website know what data to load for you? <text:span text:style-name="Emphasis">Who</text:span> did it ask for that data? Or, more importantly, <text:span text:style-name="Emphasis">how</text:span> did it ask for that data? These are all questions that slip through the cracks when we browse websites, but looking under the hood reveals a complex messaging system that is extremely interesting. This system, in part, is known as <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Emphasis">HTTP</text:span></text:a>.</text:p>
   <text:p text:style-name="Text_20_body">HTTP, short for Hypertext Transfer Protocol, is a request-response protocol that serves as the foundation of data exchange and communication within the client-server computing model. What this means in simpler terms is that HTTP helps facilitate the exchange of information between a client (i.e. website, mobile app, etc.) and a server.</text:p>
   <text:p text:style-name="Text_20_body">At a base level, the operation of HTTP can be explained quite simply in the following steps detailing the request-response paradigm between a client and a server:</text:p>
   <text:p text:style-name="Text_20_body">1) The client submits an HTTP <text:span text:style-name="Emphasis">request</text:span> message to the server. 2) The server receives the HTTP request, performs some functions on behalf of the client according to the request. 3) The server returns a <text:span text:style-name="Emphasis">response</text:span> message to the client containing important information about the processing of the request.</text:p>
   <text:p text:style-name="Text_20_body">These three steps serve as the basis of communication via HTTP, enabling us to build and use complex web-based systems that are commonplace on the Internet today.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">Go to your favorite website and open <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/use-devtools" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the developer console</text:a>. Open the “Network” tab and refresh the page. Browse through the HTTP requests that go into building the web page. Try to define some of the common types of data that are transported via HTTP for this page.</text:p>
   <text:p text:style-name="Text_20_body"><text:line-break/>There can be quite a lot of HTTP requests involved in building a webpage. A visit to <text:a xlink:type="simple" xlink:href="https://codecademy.com/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Codecademy</text:a> reveals a few common types of data that you may find loaded on other websites. These include: </text:p>
   <text:list xml:id="list2826767091" text:style-name="L34">
    <text:list-item>
     <text:p text:style-name="P92">Images (PNG, JPG, GIF, etc.) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P92">Web files (HTML, CSS, JavaScript) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P91">Data (<text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">XHR requests</text:a>) </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P13">Setting up a Server with HTTP</text:p>
   <text:p text:style-name="P3">The Structure of HTTP</text:p>
   <text:p text:style-name="Text_20_body">HTTP requests and responses have specific structures to help facilitate the exchange of information <text:soft-page-break/>between a client and a server. These structures encapsulate all of the important information required to instruct the recipient of the message on how to react.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-requests"/>Requests</text:h>
   <text:p text:style-name="Text_20_body">Requests are comprised of a few core elements that provide information to a server. The core elements that can be expected are:</text:p>
   <text:p text:style-name="Text_20_body">1) <text:span text:style-name="Strong_20_Emphasis">HTTP Method</text:span>: The HTTP method is usually a verb, such as <text:span text:style-name="Source_20_Text">GET</text:span> and <text:span text:style-name="Source_20_Text">POST</text:span>, or a noun such as <text:span text:style-name="Source_20_Text">OPTIONS</text:span> and <text:span text:style-name="Source_20_Text">HEAD</text:span>. These methods inform the server of the intent of the request and are used in accurately routing and processing requests. For instance, an HTTP request containing a <text:span text:style-name="Source_20_Text">GET</text:span> method implies that the client wants to fetch a resource. The list of supported HTTP methods can be found using the <text:span text:style-name="Source_20_Text">http.METHODS</text:span> property.</text:p>
   <text:p text:style-name="Text_20_body">2) <text:span text:style-name="Strong_20_Emphasis">Path</text:span>: The path denotes the path of the resource relative to the root URL. For example, making a <text:span text:style-name="Source_20_Text">GET</text:span> request to <text:span text:style-name="Source_20_Text">https://codecademy.com/api/lessons</text:span> would strip common elements such as the protocol (<text:span text:style-name="Source_20_Text">https://</text:span>) and domain (<text:span text:style-name="Source_20_Text">codecademy.com</text:span>), leaving the path of <text:span text:style-name="Source_20_Text">/api/lessons</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">3) <text:span text:style-name="Strong_20_Emphasis">HTTP Protocol Version</text:span>: The version of the HTTP protocol (I.e. <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP/1.1</text:a>, <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/HTTP/2" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP/2</text:a>, and <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/HTTP/3" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP/3</text:a>). We will learn more about this in the next exercise.</text:p>
   <text:p text:style-name="Text_20_body">4) <text:span text:style-name="Strong_20_Emphasis">Headers</text:span>: Headers are optional and are used to convey additional information that may be important in processing a request by a server. There is an extensive list of <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">standard headers</text:a> that can be used, as well as custom headers that can be added on a per-application basis.</text:p>
   <text:p text:style-name="Text_20_body">5) <text:span text:style-name="Strong_20_Emphasis">Body</text:span>: The body contains data required to be sent to the server to process a request. The body is not leveraged for all request types. It is most common to see a body attached to requests with verbs such as <text:span text:style-name="Source_20_Text">POST</text:span>, <text:span text:style-name="Source_20_Text">PUT</text:span>, and <text:span text:style-name="Source_20_Text">PATCH</text:span>.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-responses"/>Responses</text:h>
   <text:p text:style-name="Text_20_body">Responses are comprised of similar elements to their counterpart requests, with a few differences. The core elements that can be expected in a response are:</text:p>
   <text:p text:style-name="Text_20_body">1) <text:span text:style-name="Strong_20_Emphasis">HTTP Protocol Version</text:span>: The version of the HTTP protocol, similar to the request.</text:p>
   <text:p text:style-name="Text_20_body">2) <text:span text:style-name="Strong_20_Emphasis">Status Code</text:span>: The status code indicates if the request was successful and, if not, why it wasn’t successful.</text:p>
   <text:p text:style-name="Text_20_body">3) <text:span text:style-name="Strong_20_Emphasis">Status Message</text:span>: The status message provides a short description of the corresponding status code.</text:p>
   <text:p text:style-name="Text_20_body">4) <text:span text:style-name="Strong_20_Emphasis">Headers</text:span>: These response headers are similar to those provided in a request.</text:p>
   <text:p text:style-name="Text_20_body">5) <text:span text:style-name="Strong_20_Emphasis">Body</text:span>: The body of a response contains data corresponding to the fetched resource. The body is optional and contains data only when necessary to fulfill the request.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">Visit the same website you visited in the previous exercise. Open the “Network” tab in the developer console once again, but this time further inspect the details of a few of the requests. Try to identify the core parts of their message structure for both the request and corresponding response. <text:soft-page-break/>Make sure to inspect a few different types of requests if possible to see the differences (i.e. <text:span text:style-name="Source_20_Text">GET</text:span>, <text:span text:style-name="Source_20_Text">POST</text:span>, etc.).</text:p>
   <text:p text:style-name="Text_20_body"><text:line-break/>You can further inspect the details of a request by clicking on it from the list of requests in the network tab and viewing the corresponding data in the pane to the right. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">The Movement of HTTP</text:p>
   <text:p text:style-name="Text_20_body">HTTP requests/responses contain all of the information needed to communicate with other entities on the web efficiently, but how do these messages actually make it to their destinations? Just as a letter requires a carrier to arrive at its destination, so too does an HTTP request. The carrier, in this case, comes in the form of transport protocols.</text:p>
   <text:p text:style-name="Text_20_body">Various transport protocols exist, but let’s take a look at the common ones that HTTP leverages to move around the web. </text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-tcp"/>TCP</text:h>
   <text:p text:style-name="Text_20_body">The most common transport protocol used in conjunction with HTTP is <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Glossary/TCP" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">TCP</text:a>. TCP stands for <text:span text:style-name="Emphasis">Transmission Control Protocol</text:span> and allows two hosts to connect and exchange data streams, guaranteeing the delivery of data packets in the same order as they were sent. This means that TCP ensures that packets are delivered reliably and free from errors, positioning itself as an incredibly stable way to move data from one location to another.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-udp"/>UDP</text:h>
   <text:p text:style-name="Text_20_body"><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Glossary/UDP" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">UDP</text:a>, or <text:span text:style-name="Emphasis">User Datagram Protocol</text:span>, is a less commonly used transport protocol. It operates using a connectionless communication model, requiring no “handshaking,” which can potentially lead to unreliability in the delivery of messages. As such, UDP has no mechanism by which to guarantee delivery or ordering of messages. While these are certainly drawbacks for some types of applications, other applications that want to prioritize transmission speed and efficiency over security and reliability may leverage UDP.</text:p>
   <text:p text:style-name="Text_20_body">While these transport protocols are great for moving your requests to their destination, they lack any meaningful security to protect the data while in transit. In order to remedy this issue, encryption protocols are commonly used.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-tls"/>TLS</text:h>
   <text:p text:style-name="Text_20_body"><text:a xlink:type="simple" xlink:href="https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">TLS</text:a>, also known as <text:span text:style-name="Emphasis">Transport Layer Security</text:span>, is a widely adopted security protocol designed to facilitate secure data transmission via encryption. TLS evolved out of the encryption protocol known as <text:a xlink:type="simple" xlink:href="https://www.cloudflare.com/learning/ssl/what-is-ssl/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">SSL</text:a> (Secure Sockets Layer), which has since been deprecated in favor of TLS. While these two protocols are different, the terms are sometimes used interchangeably. Using TLS with HTTP will allow you to use <text:span text:style-name="Source_20_Text">HTTPS</text:span> (<text:span text:style-name="Emphasis">Hypertext Transfer Protocol Secure</text:span>), which helps denote the presence of the extra security.</text:p>
   <text:p text:style-name="Text_20_body">In conjunction with the different transport protocols mentioned above, there also exist different versions of HTTP. These distinct versions at a baseline operate similarly in that they carry information between entities and maintain important distinctions.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-http11"/><text:soft-page-break/>HTTP/1.1</text:h>
   <text:p text:style-name="Text_20_body"><text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP/1.1</text:a> was one of the first versions of the HTTP protocol to be designed and implemented. It operates by sending messages in the form of text. HTTP/1.1 is commonly used over TCP and is the slowest of the HTTP versions regarding data transmission.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-http2"/>HTTP/2</text:h>
   <text:p text:style-name="Text_20_body"><text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/HTTP/2" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP/2</text:a> is a major revision of HTTP/1.1, developed with the intent to try and reduce web page load latency. However, the most significant departure from HTTP/1.1 is the encapsulation of all messages in binary format rather than plain text. This allows HTTP/2 to apply different techniques for data transmission, including sending smaller packets of data for greater flexibility of data transfer. This also allows a single connection to be made between two communicating entities rather than multiple as required by HTTP/1.1. Similar to HTTP/1.1, HTTP/2 also leverages TCP for transport.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-http3"/>HTTP/3</text:h>
   <text:p text:style-name="Text_20_body"><text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/HTTP/3" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP/3</text:a> is the third major version of HTTP. While there are quite a few complex technological differences between HTTP/3 and the previous versions, one of the most important is how the protocol deals with lost packets. HTTP/3 also differs through its use of transport protocol, leveraging a transport protocol called <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/QUIC" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">QUIC</text:a>, which applies specific controls over UDP. HTTP/3 is currently an <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Internet_Draft" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Internet Draft</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">No matter which of these versions of HTTP are used over which transport protocol, the outcome is the same—the transmission of information in the form of a request and the reply to that request in the form of a response.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">Consider the diagram detailing the TCP and UDP transport protocols. What are some use cases that each transport protocol might be used for?</text:p>
   <text:p text:style-name="Text_20_body">UDP really shines when information needs to get somewhere very quickly. As such, one potential use case for UDP could be in video streaming. <text:line-break/>On the other hand, TCP finds its niche in the reliable transport of information that doesn’t really care about transmission time. As such, one use case of TCP is in delivering simple text information to a blogging website.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">The HTTP Module</text:p>
   <text:p text:style-name="Text_20_body">To process HTTP requests in JavaScript and Node.js, we can use the built-in <text:a xlink:type="simple" xlink:href="https://nodejs.dev/learn/the-nodejs-http-module" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">http</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.dev/learn/the-nodejs-http-module" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> module</text:a>. This core module is key in leveraging Node.js networking and is extremely useful in creating HTTP servers and processing HTTP requests.</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">http</text:span> module comes with various methods that are useful when engaging with HTTP network requests. One of the most commonly used methods within the <text:span text:style-name="Source_20_Text">http</text:span> module is the <text:span text:style-name="Source_20_Text">.createServer()</text:span> method. This method is responsible for doing exactly what its namesake <text:soft-page-break/>implies; it creates an HTTP server. To implement this method to create a server, the following code can be used:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const server = http.createServer((req, res) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  res.end(&apos;Server is running!&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">});</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">server.listen(8080, () =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const { address, port } = server.address();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  console.log(`Server is listening on: http://${address}:${port}`);</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">.createServer()</text:span> method takes a single argument in the form of a callback function. This callback function has two primary arguments; the request (commonly written as <text:span text:style-name="Source_20_Text">req</text:span>) and the response (commonly written as <text:span text:style-name="Source_20_Text">res</text:span>).</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">req</text:span> object contains all of the information about an HTTP request ingested by the server. It exposes information such as the HTTP method (<text:span text:style-name="Source_20_Text">GET</text:span>, <text:span text:style-name="Source_20_Text">POST</text:span>, etc.), the pathname, headers, body, and so on. The <text:span text:style-name="Source_20_Text">res</text:span> object contains methods and properties pertaining to the generation of a response by the HTTP server. This object contains methods such as <text:span text:style-name="Source_20_Text">.setHeader()</text:span> (sets HTTP headers on the response), <text:span text:style-name="Source_20_Text">.statusCode</text:span> (set the status code of the response), and <text:span text:style-name="Source_20_Text">.end()</text:span> (dispatches the response to the client who made the request). In the example above, we use the <text:span text:style-name="Source_20_Text">.end()</text:span> method to send the string ‘Server is Running!’ to the client, which will display on the web page.</text:p>
   <text:p text:style-name="Text_20_body">Once the <text:span text:style-name="Source_20_Text">.createServer()</text:span> method has instantiated the server, it must begin listening for connections. This final step is accomplished by the <text:span text:style-name="Source_20_Text">.listen()</text:span> method on the server instance. This method takes a <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Port_(computer_networking)" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">port</text:a> number as the first argument, which tells the server to listen for connections at the given port number. In our example above, the server has been set to listen on port <text:span text:style-name="Source_20_Text">8080</text:span>. Additionally, the <text:span text:style-name="Source_20_Text">.listen()</text:span> method takes an optional callback function as a second argument, allowing it to carry out a task after the server has successfully started.</text:p>
   <text:p text:style-name="Text_20_body">Using this simple <text:span text:style-name="Source_20_Text">.createServer()</text:span> method, in conjunction with the callback, provides the ability to process HTTP requests dynamically and dispatch responses back to their callers.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Import the <text:span text:style-name="Source_20_Text">http</text:span> module using <text:span text:style-name="Source_20_Text">require()</text:span>. Save the module as a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">http</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Create a simple server using the <text:span text:style-name="Source_20_Text">.createServer()</text:span> method and assign it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">server</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">Using the <text:span text:style-name="Source_20_Text">server</text:span> object, make your newly created server listen on port <text:span text:style-name="Source_20_Text">4001</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Inside the callback function of the <text:span text:style-name="Source_20_Text">.createServer()</text:span> method, have the server return a response of <text:span text:style-name="Source_20_Text">&apos;Hello World&apos;</text:span> using the <text:span text:style-name="Source_20_Text">.end()</text:span> method.</text:p>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>const server = http.createServer((req, res) =&gt;{</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>res.end(&quot;Hello World&quot;);</text:p>
   <text:p text:style-name="Text_20_body">})</text:p>
   <text:p text:style-name="Text_20_body">server.listen(4001, ()=&gt;{</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const {adress, port} = sevrer.adress(),</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>console.log(`Server is listening on: http://${address}:${port}`);</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">The Anatomy of the URL</text:p>
   <text:p text:style-name="Text_20_body">HTTP servers have to break down requests into their constituent parts to effectively process them and provide adequate responses. In that same vein, designing an <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/API" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">API</text:a> (Application Programming Interface) with endpoints intended to process specific requests in certain ways requires an understanding of the semantics of these requests, which are ultimately embodied within a <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/URL" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">URL</text:a> (Uniform Resource Locator).</text:p>
   <text:p text:style-name="Text_20_body">A URL can provide a great deal of information about a request and how it is expected to behave. The image below provides a breakdown of the different parts of a URL and their meanings. A URL is made up of the following parts:</text:p>
   <text:p text:style-name="Text_20_body"><draw:frame draw:style-name="fr1" draw:name="Bild6" text:anchor-type="as-char" svg:width="2cm" svg:height="1cm" draw:z-index="5"><draw:image xlink:href="https://static-assets.codecademy.com/Courses/Learn-Node/http/url-dark.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Anatomy of a URL</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="Text_20_body">1) <text:span text:style-name="Strong_20_Emphasis">Protocol</text:span>: The protocol of the URL denotes what protocol is being used for this particular resource. For instance, a URL could have a protocol of HTTP or HTTPS.</text:p>
   <text:p text:style-name="Text_20_body">2) <text:span text:style-name="Strong_20_Emphasis">Domain</text:span>: The domain of the URL is a unique reference that identifies a website on the Internet.</text:p>
   <text:p text:style-name="Text_20_body">3) <text:span text:style-name="Strong_20_Emphasis">Path</text:span>: The path refers to a file or directory on the web server. Paths oftentimes contain path parameters that APIs can process as a way to provide additional data when processing. For instance, to request a resource for a user with ID number <text:span text:style-name="Source_20_Text">15</text:span>, we can add the user’s ID to the URL like this: <text:span text:style-name="Source_20_Text">/users/15</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">4) <text:span text:style-name="Strong_20_Emphasis">Query</text:span>: The query is commonly found on pages that contain dynamic content. Queries are prefixed by a <text:span text:style-name="Source_20_Text">?</text:span> and appear at the end of a URL. Queries can be comprised of multiple key/value pairs, separated by a <text:span text:style-name="Source_20_Text">&amp;</text:span>, with each key being assigned its corresponding value using a <text:span text:style-name="Source_20_Text">=</text:span>. Queries are often used in conjunction with <text:span text:style-name="Source_20_Text">GET</text:span> requests to pass filter parameters in order to provide specificity for the requested resource. For instance, to request all users that are active members, we could append a key/value pair of <text:span text:style-name="Source_20_Text">active=true</text:span> to the end of our URL like this: <text:span text:style-name="Source_20_Text">/users?active=true</text:span>.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">url</text:span> variable points to an API resource to load a user record. Add a path parameter to the value <text:soft-page-break/>of the <text:span text:style-name="Source_20_Text">url</text:span> variable to load the profile data for the user with an ID of <text:span text:style-name="Source_20_Text">25</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Let’s load some of the user’s projects. Add <text:span text:style-name="Source_20_Text">/projects</text:span> to the end of the URL from the above step. Then, add a query for the below two key/value pairs to the URL.</text:p>
   <text:list xml:id="list1272245569" text:style-name="L35">
    <text:list-item>
     <text:p text:style-name="P94"><text:span text:style-name="Source_20_Text">type</text:span> key with the value of <text:span text:style-name="Source_20_Text">personal</text:span> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P93"><text:span text:style-name="Source_20_Text">month</text:span> key with the value of <text:span text:style-name="Source_20_Text">january</text:span> </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const url = &apos;http://example.com/users/25/projects?type=personal&amp;month=january&apos;;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Make a GET request with the URL and process the response.</text:p>
   <text:p text:style-name="Text_20_body">http.get(url, (res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>let data = &apos;&apos;;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>res.on(&apos;data&apos;, (chunk) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>data += chunk;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>});</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>res.on(&apos;end&apos;, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>console.log(data);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>});</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">The URL Module</text:p>
   <text:p text:style-name="Text_20_body">Typically, an HTTP server will require information from the request URL to accurately process a request. This request URL is located on the <text:span text:style-name="Source_20_Text">url</text:span> property contained within the <text:span text:style-name="Source_20_Text">req</text:span> object itself. To parse the different parts of this URL easily, Node.js provides the built-in <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/url.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">url</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/url.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> module</text:a>. The core of the <text:span text:style-name="Source_20_Text">url</text:span> module revolves around the <text:span text:style-name="Source_20_Text">URL</text:span> class. A new <text:span text:style-name="Source_20_Text">URL</text:span> object can be instantiated using the <text:span text:style-name="Source_20_Text">URL</text:span> class as follows:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">const url = new URL(&apos;https://www.example.com/p/a/t/h?query=string&apos;);</text:span></text:p>
   <text:p text:style-name="Text_20_body">Once instantiated, different parts of the URL can be accessed and modified via various properties, which include:</text:p>
   <text:list xml:id="list1666497381" text:style-name="L36">
    <text:list-item>
     <text:p text:style-name="P96"><text:span text:style-name="Source_20_Text">hostname</text:span>: Gets and sets the host name portion of the URL. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P96"><text:soft-page-break/><text:span text:style-name="Source_20_Text">pathname</text:span>: Gets and sets the path portion of the URL. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P95"><text:span text:style-name="Source_20_Text">searchParams</text:span>: Gets the search parameter object representing the query parameters contained within the URL. Returns an instance of the <text:a xlink:type="simple" xlink:href="https://nodejs.org/docs/latest-v14.x/api/url.html#url_class_urlsearchparams" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">URLSearchParams</text:a> class. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">You might recognize the <text:span text:style-name="Source_20_Text">URL</text:span> and <text:span text:style-name="Source_20_Text">URLSearchParams</text:span> classes if you are familiar with browser-based JavaScript. It’s because they are actually the same thing! These classes are defined by the <text:a xlink:type="simple" xlink:href="https://url.spec.whatwg.org/" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">WHATWG URL specification</text:a>. Both the browser and Node.js implement this API, which means developers can have a similar developer experience working with both client and server-side JavaScript.</text:p>
   <text:p text:style-name="Text_20_body">Using these properties, one can break the URL down into easily usable parts for processing the request.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const host = url.hostname; // example.com</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const pathname = url.pathname; // /p/a/t/h</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">const searchParams = url.searchParams; // {query: &apos;string&apos;}</text:span></text:p>
   <text:p text:style-name="Text_20_body">While the <text:span text:style-name="Source_20_Text">url</text:span> module can be used to deconstruct a URL into its constituent parts, it can also be used to construct a URL. Constructing a URL via this method relies on most of the same properties listed above to set values on the URL instead of retrieving them. This can be done by setting each of these values equal to a value for the newly constructed URL. Once all parts of the URL have been added, the composed URL can be obtained using the <text:span text:style-name="Source_20_Text">.toString()</text:span> method.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const createdUrl = new URL(&apos;https://www.example.com&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">createdUrl.pathname = &apos;/p/a/t/h&apos;;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">createdUrl.search = &apos;?query=string&apos;;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">createUrl.toString(); // Creates https://www.example.com/p/a/t/h?query=string</text:span></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">First, let’s import the <text:span text:style-name="Source_20_Text">url</text:span> module using <text:span text:style-name="Source_20_Text">require()</text:span> and save it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">url</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Create a new instance of a <text:span text:style-name="Source_20_Text">URL</text:span> object using the <text:span text:style-name="Source_20_Text">URL_TO_PARSE</text:span> variable and assign it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">myUrl</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Extract the hostname from <text:span text:style-name="Source_20_Text">myUrl</text:span> and assign it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">hostname</text:span>.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Next, extract the path from <text:span text:style-name="Source_20_Text">myUrl</text:span> and assign it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">pathname</text:span>.</text:p>
   <text:p text:style-name="P17">5.</text:p>
   <text:p text:style-name="Text_20_body">Finally, extract the query parameters from <text:span text:style-name="Source_20_Text">myUrl</text:span> and assign it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">searchParams</text:span>.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const url = require(&apos;url&apos;);</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/></text:p>
   <text:p text:style-name="Text_20_body">const URL_TO_PARSE = &apos;https://www.example.com/p/a/t/h?prop1=value1&amp;prop2=value2&apos;;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const myUrl = new URL(URL_TO_PARSE);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const hostname = myUrl.hostname;</text:p>
   <text:p text:style-name="Text_20_body">const pathname = myUrl.pathname;</text:p>
   <text:p text:style-name="Text_20_body">const searchParams = myUrl.searchParams;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">The Querystring Module</text:p>
   <text:p text:style-name="Text_20_body">While the <text:span text:style-name="Source_20_Text">url</text:span> module can handle query strings attached to URLs, it can also be done with the built-in <text:a xlink:type="simple" xlink:href="https://nodejs.org/api/querystring.html#querystring_querystring_decode" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">querystring</text:span></text:a><text:a xlink:type="simple" xlink:href="https://nodejs.org/api/querystring.html#querystring_querystring_decode" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> module</text:a>. The <text:span text:style-name="Source_20_Text">querystring</text:span> module is dedicated to providing utilities solely focused on parsing and formatting URL query strings. As such, the module provides a much smaller number of methods to use. The core methods are listed below:</text:p>
   <text:list xml:id="list15189994" text:style-name="L37">
    <text:list-item>
     <text:p text:style-name="P97"><text:span text:style-name="Source_20_Text">.parse()</text:span>: This method is used for parsing a URL query string into a collection of key-value pairs. The <text:span text:style-name="Source_20_Text">.decode()</text:span> method does the same.</text:p>
     <text:p text:style-name="P22"><text:span text:style-name="Source_20_Text">const str = &apos;prop1=value1&amp;prop2=value2&apos;;</text:span></text:p>
     <text:p text:style-name="P23"><text:span text:style-name="Source_20_Text">querystring.parse(str); // Returns { prop1: value1, prop2: value2}</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P97"><text:span text:style-name="Source_20_Text">.stringify()</text:span>: This method is used for producing a URL query string from a given object via iteration of the object’s “own properties.” The <text:span text:style-name="Source_20_Text">.encode()</text:span> method does the same.</text:p>
     <text:p text:style-name="P22"><text:span text:style-name="Source_20_Text">const props = { &quot;prop1&quot;: value1, &quot;prop2&quot;: value2};</text:span></text:p>
     <text:p text:style-name="P23"><text:span text:style-name="Source_20_Text">querystring.stringify(props); // Returns &apos;prop1=value1&amp;prop2=value2&apos;</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P98"><text:span text:style-name="Source_20_Text">.escape()</text:span>: This method is used for performing <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">percent-encoding</text:a> on a given query string. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P97"><text:span text:style-name="Source_20_Text">.unescape()</text:span>: This method is used to decode percent-encoded characters within a given query string. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">querystring</text:span> module is focused solely on manipulating URL query strings, so it requires the query string to have already been isolated from an incoming URL as part of a request. This means that some pre-processing of the URL is necessary before being able to use the module.</text:p>
   <text:p text:style-name="Text_20_body">Additionally, it is worth noting that in the latest versions of Node (v16.x) the <text:span text:style-name="Source_20_Text">querystring</text:span> module has become a legacy feature, with its core functionality having been absorbed into the <text:span text:style-name="Source_20_Text">url</text:span> module via the <text:span text:style-name="Source_20_Text">URLSearchParams</text:span> API. However, the features in the <text:span text:style-name="Source_20_Text">querystring</text:span> module are still handy when using the long-term support versions of Node.js (v14.x).</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Import the <text:span text:style-name="Source_20_Text">querystring</text:span> module using <text:span text:style-name="Source_20_Text">require()</text:span> and save it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">querystring</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Isolate the query string from the <text:span text:style-name="Source_20_Text">url</text:span> variable using <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the </text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">.split()</text:span></text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> method</text:a>. Assign the resulting query string to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">queryToParse</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Next, parse the isolated query string into an object of key/value pairs, assigning it to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">parsedQuery</text:span>.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Let’s add an extra property to the <text:span text:style-name="Source_20_Text">parsedQuery</text:span> object called <text:span text:style-name="Source_20_Text">exercise</text:span>, assigning it a value of <text:span text:style-name="Source_20_Text">&apos;querystring&apos;</text:span>. </text:p>
   <text:p text:style-name="Text_20_body">Then, convert the <text:span text:style-name="Source_20_Text">parsedQuery</text:span> object back into an encoded query string, assigning the value to a <text:span text:style-name="Source_20_Text">const</text:span> variable named <text:span text:style-name="Source_20_Text">modifiedQueryString</text:span>.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const querystring = require(&apos;querystring&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const url = &apos;https://www.example.com/p/a/t/h?course=node&amp;lesson=http&apos;;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Isolate query string from url</text:p>
   <text:p text:style-name="Text_20_body">const queryToParse = url.split(&apos;?&apos;)[1];</text:p>
   <text:p text:style-name="Text_20_body">console.log(queryToParse)</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Parse query string into object, then add new property</text:p>
   <text:p text:style-name="Text_20_body">const parsedQuery = querystring.parse(queryToParse);</text:p>
   <text:p text:style-name="Text_20_body">parsedQuery.exercise = &apos;querystring&apos;;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Rebuild query string from object</text:p>
   <text:p text:style-name="Text_20_body">const modifiedQueryString = querystring.stringify(parsedQuery);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">Routing</text:p>
   <text:p text:style-name="Text_20_body">To process and respond to requests appropriately, servers need to do more than look at a request and dispatch a response. Internally, a server needs to maintain a way to handle each request based on specific criteria such as <text:span text:style-name="Source_20_Text">method</text:span>, <text:span text:style-name="Source_20_Text">pathname</text:span>, etc. The process of handling requests in specific <text:soft-page-break/>ways based on the information provided within the request is known as <text:span text:style-name="Emphasis">routing</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">method</text:span> is one important piece of information that can be used to route requests. Since each HTTP request contains a <text:span text:style-name="Source_20_Text">method</text:span> such as <text:span text:style-name="Source_20_Text">GET</text:span> and <text:span text:style-name="Source_20_Text">POST</text:span>, it is a great way to discern different classes of requests based on the action intended for the server to carry out. Thus, all <text:span text:style-name="Source_20_Text">GET</text:span> requests could be routed to a specific function for handling, while all <text:span text:style-name="Source_20_Text">POST</text:span> requests are routed to another function to be handled. This also allows for the logical co-location of processing code with the specific verb to be handled.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const server = http.createServer((req, res) =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const { method } = req;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  switch(method) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    case &apos;GET&apos;:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      return handleGetRequest(req, res);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    case &apos;POST&apos;:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      return handlePostRequest(req, res);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    case &apos;DELETE&apos;:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      return handleDeleteRequest(req, res);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    case &apos;PUT&apos;:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      return handlePutRequest(req, res);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    default:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">      throw new Error(`Unsupported request method: ${method}`);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">In the above example, the HTTP <text:span text:style-name="Source_20_Text">method</text:span> property is <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">destructured</text:a> from the <text:span text:style-name="Source_20_Text">req</text:span> object and used to conditionally invoke a handler function built specifically for handling those types of requests. This is great at first glance, but it should soon become apparent that the routing is not specific enough. After all, how will one <text:span text:style-name="Source_20_Text">GET</text:span> request be distinguished from another?</text:p>
   <text:p text:style-name="Text_20_body">We can distinguish one request from another of the same method through the use of the <text:span text:style-name="Source_20_Text">pathname</text:span>. The <text:span text:style-name="Source_20_Text">pathname</text:span> allows the server to understand what resource is being targeted. Let’s take a look at the <text:span text:style-name="Source_20_Text">handleGetRequest</text:span> handler function.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">function handleGetRequest(req, res) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  const { pathname } = new URL(req.url);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  let data = {};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  if (pathname === &apos;/projects&apos;) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    data = await getProjects();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    res.setHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    return res.end(JSON.stringify(data));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  res.statusCode = 404;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  return res.end(&apos;Requested resource does not exist&apos;);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">Within the <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span> function, the <text:span text:style-name="Source_20_Text">pathname</text:span> is being checked to match a known resource, <text:span text:style-name="Source_20_Text">&apos;/projects&apos;</text:span>. If the <text:span text:style-name="Source_20_Text">pathname</text:span> matches, the resource data is fetched and then subsequently dispatched from the server as a successful response. Otherwise, the <text:span text:style-name="Source_20_Text">.statusCode</text:span> property is set to <text:span text:style-name="Source_20_Text">404</text:span>, indicating that the resource is not found, and a corresponding error message is dispatched. This pattern can be extrapolated to any number of conditional resource matches, allowing the server to handle many different types of requests to different resources.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:soft-page-break/>Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Our server is going to handle different types of requests. Using a <text:span text:style-name="Source_20_Text">switch</text:span> statement, add a condition to match for incoming <text:span text:style-name="Source_20_Text">GET</text:span> requests within the callback function of <text:span text:style-name="Source_20_Text">.createServer()</text:span>.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Let’s create a handler function for the <text:span text:style-name="Source_20_Text">GET</text:span> requests that will be received. Using the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ES6 arrow function</text:a> notation, assign a function to a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">handleGetRequest</text:span>. This function should take two arguments—<text:span text:style-name="Source_20_Text">req</text:span> and <text:span text:style-name="Source_20_Text">res</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Now that we have a simple handler function, we can invoke it when <text:span text:style-name="Source_20_Text">GET</text:span> requests are received. Return the <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span> function when HTTP method matches <text:span text:style-name="Source_20_Text">GET</text:span>. Pass the <text:span text:style-name="Source_20_Text">req</text:span> and <text:span text:style-name="Source_20_Text">res</text:span> variables from the <text:span text:style-name="Source_20_Text">.createServer()</text:span> callback into the handler function as the first and second arguments, respectively.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Now that we can handle <text:span text:style-name="Source_20_Text">GET</text:span> requests, let’s turn our attention to the resource for which the <text:span text:style-name="Source_20_Text">GET</text:span> request is being made. This distinction can be made using the <text:span text:style-name="Source_20_Text">pathname</text:span>. Within the <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span> function, create a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">pathname</text:span>, assigning it the value of the <text:span text:style-name="Source_20_Text">url</text:span> from the request. Then, write an <text:span text:style-name="Source_20_Text">if</text:span> statement to match the <text:span text:style-name="Source_20_Text">pathname</text:span> of <text:span text:style-name="Source_20_Text">&apos;/users&apos;</text:span>.</text:p>
   <text:p text:style-name="P17">5.</text:p>
   <text:p text:style-name="Text_20_body">In the <text:span text:style-name="Source_20_Text">if</text:span> statement that you just created, return an empty array as a response. Use <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the </text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">JSON.stringify()</text:span></text:a><text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> method</text:a> to convert the array into a JSON string.</text:p>
   <text:p text:style-name="Text_20_body">Run your code with <text:span text:style-name="Source_20_Text">node app.js</text:span>, then click on the “Check Work” button.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Handle get request</text:p>
   <text:p text:style-name="Text_20_body">const handleGetRequest = (req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const pathname = req.url;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>if (pathname === &apos;/users&apos;) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>res.end(JSON.stringify([]));</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/></text:p>
   <text:p text:style-name="Text_20_body">// Creates server instance</text:p>
   <text:p text:style-name="Text_20_body">const server = http.createServer((req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { method } = req;</text:p>
   <text:p text:style-name="Text_20_body"><text:s/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>switch(method) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>case &apos;GET&apos;:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>return handleGetRequest(req, res);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>default:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>throw new Error(`Unsupported request method: ${method}`);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Starts server listening on specified port</text:p>
   <text:p text:style-name="Text_20_body">server.listen(4001, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { address, port } = server.address();</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>console.log(`Server is listening on: http://${address}:${port}`);</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">HTTP Status Codes</text:p>
   <text:p text:style-name="Text_20_body">Once a request is processed, a response must be returned to the client to inform it of what happened. To build a response for the client, several pieces of information are required. One of these pieces of information is the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">HTTP response status code</text:a>, which is responsible for indicating whether a specific HTTP request has been successfully completed.</text:p>
   <text:p text:style-name="Text_20_body">Response status codes are grouped into five classes:</text:p>
   <text:p text:style-name="Text_20_body">1) <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#information_responses" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Informational</text:a>: Range from <text:span text:style-name="Source_20_Text">100</text:span> to <text:span text:style-name="Source_20_Text">199</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">2) <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Successful</text:a>: Range from <text:span text:style-name="Source_20_Text">200</text:span> to <text:span text:style-name="Source_20_Text">299</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">3) <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Redirects</text:a>: Range from <text:span text:style-name="Source_20_Text">300</text:span> to <text:span text:style-name="Source_20_Text">399</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">4) <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Client Errors</text:a>: Range from <text:span text:style-name="Source_20_Text">400</text:span> to <text:span text:style-name="Source_20_Text">499</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">5) <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Server Errors</text:a>: Range from <text:span text:style-name="Source_20_Text">500</text:span> to <text:span text:style-name="Source_20_Text">599</text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Each response status code conveys information about what happened during the processing of the request, which in turn helps the client decide how to handle the response and if further action is necessary. Status codes are paired with a short text-based description to help elucidate the meaning <text:soft-page-break/>of the code. Some common types of status codes that you are likely to encounter are <text:span text:style-name="Source_20_Text">200 OK</text:span>, <text:span text:style-name="Source_20_Text">400 Bad Request</text:span>, and <text:span text:style-name="Source_20_Text">500 Internal Server Error</text:span>. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">The server code to the right handles <text:span text:style-name="Source_20_Text">GET</text:span> and <text:span text:style-name="Source_20_Text">POST</text:span> requests. The <text:span text:style-name="Source_20_Text">GET</text:span> request handler is returning data successfully to the client and needs a status code to indicate this success. </text:p>
   <text:p text:style-name="Text_20_body">Inside the <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span> function, set the status code on the server response to the appropriate status code indicating success.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Unlike the <text:span text:style-name="Source_20_Text">GET</text:span> requests, the <text:span text:style-name="Source_20_Text">POST</text:span> requests are failing. In the <text:span text:style-name="Source_20_Text">POST</text:span> request handler code, set the status code on the server response to the appropriate status code indicating an internal server error.</text:p>
   <text:p text:style-name="Text_20_body">Run your code with <text:span text:style-name="Source_20_Text">node app.js</text:span>, then click on the “Check Work” button.</text:p>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const handleGetRequest = (req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>// Set GET status code here</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>res.statusCode = 200;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>return res.end(JSON.stringify({ data: [] }));</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const handlePostRequest = (req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>// Set POST status code here</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>res.statusCode = 500;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>return res.end(&quot;Unable to create record&quot;);</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Creates server instance</text:p>
   <text:p text:style-name="Text_20_body">const server = http.createServer((req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { method } = req;</text:p>
   <text:p text:style-name="Text_20_body"><text:s/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>switch(method) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>case &apos;GET&apos;:</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/><text:s text:c="6"/>return handleGetRequest(req, res);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>case &apos;POST&apos;:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>return handlePostRequest(req, res);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>default:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>throw new Error(`Unsupported request method: ${method}`);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Starts server listening on specified port</text:p>
   <text:p text:style-name="Text_20_body">server.listen(4001, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { address, port } = server.address();</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>console.log(`Server is listening on: http://${address}:${port}`);</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="P19">Hint:</text:p>
   <text:p text:style-name="P19">You can set the status code on the response using the <text:span text:style-name="Source_20_Text">statusCode</text:span> property of the <text:span text:style-name="Source_20_Text">res</text:span> object. Replace <text:span text:style-name="Source_20_Text">statusCode</text:span> below with the appropriate status code.</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">res.statusCode = statusCode;</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">Interacting with a Database</text:p>
   <text:p text:style-name="Text_20_body">While we have encountered simple examples of servers handling HTTP requests, some requests require a bit more work than returning a simple string such as <text:span text:style-name="Source_20_Text">&apos;Hello World&apos;</text:span>. In real-world applications, servers are responsible for helping to persist and retrieve data, usually through interaction with a database.</text:p>
   <text:p text:style-name="Text_20_body">Databases are remote resources to which the server must make a request. When this happens, the server making the request functions as the client, sending HTTP messages to the database server. Databases usually have their own Software Development Kits (SDKs) and Object-Relational Mapping (ORMs) that can be used to connect to them easily. But with the right information, requests could potentially be made in a raw form directly from your server using something like the HTTP <text:span text:style-name="Source_20_Text">.request()</text:span> method.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">As seen in <text:a xlink:type="simple" xlink:href="https://static-assets.codecademy.com/Courses/Learn-Node/http/data-web-flow.png" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the diagram</text:a> above, a single server often does not represent the final destination in processing a request from a client. Instead, a client sends a request, which is then processed partially, generating a separate HTTP request from the server to the database. When received, the server waits for the database’s response and will ultimately relay that information as a response back to the original caller.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:soft-page-break/>Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Take a look at the simple HTTP server to the right. The endpoint of this HTTP server will communicate with a database that will return some data back to the server. Log the data coming back from the database request in the console.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Run the server using the terminal using the <text:span text:style-name="Source_20_Text">node</text:span> command. </text:p>
   <text:p text:style-name="Text_20_body">Check the terminal to see if the data was retrieved from the database.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body">const fs = require(&apos;fs&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// GET request handler</text:p>
   <text:p text:style-name="Text_20_body">const handleGetRequest = (req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s/>if (req.url === &apos;/users&apos;) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="3"/>// Loads the database and searches for data</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="3"/>makeDatabaseRequest(&apos;users&apos;, (err, payload) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>if (err) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="8"/>res.writeHeader(400);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="8"/>res.write(&quot;Error retrieving data&quot;);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>} else {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="8"/>// Process successful request</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="8"/>console.log(payload);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="8"/>res.writeHeader(200, {&quot;Content-Type&quot;: &quot;application/json&quot;}); <text:s/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="8"/>res.write(JSON.stringify(payload));</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>}</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>res.end(); </text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="3"/>});</text:p>
   <text:p text:style-name="Text_20_body"><text:s/>}</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Creates server instance</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>const server = http.createServer((req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { method } = req;</text:p>
   <text:p text:style-name="Text_20_body"><text:s/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>switch(method) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>case &apos;GET&apos;:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>return handleGetRequest(req, res);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>default:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>throw new Error(`Unsupported request method: ${method}`);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Starts server listening on specified port</text:p>
   <text:p text:style-name="Text_20_body">server.listen(4001, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { address, port } = server.address();</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>console.log(`Server is listening on: http://${address}:${port}`);</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">function makeDatabaseRequest(type, cb) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>fs.readFile(&apos;./database.json&apos;, &apos;utf8&apos;, function (err, payload) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>if (err) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>cb(err, null); </text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>} else {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>cb(null, JSON.parse(payload)[type]);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>});</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P3">Interacting with Another Backend API</text:p>
   <text:p text:style-name="Text_20_body">Just like with databases, sometimes servers need to make requests to external APIs to accomplish some goal. There are a variety of reasons to reach out to external services. Some common situations are payment processing, service integrations with other products, webhooks, and so on.</text:p>
   <text:p text:style-name="Text_20_body">There are a few methods provided by the <text:span text:style-name="Source_20_Text">http</text:span> module that facilitate making HTTP requests to <text:soft-page-break/>external services. One of these methods is the <text:span text:style-name="Source_20_Text">request()</text:span> method. The <text:span text:style-name="Source_20_Text">request()</text:span> method takes two arguments; it takes a configuration object containing details about the request as well as a callback to handle the response.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const options = {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  hostname: &apos;example.com&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  port: 8080,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  path: &apos;/projects&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  method: &apos;GET&apos;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  headers: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &apos;Content-Type&apos;: &apos;application/json&apos;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:s/></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">const request = http.request(options, res =&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  // Handle response here</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">})</text:span></text:p>
   <text:p text:style-name="Text_20_body">For convenience, the <text:span text:style-name="Source_20_Text">http</text:span> module provides a convenient method for making <text:span text:style-name="Source_20_Text">GET</text:span> requests in the form of the <text:span text:style-name="Source_20_Text">get()</text:span> method. This method differs from the <text:span text:style-name="Source_20_Text">request()</text:span> method in that it automatically sets the method to <text:span text:style-name="Source_20_Text">GET</text:span> and calls <text:span text:style-name="Source_20_Text">req.end()</text:span> automatically.</text:p>
   <text:p text:style-name="Text_20_body">The fact that servers can make HTTP requests to other services opens up possibilities for different architecture designs for back-ends. One example of an architecture made possible by this ability is <text:a xlink:type="simple" xlink:href="https://en.wikipedia.org/wiki/Microservices" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">microservice architectures</text:a>. Microservice architectures divide needs into separate lightweight services that communicate via HTTP over a network. As such, a single application can be comprised of dozens of microservices, which could all be written in different programming languages, but work together by communicating over HTTP.</text:p>
   <text:p text:style-name="Text_20_body"><draw:frame draw:style-name="fr1" draw:name="Bild7" text:anchor-type="as-char" svg:width="2cm" svg:height="1cm" draw:z-index="6"><draw:image xlink:href="https://static-assets.codecademy.com/Courses/Learn-Node/http/microservices.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>microservice diagram</svg:title>
    </draw:frame></text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">In our HTTP server, we will process incoming <text:span text:style-name="Source_20_Text">GET</text:span> requests by invoking a handler function called <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span>. Part of this processing will include making a <text:span text:style-name="Source_20_Text">GET</text:span> request to the following URL which requires some configuration.</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">https://static-assets.codecademy.com/Courses/Learn-Node/http/data.json</text:span></text:p>
   <text:p text:style-name="Text_20_body">Let’s begin this configuration by creating a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">options</text:span> within the <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span> function. Set the variable to be an object containing the properties <text:span text:style-name="Source_20_Text">hostname</text:span>, <text:span text:style-name="Source_20_Text">path</text:span>, and <text:span text:style-name="Source_20_Text">method</text:span>. Using the URL above, set appropriate values for the properties of the <text:span text:style-name="Source_20_Text">options</text:span> object.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Now that the request has been configured, we can execute the request in the <text:span text:style-name="Source_20_Text">handleGetRequest()</text:span> function. To make the request, we will use the <text:span text:style-name="Source_20_Text">.request()</text:span> method from the <text:span text:style-name="Source_20_Text">http</text:span> module. </text:p>
   <text:p text:style-name="Text_20_body">Create a <text:span text:style-name="Source_20_Text">const</text:span> variable called <text:span text:style-name="Source_20_Text">request</text:span>. Set the variable to the <text:span text:style-name="Source_20_Text">http.request()</text:span> method <text:soft-page-break/>with the <text:span text:style-name="Source_20_Text">options</text:span> object as the first argument and a callback function as the second argument. Create a callback function using the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">ES6 arrow function</text:a> syntax. The callback function should also take a single argument called <text:span text:style-name="Source_20_Text">response</text:span>.</text:p>
   <text:p text:style-name="P17">3.</text:p>
   <text:p text:style-name="Text_20_body">Our HTTP request needs to be set up to be able to receive the data properly. Data from the response will usually be received in chunks and pieced together. As such, we need to watch for these chunks of data and process them. We can do this by listening to the <text:span text:style-name="Source_20_Text">data</text:span> event. </text:p>
   <text:p text:style-name="Text_20_body">In the callback of the <text:span text:style-name="Source_20_Text">.request()</text:span> method, create a variable called <text:span text:style-name="Source_20_Text">data</text:span> initialized with an empty string. Then, listen for the <text:span text:style-name="Source_20_Text">data</text:span> event and add the received data to the <text:span text:style-name="Source_20_Text">data</text:span> variable.</text:p>
   <text:p text:style-name="P17">4.</text:p>
   <text:p text:style-name="Text_20_body">Once all of the data has been received from the response, we need to handle that data. </text:p>
   <text:p text:style-name="Text_20_body">To know when a response is finished, we can listen for the <text:span text:style-name="Source_20_Text">end</text:span> event. Still in the callback of the <text:span text:style-name="Source_20_Text">.request()</text:span> method, set up a listener for the <text:span text:style-name="Source_20_Text">end</text:span> event of the response.</text:p>
   <text:p text:style-name="P17">5.</text:p>
   <text:p text:style-name="Text_20_body">When the <text:span text:style-name="Source_20_Text">end</text:span> event is triggered, we can work with the data from the response. In this case, we will act as a proxy and relay the data from the external API to the client that made the request. In the callback of the listener for the <text:span text:style-name="Source_20_Text">end</text:span> event, return the data retrieved from the API by dispatching a response to the caller.</text:p>
   <text:p text:style-name="Text_20_body">Run your code with <text:span text:style-name="Source_20_Text">node app.js</text:span>, then click on the “Check Work” button.</text:p>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const handleGetRequest = (req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const options = {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>hostname: &apos;static-assets.codecademy.com&apos;,</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>path: &apos;/Courses/Learn-Node/http/data.json&apos;,</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>method: &apos;GET&apos;,</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>headers: {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>&apos;Content-Type&apos;: &apos;application/json&apos;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const request = http.request(options, response =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>let data = &apos;&apos;;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/><text:s text:c="4"/>// Aggregate data chunks as they come in from the API</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>response.on(&apos;data&apos;, (chunk) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>data += chunk;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>// Handle the end of the request</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>response.on(&apos;end&apos;, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>console.log(&quot;Retrieved Data:&quot;, data);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>res.end(data);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>});</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>request.end();</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Creates server instance</text:p>
   <text:p text:style-name="Text_20_body">const server = http.createServer((req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { method } = req;</text:p>
   <text:p text:style-name="Text_20_body"><text:s/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>switch(method) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>case &apos;GET&apos;:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>return handleGetRequest(req, res);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>default:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>throw new Error(`Unsupported request method: ${method}`);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Starts server listening on specified port</text:p>
   <text:p text:style-name="Text_20_body">server.listen(4001, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { address, port } = server.address();</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>console.log(`Server is listening on: http://${address}:${port}`);</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="P4">Review</text:p>
   <text:p text:style-name="Text_20_body">HTTP is an extremely powerful tool that serves as one of the communication foundations of the modern web. It allows for communication between two entities over common transport protocols. By leveraging this robust communication ability, HTTP can be used to develop complex application architectures over networks, allowing servers to communicate with other servers, databases, and much more. Combining this with Node.js core modules such as <text:span text:style-name="Source_20_Text">http</text:span>, <text:span text:style-name="Source_20_Text">url</text:span>, and <text:span text:style-name="Source_20_Text">querystring</text:span>, it has never been easier to build a complex application on the web.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="Text_20_body">Take a look at the workspace to the right. There is a complete server that processes HTTP requests to various resources. Think about how you could modify this server to add more features.</text:p>
   <text:p text:style-name="Text_20_body">Here are some interesting ways you could modify the server:</text:p>
   <text:list xml:id="list1073560430" text:style-name="L38">
    <text:list-item>
     <text:p text:style-name="P100">Add some additional headers to a response. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P100">Process the query parameters for the <text:span text:style-name="Source_20_Text">GET</text:span> requests with the <text:span text:style-name="Source_20_Text">querystring</text:span> module instead of the <text:span text:style-name="Source_20_Text">url</text:span> module. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P99">Make a request to a database from within an endpoint. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">const http = require(&apos;http&apos;);</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Handle GET Request</text:p>
   <text:p text:style-name="Text_20_body">const handleGetRequest = (req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const options = {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>hostname: &apos;static-assets.codecademy.com&apos;,</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>path: &apos;/Courses/Learn-Node/http/data.json&apos;,</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>method: &apos;GET&apos;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const request = http.request(options, (response) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>let data = &apos;&apos;;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>response.on(&apos;data&apos;, (chunk) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>data += chunk;</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>response.on(&apos;end&apos;, (chunk) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/><text:s text:c="6"/>res.end(data);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>});</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>request.end()</text:p>
   <text:p text:style-name="Text_20_body">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Creates server instance</text:p>
   <text:p text:style-name="Text_20_body">const server = http.createServer((req, res) =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { method } = req;</text:p>
   <text:p text:style-name="Text_20_body"><text:s/></text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>switch(method) {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>case &apos;GET&apos;:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>return handleGetRequest(req, res);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="4"/>default:</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="6"/>throw new Error(`Unsupported request method: ${method}`);</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>}<text:tab/></text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">// Starts server listening on specified port</text:p>
   <text:p text:style-name="Text_20_body">server.listen(4001, () =&gt; {</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>const { address, port } = server.address();</text:p>
   <text:p text:style-name="Text_20_body"><text:s text:c="2"/>console.log(`Server is listening on: http://${address}:${port}`);</text:p>
   <text:p text:style-name="Text_20_body">});</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">What is REST?</text:h>
   <text:p text:style-name="Text_20_body">Learn about how to design web services using the REST paradigm</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/><draw:frame draw:style-name="fr1" draw:name="Bild8" text:anchor-type="as-char" svg:width="16.96cm" svg:height="6.191cm" draw:z-index="7"><draw:image draw:mime-type="image/png">
      <office:binary-data>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
       jtNWrXJRzfhxQpkohoaJDdEcOqB3MzlNmCAGbxZEjWCTBhVkzdi3alUrKQcS3rL9qOzDJ65Y
       FiF2yviuMlDGVKkS+TF1XFcMG/OHrJmLOCxO2xbV49UnTcx00aZ5VRlWxdiAYycvkXPgiv5v
       m/8ejyatRsl+dmI8wYhjCoqLUsRQNeHmzeqHxi1HyFo5Mafu7c9jAYrx/yaN7aJZTnxfE0d1
       woBf5sl/n30HPg30LcZzFGMpfktsUzQtC2LQbnGBx7dELXDVikXkZxBBecu2o/Lq6cRgowRk
       0SQt+lIK6Z3sE2U7RJS4GAKJUijR5Bjexy5r5vTfBSrR5CjGtnv56q18XLXi90OpiFAXfqFA
       eH/CcGZmRprXCuT7EjoG9mkmm3RF38C3b9/LJs8WTSsjMDAIRkYGcpmIQ6KI2sclC4bK5cWQ
       NmKg5Mwu6RAYEBhlCBShLHzbmTJ+GbuuQ9taqFTBHWs3HJA1cXa2VnKw5Mimb/uWuAr2y2fN
       8t3rI4e0U0Lfp6ujdZQyi2Z0MaSOuHL27NGF2LjlMDwv35afOX16O9ncXrpkga/WIcLe7n9m
       YOvO4zh5+pq8KCRX9gxo1byapuk8nBiT0a3gpzEeRc2ajY2FZtDob71756spu/i+oxoUu23L
       GprPEN7knC5d2kj/HX9EfO7Bn2ebiewCE7HujSvHY/2Wg3KMwsiCKxElfwyBRCmUGCZm1NB2
       P1ymW8d6P3xdXDwS1TpEbV1Ur4mm2MguMolqeRFaxADPNT9fvRydksXzy1tkxAUpg/o2j9F6
       IhI1iaV+EFZE829U5RdXQTdrXFHeoiNCr6j5FLfoiBq9yGr1vlVYCbDiFh3R5CxuEYmLOKLb
       T74lQmD4lINREScCce3fSUTJA0MgERERkQoxBBIRERGpEEMgERERkQoxBBIRERGpEEMgERER
       kQoxBBIRERGpEEMgERERkQoxBBIRERGpEEMgERERkQoxBBIRERGpEEMgERERkQoxBBIRERGp
       EEMgERERkQoxBBIRERGpEEMgERERkQoxBBIRERGpEEMgERERkQoxBBIRERGpEEMgERERkQox
       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
       CEyb1hKv37yT90XNoZhdJJwo39KV/8Z4XWrHEEhERKRC+w+fx+C+LWQz7unzN3D3v6fy+cyZ
       HL+7qEJMA/dtE3BAQKBmVg5rJSRmy5JePvZ6/hbXbzyAlaW5bMoVtXZiLt/06ewwe/56lC5Z
       AHsPnv1q26JmUNRKfuvNWx/cU8olBqUW6xbN0VUrFkX7bpPhXjCnXG+DOmU1y+fKkQm37zyC
       nr5uQn9dqRJDIBERkcqI2rnmTSrJqeIEMSuI9ztfuLg4wsT069k1LM3NULVy0e/WUbdmac2s
       HDmyOSOLSzr5OFvW9LL20PSKsQyB0yf2wIKFm3Hn3hMsmNUfHz8GolnjL9s2NzPGO59PVwUb
       GBqgSf1ymm08f/FGrrNG1RLyb11l2dw5XTBxVCcZAMWUcI3rl0dQUAjq1fSQ7+neqQGeeb1O
       6K8sVWIIJCIiUhkxjVrrZtU0j4u459Lc/7ZGTszI0aB2me/W0btbo++ei2ymDrGtvj2bfvVc
       m+Zftl3Y7cu2xbzBItSFE4FP3L5VIF9WeQtnYKCHlj99mu6uQlm375anyDEEEhEREakQQyAR
       ERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhER
       EakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGR
       CjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQ
       QyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEE
       EhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyARERGRCjEEEhEREakQQyAR
       ERGRCjEEEhEREakQQyARERGRCulD1/Cg8neUjXMNbZeFiIiIiJLI/wGx4DETxPdxkwAAAABJ
       RU5ErkJggg==
      </office:binary-data>
     </draw:image>
     <svg:title>REST API Model</svg:title>
    </draw:frame></text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-representational-state-transfer"/>REpresentational State Transfer</text:h>
   <text:p text:style-name="Text_20_body">REST, or REpresentational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. REST-compliant systems, often called RESTful systems, are characterized by how they are stateless and separate the concerns of client and server. We will go into what these terms mean and why they are beneficial characteristics for services on the Web. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-separation-of-client-and-server"/>Separation of Client and Server</text:h>
   <text:p text:style-name="Text_20_body">In the REST architectural style, the implementation of the client and the implementation of the server can be done independently without each knowing about the other. This means that the code on the client side can be changed at any time without affecting the operation of the server, and the code on the server side can be changed without affecting the operation of the client.</text:p>
   <text:p text:style-name="Text_20_body">As long as each side knows what format of messages to send to the other, they can be kept modular and separate. Separating the user interface concerns from the data storage concerns, we improve the flexibility of the interface across platforms and improve scalability by simplifying the server components. Additionally, the separation allows each component the ability to evolve independently.</text:p>
   <text:p text:style-name="Text_20_body">By using a REST interface, different clients hit the same REST endpoints, perform the same actions, and receive the same responses. </text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-statelessness"/>Statelessness</text:h>
   <text:p text:style-name="Text_20_body">Systems that follow the REST paradigm are stateless, meaning that the server does not need to know anything about what state the client is in and vice versa. In this way, both the server and the client can understand any message received, even without seeing previous messages. This constraint of statelessness is enforced through the use of <text:span text:style-name="Emphasis">resources</text:span>, rather than <text:span text:style-name="Emphasis">commands</text:span>. Resources are the nouns of the Web - they describe any object, document, or <text:span text:style-name="Emphasis">thing</text:span> that you may need to store or send to other services.</text:p>
   <text:p text:style-name="Text_20_body">Because REST systems interact through standard operations on resources, they do not rely on the implementation of interfaces.</text:p>
   <text:p text:style-name="Text_20_body">These constraints help RESTful applications achieve reliability, quick performance, and scalability, <text:soft-page-break/>as components that can be managed, updated, and reused without affecting the system as a whole, even during operation of the system.</text:p>
   <text:p text:style-name="Text_20_body">Now, we’ll explore how the communication between the client and server actually happens when we are implementing a RESTful interface.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-communication-between-client-and-server"/>Communication between Client and Server</text:h>
   <text:p text:style-name="Text_20_body">In the REST architecture, clients send requests to retrieve or modify resources, and servers send responses to these requests. Let’s take a look at the standard ways to make requests and send responses.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-making-requests"/>Making Requests</text:h>
   <text:p text:style-name="Text_20_body">REST requires that a client make a request to the server in order to retrieve or modify data on the server. A request generally consists of:</text:p>
   <text:list xml:id="list2661468924" text:style-name="L39">
    <text:list-item>
     <text:p text:style-name="P102">an HTTP verb, which defines what kind of operation to perform </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P102">a <text:span text:style-name="Emphasis">header</text:span>, which allows the client to pass along information about the request </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P102">a path to a resource </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P101">an optional message body containing data </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-http-verbs"/>HTTP Verbs</text:h>
   <text:p text:style-name="Text_20_body">There are 4 basic HTTP verbs we use in requests to interact with resources in a REST system:</text:p>
   <text:list xml:id="list3882389176" text:style-name="L40">
    <text:list-item>
     <text:p text:style-name="P104">GET — retrieve a specific resource (by id) or a collection of resources </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P104">POST — create a new resource </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P104">PUT — update a specific resource (by id) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P103">DELETE — remove a specific resource by id </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">You can learn more about these HTTP verbs in the following Codecademy article: </text:p>
   <text:list xml:id="list1281276561" text:style-name="L41">
    <text:list-item>
     <text:p text:style-name="P105"><text:a xlink:type="simple" xlink:href="https://www.codecademy.com/articles/what-is-crud" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">What is CRUD?</text:a> </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-headers-and-accept-parameters"/>Headers and Accept parameters</text:h>
   <text:p text:style-name="Text_20_body">In the header of the request, the client sends the type of content that it is able to receive from the server. This is called the <text:span text:style-name="Source_20_Text">Accept</text:span> field, and it ensures that the server does not send data that cannot be understood or processed by the client. The options for types of content are MIME Types (or Multipurpose Internet Mail Extensions, which you can read more about in the <text:a xlink:type="simple" xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">MDN Web Docs</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">MIME Types, used to specify the content types in the <text:span text:style-name="Source_20_Text">Accept</text:span> field, consist of a <text:span text:style-name="Source_20_Text">type</text:span> and a <text:span text:style-name="Source_20_Text">subtype</text:span>. They are separated by a slash (/). </text:p>
   <text:p text:style-name="Text_20_body">For example, a text file containing HTML would be specified with the type <text:span text:style-name="Source_20_Text">text/html</text:span>. If this text file contained CSS instead, it would be specified as <text:span text:style-name="Source_20_Text">text/css</text:span>. A generic text file would be denoted as <text:span text:style-name="Source_20_Text">text/plain</text:span>. This default value, <text:span text:style-name="Source_20_Text">text/plain</text:span>, is not a catch-all, however. If a client is expecting <text:span text:style-name="Source_20_Text">text/css</text:span> and receives <text:span text:style-name="Source_20_Text">text/plain</text:span>, it will not be able to recognize the content.</text:p>
   <text:p text:style-name="Text_20_body">Other types and commonly used subtypes:</text:p>
   <text:list xml:id="list1059578894" text:style-name="L42">
    <text:list-item>
     <text:p text:style-name="P107"><text:span text:style-name="Source_20_Text">image</text:span> — <text:span text:style-name="Source_20_Text">image/png</text:span>, <text:span text:style-name="Source_20_Text">image/jpeg</text:span>, <text:span text:style-name="Source_20_Text">image/gif</text:span> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P107"><text:soft-page-break/><text:span text:style-name="Source_20_Text">audio</text:span> — <text:span text:style-name="Source_20_Text">audio/wav</text:span>, <text:span text:style-name="Source_20_Text">audio/mpeg</text:span> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P107"><text:span text:style-name="Source_20_Text">video</text:span> — <text:span text:style-name="Source_20_Text">video/mp4</text:span>, <text:span text:style-name="Source_20_Text">video/ogg</text:span> </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P106"><text:span text:style-name="Source_20_Text">application</text:span> — <text:span text:style-name="Source_20_Text">application/json</text:span>, <text:span text:style-name="Source_20_Text">application/pdf</text:span>, <text:span text:style-name="Source_20_Text">application/xml</text:span>, <text:span text:style-name="Source_20_Text">application/octet-stream</text:span> </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">For example, a client accessing a resource with <text:span text:style-name="Source_20_Text">id</text:span> 23 in an <text:span text:style-name="Source_20_Text">articles</text:span> resource on a server might send a GET request like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">GET /articles/23</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Accept: text/html, application/xhtml</text:span></text:p>
   <text:p text:style-name="Text_20_body">The <text:span text:style-name="Source_20_Text">Accept</text:span> header field in this case is saying that the client will accept the content in <text:span text:style-name="Source_20_Text">text/html</text:span> or <text:span text:style-name="Source_20_Text">application/xhtml</text:span>.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-paths"/>Paths</text:h>
   <text:p text:style-name="Text_20_body">Requests must contain a path to a resource that the operation should be performed on. In RESTful APIs, paths should be designed to help the client know what is going on. </text:p>
   <text:p text:style-name="Text_20_body">Conventionally, the first part of the path should be the plural form of the resource. This keeps nested paths simple to read and easy to understand.</text:p>
   <text:p text:style-name="Text_20_body">A path like <text:span text:style-name="Source_20_Text">fashionboutique.com/customers/223/orders/12</text:span> is clear in what it points to, even if you’ve never seen this specific path before, because it is hierarchical and descriptive. We can see that we are accessing the order with <text:span text:style-name="Source_20_Text">id</text:span> 12 for the customer with <text:span text:style-name="Source_20_Text">id</text:span> 223.</text:p>
   <text:p text:style-name="Text_20_body">Paths should contain the information necessary to locate a resource with the degree of specificity needed. When referring to a list or collection of resources, it is not always necessary to add an <text:span text:style-name="Source_20_Text">id</text:span>. For example, a POST request to the <text:span text:style-name="Source_20_Text">fashionboutique.com/customers</text:span> path would not need an extra identifier, as the server will generate an <text:span text:style-name="Source_20_Text">id</text:span> for the new object. </text:p>
   <text:p text:style-name="Text_20_body">If we are trying to access a single resource, we would need to append an <text:span text:style-name="Source_20_Text">id</text:span> to the path. For example: <text:span text:style-name="Source_20_Text">GET fashionboutique.com/customers/:id</text:span> — retrieves the item in the <text:span text:style-name="Source_20_Text">customers</text:span> resource with the <text:span text:style-name="Source_20_Text">id</text:span> specified. <text:span text:style-name="Source_20_Text">DELETE fashionboutique.com/customers/:id</text:span> — deletes the item in the <text:span text:style-name="Source_20_Text">customers</text:span> resource with the <text:span text:style-name="Source_20_Text">id</text:span> specified.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3"><text:bookmark text:name="heading-sending-responses"/>Sending Responses</text:h>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-content-types"/>Content Types</text:h>
   <text:p text:style-name="Text_20_body">In cases where the server is sending a data payload to the client, the server must include a <text:span text:style-name="Source_20_Text">content-type</text:span> in the header of the response. This <text:span text:style-name="Source_20_Text">content-type</text:span> header field alerts the client to the type of data it is sending in the response body. These content types are MIME Types, just as they are in the <text:span text:style-name="Source_20_Text">accept</text:span> field of the request header. The <text:span text:style-name="Source_20_Text">content-type</text:span> that the server sends back in the response should be one of the options that the client specified in the <text:span text:style-name="Source_20_Text">accept</text:span> field of the request. </text:p>
   <text:p text:style-name="Text_20_body">For example, when a client is accessing a resource with <text:span text:style-name="Source_20_Text">id</text:span> 23 in an <text:span text:style-name="Source_20_Text">articles</text:span> resource with this GET Request:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">GET /articles/23 HTTP/1.1</text:span></text:p>
   <text:p text:style-name="P2"><text:soft-page-break/><text:span text:style-name="Source_20_Text">Accept: text/html, application/xhtml</text:span></text:p>
   <text:p text:style-name="Text_20_body">The server might send back the content with the response header:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">HTTP/1.1 200 (OK)</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Content-Type: text/html</text:span></text:p>
   <text:p text:style-name="Text_20_body">This would signify that the content requested is being returning in the response body with a <text:span text:style-name="Source_20_Text">content-type</text:span> of <text:span text:style-name="Source_20_Text">text/html</text:span>, which the client said it would be able to accept.</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-response-codes"/>Response Codes</text:h>
   <text:p text:style-name="Text_20_body">Responses from the server contain status codes to alert the client to information about the success of the operation. As a developer, you do not need to know every status code (there are <text:a xlink:type="simple" xlink:href="http://www.restapitutorial.com/httpstatuscodes.html" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">many</text:a> of them), but you should know the most common ones and how they are used:</text:p>
   <table:table table:name="Tabelle2" table:style-name="Tabelle2">
    <table:table-column table:style-name="Tabelle2.A"/>
    <table:table-column table:style-name="Tabelle2.B"/>
    <table:table-header-rows>
     <table:table-row table:style-name="TableLine93933871608576">
      <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Status code</text:p>
      </table:table-cell>
      <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
       <text:p text:style-name="Table_20_Heading">Meaning</text:p>
      </table:table-cell>
     </table:table-row>
    </table:table-header-rows>
    <table:table-row table:style-name="TableLine93933869165264">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">200 (OK)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">This is the standard response for successful HTTP requests.</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933869167248">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">201 (CREATED)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">This is the standard response for an HTTP request that resulted in an item being successfully created.</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933868941296">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">204 (NO CONTENT)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">This is the standard response for successful HTTP requests, where nothing is being returned in the response body.</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933869177040">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">400 (BAD REQUEST)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">The request cannot be processed because of bad request syntax, excessive size, or another client error.</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933869193152">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">403 (FORBIDDEN)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">The client does not have permission to access this resource.</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933869195360">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">404 (NOT FOUND)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">The resource could not be found at this time. It is possible it was deleted, or does not exist yet.</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row table:style-name="TableLine93933869197568">
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">500 (INTERNAL SERVER ERROR)</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="Tabelle2.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">The generic answer for an unexpected failure if there is no more specific information available.</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Text_20_body">For each HTTP verb, there are expected status codes a server should return upon success:</text:p>
   <text:list xml:id="list3209533468" text:style-name="L43">
    <text:list-item>
     <text:p text:style-name="P109">GET — return 200 (OK) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P109">POST — return 201 (CREATED) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P109">PUT — return 200 (OK) </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P108">DELETE — return 204 (NO CONTENT) If the operation fails, return the most specific status code possible corresponding to the problem that was encountered. </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-examples-of-requests-and-responses"/>Examples of Requests and Responses</text:h>
   <text:p text:style-name="Text_20_body">Let’s say we have an application that allows you to view, create, edit, and delete customers and orders for a small clothing store hosted at <text:span text:style-name="Source_20_Text">fashionboutique.com</text:span>. We could create an HTTP API that allows a client to perform these functions:</text:p>
   <text:p text:style-name="Text_20_body">If we wanted to view all customers, the request would look like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">GET http://fashionboutique.com/customers</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Accept: application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">A possible response header would look like:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">Status Code: 200 (OK)</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Content-type: application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>followed by the <text:span text:style-name="Source_20_Text">customers</text:span> data requested in <text:span text:style-name="Source_20_Text">application/json</text:span> format.</text:p>
   <text:p text:style-name="Text_20_body">Create a new customer by posting the data:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">POST http://fashionboutique.com/customers</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">Body:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  “customer”: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “name” = “Scylla Buss”,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “email” = “scylla.buss@codecademy.org”</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">The server then generates an <text:span text:style-name="Source_20_Text">id</text:span> for that object and returns it back to the client, with a header like:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">201 (CREATED)</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Content-type: application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">To view a single customer we <text:span text:style-name="Emphasis">GET</text:span> it by specifying that customer’s id:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">GET http://fashionboutique.com/customers/123</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Accept: application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">A possible response header would look like:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">Status Code: 200 (OK)</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">Content-type: application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">followed by the data for the <text:span text:style-name="Source_20_Text">customer</text:span> resource with <text:span text:style-name="Source_20_Text">id</text:span> 23 in <text:span text:style-name="Source_20_Text">application/json</text:span> format.</text:p>
   <text:p text:style-name="Text_20_body">We can update that customer by <text:span text:style-name="Emphasis">PUT</text:span> ting the new data:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">PUT http://fashionboutique.com/customers/123</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">Body:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  “customer”: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “name” = “Scylla Buss”,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “email” = “scyllabuss1@codecademy.com”</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Text_20_body">A possible response header would have <text:span text:style-name="Source_20_Text">Status Code: 200 (OK)</text:span>, to notify the client that the item with <text:span text:style-name="Source_20_Text">id</text:span> 123 has been modified.</text:p>
   <text:p text:style-name="Text_20_body">We can also <text:span text:style-name="Emphasis">DELETE</text:span> that customer by specifying its <text:span text:style-name="Source_20_Text">id</text:span>:</text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">DELETE http://fashionboutique.com/customers/123</text:span></text:p>
   <text:p text:style-name="Text_20_body">The response would have a header containing <text:span text:style-name="Source_20_Text">Status Code: 204 (NO CONTENT)</text:span>, notifying the client that the item with <text:span text:style-name="Source_20_Text">id</text:span> 123 has been deleted, and nothing in the body.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-practice-with-rest"/>Practice with REST</text:h>
   <text:p text:style-name="Text_20_body">Let’s imagine we are building a photo-collection site. We want to make an API to keep track of users, venues, and photos of those venues. This site has an <text:span text:style-name="Source_20_Text">index.html</text:span> and a <text:span text:style-name="Source_20_Text">style.css</text:span>. Each user has a username and a password. Each photo has a venue and an owner (i.e. the user who took the picture). Each venue has a name and street address. Can you design a REST system that would <text:soft-page-break/>accommodate:</text:p>
   <text:list xml:id="list578551378" text:style-name="L44">
    <text:list-item>
     <text:p text:style-name="P111">storing users, photos, and venues </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P110">accessing venues and accessing certain photos of a certain venue </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Start by writing out:</text:p>
   <text:list xml:id="list1027078694" text:style-name="L45">
    <text:list-item>
     <text:p text:style-name="P113">what kinds of requests we would want to make </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P113">what responses the server should return </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P112">what the <text:span text:style-name="Source_20_Text">content-type</text:span> of each response should be </text:p>
    </text:list-item>
   </text:list>
   <text:h text:style-name="P15" text:outline-level="2"><text:bookmark text:name="heading-possible-solution---models"/>Possible Solution - Models</text:h>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  “user”: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;id&quot;: &lt;Integer&gt;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “username”: &lt;String&gt;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “password”:  &lt;String&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  “photo”: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;id&quot;: &lt;Integer&gt;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “venue_id”: &lt;Integer&gt;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “author_id”: &lt;Integer&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  “venue”: {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    &quot;id&quot;: &lt;Integer&gt;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “name”: &lt;String&gt;,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">    “address”: &lt;String&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text">  }</text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text">}</text:span></text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-possible-solution---requestsresponses"/>Possible Solution - Requests/Responses</text:h>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-get-requests"/>GET Requests</text:h>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">GET /index.html</text:span> Accept: <text:span text:style-name="Source_20_Text">text/html</text:span> Response- 200 (OK) Content-type: <text:span text:style-name="Source_20_Text">text/html</text:span></text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">GET /style.css</text:span> Accept: <text:span text:style-name="Source_20_Text">text/css</text:span> Response- 200 (OK) Content-type: <text:span text:style-name="Source_20_Text">text/css</text:span></text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">GET /venues</text:span> Accept:<text:span text:style-name="Source_20_Text">application/json</text:span> Response- 200 (OK) Content-type: <text:span text:style-name="Source_20_Text">application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">GET /venues/:id</text:span> Accept: <text:span text:style-name="Source_20_Text">application/json</text:span> Response- 200 (OK) Content-type: <text:span text:style-name="Source_20_Text">application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">GET /venues/:id/photos/:id</text:span> Accept: <text:span text:style-name="Source_20_Text">application/json</text:span> Response- 200 (OK) Content-type: <text:span text:style-name="Source_20_Text">image/png</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-post-requests"/>POST Requests</text:h>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">POST /users</text:span> Response- 201 (CREATED) Content-type: <text:span text:style-name="Source_20_Text">application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">POST /venues</text:span> Response- 201 (CREATED) Content-type: <text:span text:style-name="Source_20_Text">application/json</text:span></text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">POST /venues/:id/photos</text:span> Response- 201 (CREATED) Content-type: <text:span text:style-name="Source_20_Text">application/json</text:span></text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-put-requests"/>PUT Requests</text:h>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">PUT /users/:id</text:span> Response- 200 (OK)</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Request- <text:span text:style-name="Source_20_Text">PUT /venues/:id</text:span> Response- 200 (OK)</text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">PUT /venues/:id/photos/:id</text:span> Response- 200 (OK)</text:p>
   <text:h text:style-name="Heading_20_4" text:outline-level="4"><text:bookmark text:name="heading-delete-requests"/>DELETE Requests</text:h>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">DELETE /venues/:id</text:span> Response- 204 (NO CONTENT)</text:p>
   <text:p text:style-name="Text_20_body">Request- <text:span text:style-name="Source_20_Text">DELETE /venues/:id/photos/:id</text:span> Response- 204 (NO CONTENT)</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">Learn Node.js: Next Steps</text:h>
   <text:p text:style-name="Text_20_body">You’ve completed the Learn Node.js course! What’s next?</text:p>
   <text:p text:style-name="Text_20_body">Congratulations, you’ve successfully completed the Learn Node.js course! You got an introduction to back-end programming and learned how to use the built-in Node.js modules to create event-driven web apps. More specifically, you learned about:</text:p>
   <text:list xml:id="list2907377571" text:style-name="L46">
    <text:list-item>
     <text:p text:style-name="P115">What the back-end is </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P115">What Node.js is and how it can be used for back-end programming </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P115">How to use built-in Node.js modules to create event-driven web applications </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P115">How to set up Node.js locally </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P115">How to implement modules in Node.js </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P114">How to create an HTTP server using the built-in <text:span text:style-name="Source_20_Text">http</text:span> module </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body">Your learning journey into back-end programming isn’t over yet! There are plenty of other topics that you can dive into to continue learning. Here are our recommendations for the next steps:</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-expressjs"/>Express.js</text:h>
   <text:p text:style-name="Text_20_body">If you really enjoyed creating servers using the built-in <text:span text:style-name="Source_20_Text">http</text:span> module, try out the <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/learn-express" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Learn Express</text:a> course. The Express framework will allow you to start and configure a server with very little overhead so you can focus on the important work of defining server behavior.</text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark text:name="heading-node-sqlite"/>Node-SQLite</text:h>
   <text:p text:style-name="Text_20_body">If you want to dive into creating fully integrated web applications by connecting your servers to your databases, take a look at the <text:a xlink:type="simple" xlink:href="https://www.codecademy.com/learn/learn-node-sqlite" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">Learn Node-SQLite</text:a> course. You will learn how to integrate SQL into your Node.js apps by using <text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/sqlite3" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">the </text:a><text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/sqlite3" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"><text:span text:style-name="Source_20_Text">sqlite3</text:span></text:a><text:a xlink:type="simple" xlink:href="https://www.npmjs.com/package/sqlite3" office:target-frame-name="_blank" xlink:show="new" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link"> package</text:a>.</text:p>
   <text:p text:style-name="Text_20_body">Once again, congratulations on finishing your Learn Node.js course! We are excited to see what you accomplish next. Happy coding!</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Standard">Learn Node SQLite</text:p>
   <text:p text:style-name="P3">Introduction</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>One of the most essential skills as a programmer is being able to identify and utilize the appropriate tool for a specified task. In the context of database management, this will mean using SQL to specify, store, update and retrieve data. In the context of web programming, this will mean writing JavaScript to automate, manipulate, and return relevant values — for presentation in a website or use in a backend script. What happens, then, when we need both? What if we want to retrieve data from a SQL database (using our database administration skills) and then manipulate and expose that data through JavaScript functions (using our web programming skills)? </text:p>
   <text:p text:style-name="Text_20_body">In this lesson, we will learn how to manage an SQLite database from within JavaScript. We will see how to perform all the fundamental features of database management — <text:span text:style-name="Source_20_Text">CREATE</text:span>ing <text:span text:style-name="Source_20_Text">INSERT</text:span>ing and <text:span text:style-name="Source_20_Text">SELECT</text:span>ing, and then interacting with that data using the full force of JavaScript — writing functions, wielding objects, and performing calculations. It’s important to know that many of the results herein could be obtained purely through SQL or purely through JavaScript if need be. But something simple to perform (and read back) with one language might be very hard to write and understand in another.</text:p>
   <text:p text:style-name="Text_20_body">In the workspace, there’s code that opens a connection to an SQLite database. There’s a function <text:span text:style-name="Source_20_Text">getAverageTemperatureForYear()</text:span> that will take a <text:span text:style-name="Source_20_Text">year</text:span> as an argument. The function retrieves the temperatures from that year and then calculates the year’s average. We’ve called it with different years, illustrating the power of being able to power our SQL queries with JavaScript.</text:p>
   <text:h text:style-name="Heading_20_3" text:outline-level="3">Instructions</text:h>
   <text:p text:style-name="P17">1.</text:p>
   <text:p text:style-name="Text_20_body">Try the code written in the editor, pass different years to the function and observe the output. The data in the TemperatureData table spans years from the mid 1800s to about 2004, but it is a small data set representing only a few recording stations, so don’t take any average temperature data from this data set as representative of the real world average temperature.</text:p>
   <text:p text:style-name="P17">2.</text:p>
   <text:p text:style-name="Text_20_body">Press “Next” when you’re ready to introduce SQL to your JavaScript!</text:p>
   <text:p text:style-name="Text_20_body"/>
  </office:text>
 </office:body>
</office:document>