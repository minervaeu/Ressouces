/*                                                        =================
?                                                         my css-coding guideline
.                                                          =================
*/
/* ?              umgebung

- VS Studio Terminal hilft bei Tippfehler!
- Auskommentieren CTRL + K + C
- Chrome / Firefox Dev Browsers installieren -> Element - Layout - Styles to change CS properties, toggle states, analyze animations etc...
    Tools nutzen!
https://www.mozilla.org/de/firefox/developer/
https://developer.chrome.com/docs/devtools/
- In Konsole document.designMode = "on" stellen und man kann die Page verändern
- Zen-Mode STRG + #
- Wichtig: Um alle Browser anzugleichen, bei Designgruppen outline wegnehmen und dann für alle einen hover & focus machen!
- Chrome Dev Tools das Element auswählen, Button (links oben) nutzen um zb.: Text Kontrast ablesen zu können !
- Visbug nutzen!
- //unsplah.it/740/740 generiert random image mit 740x740
- vor allem { ein Leerzeich setzen trägtt zur beserren Lesbarkeit bei! 
- Font Awesome Kit Code: <script src="https://kit.fontawesome.com/1fb3eb29fd.js" crossorigin="anonymous"></script>
*/

/* ?              html

todo  Syntax
            Mehrere Klassen kann man eingeben indem man ein Leerzeichen einbaut.

*/

/* ?              css-allgemein

todo  wie beginnen
        Bis auf Imgae-Overflow oder zu lange Texte ist HTML eigentlich responsive. Das bedeutet, dass dein 
        CSS-Code dazu führt, diese zu brechen! Sei dir dem bewusst! Beginne mit dem Page-Layout und 
        werde dann immer spezifischer.

todo cross-browser support
        :focus überall wo :hover gesetzt wird

todo box-sizing 
        *, *::before, *::after  {box-sizing: border-box} nimmt alle width-heights von den bordern weg - agieren wie outline, aber in den Richtungen steuerbar.
todo div
        Default kein margin.

todo    position: absolute / relative
      bei absolute ist die element height die tatsächliche height und nicht relativ zum parent
https://www.youtube.com/watch?v=lUaw-AA9HnA&t=607s

todo    height
   height wirkt sich nur aus wenn parent auch eine explizite height-value gesetzt hat.
   height: 100%;  Der Prozentwert bezieht sich auf das parent-Element. Wenn parent body{} ist und sonst kein Element angehängt ist, ist der Container (body) klein!
   height: auto; Ist der Defaultwert und aus responsiven Gründen immer vorzuziehen wenn es geht. Ansonsten min-height - height: px; nur dann, wenn es sein muss!
https://www.youtube.com/watch?v=SjYYfd7obug&t=272s

todo        min, max
width: min(500px, 70%); ist das gleiche wie width; 70%; max-width: 500px => es sucht die kleinste value von beiden und nimmt diese. max () ist genau umgekehrt und es such die größte value.
clamp()
calc() ist nicht nötig, man kann darin rechnen. in min() und max() sind auch mehrere values möglich
https://www.youtube.com/watch?v=U9VF-4euyRo&t=124s

todo     border
    border: 0; entfernt die border width.

todo     margin
      schiebt die Box von anderen Elementen weg 
      margin-left: auto; nimmt allen whitespace von rechts und schiebt ihn nach links.
      margin: 0 auto; zentriert und macht explizit das auf top und bottom 0 ist 
      interresant für nav-Listen ul li:nth-of-type(5) selektiert das 5te li-Element inder Liste. Ist es das letzte li, kannst du es mit margin-left: auto; ganz nach rechts schieben! Ein zusätzliches  margin-rihgt: aut; centert es daann
      https://www.youtube.com/watch?v=3LlLkapKw6Q

todo   padding 
      schiebt den content von der Box weg

todo     Buttons
    Animation mit brightness oder saturation langsam hoch fahren
    Hat ein Button einen border, kannst du dem anderen einen Border in der Farbe seines Hintergrundes geben damit die width/height ausgeglichen wird.

todo em / rem
      em bezieht sich auf die textgröße im container, rem auf die des root elements. bsp.: setz ich in einem parent container die font size auf 2em dann ist im child 1em auf einmal 2em und 2em dann wiederm 4em. das nennt nman compounding => zuasammensetzen.
    Für Fonst-Size eher rem, für padding/margin eher em --> rem bleibt immer gleich solange root 16px bleibt , bei em wird das margin/paddingh höher wenn man die font size des elements  größer wird 
      rem= follow the device pre-assigned font-size      em= follow your font-size parent,
      normally the parent is <body>, if is not modified by you, it will be like 16px (depends on the browser)
      so if you write 1em = you write 15px;  (rounded for simplicity)
      2em = 30px
      3em = 45px
      1.5em = (1.5*15) -> 22px;
      1- and that's is fantastic, because no need to write very long complex px or points numbers;
      2 - just change the parent number to change all children size!
      font-size it works with both text and svg.
      be careful: EM can make bugs in your html, 
      because if you select elements without specifying well, 
      it can happen as in the video (or recursive things)
      example: 
      div {
      font-size: 2em;
      }
      and you have nesting divs like this:
      <div>
          <div>
                <div>
                </div>
          </div>
      </div>
      in that case is like recursive:
      the first div have 2em size;
      second 4em;
      third 8em
      because everyone is parent, so use IDs or class   
      
https://www.youtube.com/watch?v=_-aDOAMmDHI&t=402s

todo line-heigt
      line-height: 1; verhindert das der Text  mit Änderung der height des Containers mitwächst.

todo        BEM
      Bei der Block Elements Modiyfier-Schreibweise schreibt man Elemente mit doppelten Unterstrich z.b.: .div__card . Sinn ist, dass 
      wenn man mehrere dieser Elemente hat man alle Eigenschaften welche diese teilen in eine Klasse schreibt und man dann mit .card--yellow oder card--small die Unterschiede
      zuweist und leichter sichtbar macht.   

todo        z-index
      Geht nur auf ge-flexten items oder position: relative;

todo        shape-outside
      Kann Text um etwas herum stylen


*/

/* ?              counquering responsive-layout course 

todo  Prozentwerte statt fixed witdhs
      Machen den gesamten respnsiven Prozess extrem leichter. Das gilt generell, aber besonders bei widths.

todo  Prozentwerte bei childs
      Setzt man Fixwerte kann es zu Overflow kommen wenn Parent kleiner wird, deswegen Fixwerte vermeiden.
      Prozentwerte beziehen sich immer auf die Parent-Box!

todo heights vermeiden
      Bei Fixwerten kann es dazu kommen, dass der content overflowed sobald die box-width kleiner wird.
      Braucht man zum Beispiel mehr Background für eine Box, setzt man besser padding.



*/

/* ?              flexbox & grid

todo  margin-collapse
            Sobald flex oder grid attached collapsen die block-margins nicht mehr. Das bedeutet zb.: wenn mehrerer columns nebeneinander sind und dann der screen kleiner wird verdoppeln sich die Abstände!
            Besser: Margins ganz weglassen und mit Gap arbeiten. Alle flex-items verhalten sich so, auch h, p, usw... haben bei Block margins und verdoppeln sich. 

 ?                                                          CSS-Grid
      -) grid-template-columns
      grid-template-columns: repeat(auto-fill / auto-fit, minmax(250px, 1fr)); => Row darf höchsten 1fr hoch sein und wenn es 250px wird macht Grid eine neue Row auf!  
https://www.youtube.com/watch?v=qII5BueXWD4

?                                                           CSS-Flexbox
https://www.youtube.com/watch?v=u044iM9xsWU&t=307s
! Parents:
todo  display: flex
            Gibt den flex-items max-content, macht sie also so groß wie ihr content ist und holt so viele wie es geht in eine line ohne line-nbreaks (Zeilenumbrüche) auszulösen
            Sollte sich ein Content nicht mehr ausgehen, dann kommt line-break und der container wird nach unten größer.

todo  flex-wrap
            Default: nowrap; Wenn man ihn auf wrap setzt verhindert man den overflow. 

todo  flex-direction
            Default: row;  Bedeutet das parent eine row-direction hat und jedes child ein column ist.
            Wechselt man zu column, ist parent eine column und jedes child eine row.
            Hervorragend für Media-Queries zu verwenden!

! Childs:
todo        flex-basis
      Default: auto; Ist die ideale Größe für den Container, fast identisch mit width (man setzt auch entweder width oder flex-basis).
      Ob man ein parent flex-basis: 100% oder width: 100% setzt ist egal.

todo        flex-shrink
      Default: 1; Deswegen werden flex-items auch sofort solange kleiner bis ihr content erreicht wurde.

todo        flex-grow
      Default: 0; Setzt man ihn auf 1 erlaubt man den items den vorhandenen, übrig gebliebenen Platz unter sich aufzuteilen.
      Setzt man ihn auf einen item auf 2 und lässt ihn bei den anderen auf 1, dann hat dieses eine item den doppelten Platz der anderen.

todo        flex
      Ist eine shorthand für flex-grow, flex-shrink und flex-basis.
      flex: 1; berechnet für alle items die gleiche Größe und setzt folgende Werte: grow: 1; shrink: 1; basis: 0 (statt auto).
      Setzt man shrink: 0 und basis: 100% will jedes item 100% des parents ausfüllen, weil  nicht erlaubt wurde zu shrinken. Also haben alle items width: 100% !
      Hat man zb 5 li die mehr platz brauchen als die letzten 3, kann mna den ersten 6 flex:3 und den letzen 3 flex: 1 geben!
*/

/* ?              selektoren

-) Wiederholenden Code gruppieren! 
   h1, h3, btn, .Class_X {...}

-) .columns > * {} 
Selektiert alle direkten children von allen die die .columns Klasse tragen

-)  .card::nth-child(2) selektiert das zweite child der .card klasse. odd/even möglich. first/last-child bzw last-of -type möglich.
      li:nth-child(5n) selektiert jedes 5 Element. Kalkulationen wie (5n-2) möglich.

-) :is() Pseudoklasse verwenden: 
   header:is(h3, p, .Class_Button, ....){....} gute Möglichkeit zum gruppieren.
   :is() umgekehrt:   
   :is(header, .Class_X, ...) p:hover{...} wendet auf alle p in header und Class_x das :hover an!
   Wichtig: Das Element mit der höchsten Spezifität setzt die ganze Gruppe darauf -> zb.: Klasse ist höher als p

   -) Attribute nutzen! Alles was gesetzt wurde, kann verwendet werden, auch zb.: 
   a[href="about.html"], a[class=""], a[class|="link"] selektiert alle Klassen die mit "link" beginnen, aber das ganze Wort.
   a{^="http"] selektiert alle http und https,  *[lang="de"] selektiert alle Elemente mit attribut "de"

strong, h1, div usw...
h2 + p matcht jedes <p>, das direkt einem <h2> folgt.
p ~ span matcht alle <span> (en-US) Elemente, die einem <p> Element innerhalb desselben Elements folgen.
ul > li matcht alle <li> Elemente, die innerhalb eines <ul> Element sind.
div span matcht jedes <span> (en-US) Element, das innerhalb eines <div> Elements ist.
section > blockquote:only-of-type {...} selektiert eine blockquote im section elemen nur dann wenn es das einzige ist. geht auch mit only-child

if/else
:checked { if  }
:not(:checked) { else  }
[data-attr="true"] {  if   }
[data-attr="false"] {  elseif  }
:not([data-attr]) {  else }
The following selector matches only <a> elements that directly contain an <img> child:
a:has(> img)
The following selector matches <h1> elements only if they have a <p> element directly following them:
h1:has(+ p)

<p lang="de">Servus!</p> kann man mit p:lang("de"){} selektieren!
https://developer.mozilla.org/de/docs/Web/CSS/CSS_Selectors
*/

/* ?              pseudoelemente / pseudoklassen

todo  ::after / ::before 
            für zb.: Punkt -> Strich Animation, Icons über url, pdf files etc...

todo ::marker    
            Styling vom Punkt oder der Numerierung bei lists
            color, font, transitions... möglich
            content: '' ;                                                                 
            font-family: 'Font Awesome 5 Free'; font-weigth: 700; content; '\f00c';  + Font Awesome Kit macht zb Haken, funktioniert mit der Nummer in FA; parentEL > li {paddig-left: schebt den marker weg vom text} 

*/

/* ?               tipps & tricks allgemein

- CSS-Background Cliptext einsetzen für "ausdem nichts kommen Effekt"
- Use padding on text! like: padding: 2rem 0;
- Try get "this is 1 block to read, this is anothe rone,...."
- Nutze cursor: pointer für Buttons & Links sofern es zum Design passt.
- margin-inline , background-clip background-text-clip 
- Optimale textlänge mit clamp:    width: clamp(45ch, 50%, 75ch);
- ch als Eineheit benutzen!
- inset ist wie padding/margin! Zb.: el{ inset: 3rem 3rem 3rem 3rem }
- scroll-behaviour : smooth
- content-visibility auto
- swiping: .container {scroll-snap-type: y mandatory} .child (muat be saection) {scroll-snap-align: start} 
            create a anker point for swipping like tinder
- wiederholende values mit custom properties kaschieren.

todo        sehr schöne cards mit "titel schneidet durch"-effect
https://www.youtube.com/watch?v=lUaw-AA9HnA&t=607s

*/

/* ?               hover


todo        line animation
      In der Pseudoelement-Klasse kann man mit transform: scaleX(0) das Pseudeolement verschwinden lassen, mit scaleX(1) wieder kommen lassen 
      und dabei mit transform-origin: left /right einstellen von welcher Richtung die transition kommt. 

todo        hover collection
https://www.youtube.com/watch?v=ceNMP-aQkQ4

todo         6 hover button outline-effekte 
https://www.youtube.com/watch?v=3LlLkapKw6Q
outline + padding erzeugt gerahmten Text, wenn dann :hover, focus {outline-offset: 2px}gesetzt wird erzuegt man einen "wird größer"-Effekt.
            Das kann man auch mit transition unterstützen: zb.: 250ms ease ! 
            Doppelter Rahmen Effekt nach außen: border: 2px; outline: 2px outline-offset: -2px for dem hover/focus, outline-offset: 2px in diesem.
            Doppelter Rahmen Effekt nach innen: Dazu muss im focus/hover outline-offset: -6px gesetzt werden.
            + wenn jetzt die Outline eine andere Farbe hat als Hintergrund+Border ergibt sich ein neues Effektbild. 
            "Zoom"-Effekt.
            Zweiliniger Rahmen, der nach hover ausgefüllt und verdoppelt wird.
*/

/* ?              font familys

 todo  font-family
      garamond: Für alles wo man smart und klugheit vermitteln möchte.  Ist ein alter Stil der aus der mittelalterlichen Zeit abgeleitet ist.
      @import url("https://use.typekit.net/izw3hmc.css"); or <link rel="stylesheet" href="https://use.typekit.net/izw3hmc.css">
      font-family: garamond-premier-pro-display,serif;
      font-weight: 400;
      font-style: italic;
      https://fonts.adobe.com/fonts/garamond-premier

      bodoni: Für alles was elegant, "premium" oder "sexy" wirken soll. Hoher kontrast zwischen vertikalen und horizontalen linien.
      @import url("https://use.typekit.net/izw3hmc.css"); or <link rel="stylesheet" href="https://use.typekit.net/izw3hmc.css">
      font-family: ltc-bodoni-175,serif;
      font-weight: 400;
      font-style: normal;

      century expanded: Für alles was sehr leicht zu lesen soll.
      
      futura: Sehr clean, aufgeräumt. Geometrisch.
      @import url("https://use.typekit.net/izw3hmc.css"); or <link rel="stylesheet" href="https://use.typekit.net/izw3hmc.css">
      font-family: futura-pt,sans-serif;
      font-weight: 400;
      font-style: normal;
      https://fonts.adobe.com/fonts/futura-pt

      times new roman: Default überall.

      helvetica: Wird auch sehr oft benutzt und ist bei Logos sehr weit verbreitet.

      empfohlen von"Flux", Designer Massimo Vignelli verwendete nur diese 6:
      https://www.youtube.com/watch?v=_4cW79vF1mU

      natura: handschrift
      @import url("https://use.typekit.net/izw3hmc.css"); oder <link rel="stylesheet" href="https://use.typekit.net/izw3hmc.css">
      font-family: natura,serif;
      font-weight: 400;
      font-style: normal;

/* garamond: font-family: garamond-premier-pro-display,serif; font-style: italic; 
@import url("https://use.typekit.net/izw3hmc.css"); 
/* bodoni: font-family: ltc-bodoni-175,serif; 
@import url("https://use.typekit.net/izw3hmc.css");
/* futura: font-family: futura-pt,sans-serif; 
@import url("https://use.typekit.net/izw3hmc.css");
/* natura: font-family: natura,serif;
@import url("https://use.typekit.net/izw3hmc.css"); 

*/

/* ?              font / text styling

Als erstes den ganzen Text (h, p,..) in einen Container setzen damit man die Texte gut stylen kann.

todo  text "atmen" lassen: Unbedingt padding und margin nutzen!
            Bei flex items die nebeneinander sind gap nutzen. 
            padding und margin nutzen ! nicht block oder inline, sondern zb.: padding: 0 2em; -> Das ist impliziter als andersrum. 

todo  line-lenght
            Texte die eine sehr lange width haben sind sehr schwer zu lesen. Am besten max-width: 60/70ch oder rem setzen.
            --text-optimal-width: clamp(45ch, 50%, 75ch);

todo  line-height
            Zu beginn zb body: line-height 1.5; setzen. Wichtig: Der Abstand wird dann aber sehr groß bei großen Überschriften, deswegen h1, h2, h3: line-height 1.1; setzen!

todo contrast & colour
            Kontrast ist sehr wichtig für gutze Lesbarkeit: Chrome Kontrast-Tool verwenden!
            Headings und text sollten sich stark vom Hintergrund abheben, das leitet auch die User besser durch die Page.
            Dunkelgrauer Text sieht oft sehr gut aus statt schwarzer.

todo kein text-align center bei langen Texten
            Es macht den Text einfach sehr schwierig zu lesen. Nur bei kleinen Texten nutzen, auch wenn es Design-mäßig vieloleich tbesser aussieht!

todo  custom properties für font sizes nutzen
            Im CSS-Template-File bereits implementiert. 
! Alle bisherigen Tipps von "Web design tips for developers": 
https://www.youtube.com/watch?v=ykn4XNDwW7Q

todo        line-clamp
      Damit schneidet man den Text ab wenn das parent-element zu klein wird.
https://css-tricks.com/almanac/properties/l/line-clamp/

*/

/* ?              Transitions & Animations


Transforms:
https://www.mediaevent.de/css/transform.html

transform: translate(5px,5px);    // entlang der X- oder Y-Achse bewegen
transform: translateX(20px);      // entlang der X-Achse bewegen
transform: translateY(20px);       // entlang der X-Achse bewegen
transform: scale(0.5,0.5);         // vergrößern oder verkleinern
transform: scaleX(0.5);            // auf der X-Achse skalieren
transform: scaleY(2);              // auf der Y-Achse skalieren
transform: scaleZ(2);              // auf der Z-Achse skalieren
transform: scale3d(x,y,z);         // 3D-skalieren
transform: rotate(15deg);          // um 0 bis 360° rotieren 
transform: rotate3d(x,y,z,Winkel); // um 0 bis 360° rotieren 
transform: skew(-30deg,40deg);      // entlang x- und y-Achse
transform: skewX(-30deg);           // verzerren
transform: skewY(-30deg);           // verzerren
transform: matrix(n,n,n,n,n,n);    // 2D-Transformation mit 6 Werten
transform: matrix3d(n,…,n);        // 3D-Transformation mit 16 Werten
transform: perspective(n)           // Perspektive einer 3D-Ansicht ändern

Dreht sich um die eigene Achse:
.el {
  animation: rotate-element-animation 20s infinite linear;
}

  @keyframes rotate-element-animation {
   0% {transform:perspective(300px) rotateY(0deg)}
   25% {transform:perspective(300px) rotateY(90deg)}
   50% {transform:perspective(300px) rotateY(180deg)}
   75% {transform:perspective(300px) rotateY(270deg)}
   100% {transform:perspective(300px) rotateY(360deg)}
}


fliegt von link oben in Bogen nach unten und rechts und steht dann normal da:
el {
transform-style: preserve-3d;
transform-origin: 0 0 0
animation: leftright 10s infinite linear 
}
  @keyframes leftright {
    50% { transform: translateZ(-10px) rotateX(60deg) rotateZ(29deg) rotateY(-180deg); }
} 



*/

/* ?              media queries

      Max-Width - Breakpoints mit max-width beginnen mit dem Layout für den größten Monitor, also beim Design für den Desktop 
                  und überschreiben nach und nach Stile, um die Seiten an immer kleinere Displaygrößen anzupassen.
         Kleine Endgeräte (Smartphones, kleiner als 768px):
               @media (max-width: 575.98px) { … }
               @media (max-width: 767.98px) { … }
         Kleine Endgeräte (Tablets, kleiner als 992px):
               @media (max-width: 991.98px) { … }
         Große Endgeräte (Laptops, Bildschirme, kleiner als 1200px):
               @media (max-width: 1199.98px) { … }

      Min-Width - ist intuitiver und besser lesbar.
         Kleine Endgeräte (Smartphones, 576px und größer):
               @media (min-width: 576px) { … }
         Mittlere Endgeräte (Tablets, 768px und größer):
               @media (min-width: 768px) { … }
         Große Endgeräte (Laptops, Bildschirme, 992px und größer):
               @media (min-width: 992px) { … }
         Sehr große Endgeräte (Große Bildschirme, iMac, 1200px und größer):
               @media (min-width: 1200px) { … }

*/ 

/*                                                        ========
?                                                          templates
.                                                          ========
*/
/* ?              coloured text animtion

.colouredTextAnimation{
      animation: headlineAnimation 30s infinite alternate-reverse;
    }
    
    @keyframes headlineAnimation {
      from{
        color: white;
      }
      33% {
        color: red;
      }
      66% {
        color: yellow;
      }
      to {
        color:  white;
      }
    }
    
*/
    
/* ?              settings menu animations

.colourAnimation{
animation: colouredBoxAnimation infinite alternate-reverse 10s;
}

@keyframes colouredBoxAnimation {
from{
      box-shadow: 1rem 10rem white;
}
25%{
      box-shadow: 1rem 0em 10rem red;
}

50%{
      box-shadow: 1rem 0em 10rem green;
}
75%{
      box-shadow: 1rem 0em 10rem blue;
}
to {
      box-shadow: 1rem 0em 10rem orangered;
}
}

*/

/* ?              click-jumping durch dokument mit anker

html {
  scroll-behavior: smooth;
  scroll-padding-top: 3rem;
}
section:target {
  outline: 3px dottet red;
}
section:target b > h2 {
  color: purple;
}

*/

/* ?              box-hover-line

.element {
  width: 25rem;
  height: 15rem;
  background-color: white;
  color: black;
  display: flex;
  flex-flow: column;
  justify-content: center;
  align-items: center;
  font-size: xx-large;
  transition: all 250ms ease;
  position: relative;
}
.element:after {
  transition: all 250ms ease;
  content: "";
  display: block;
  position: absolute;
  left: 0;
  bottom: 0;
  width: 1rem;
  height: 1rem;
  background-color: pink;
}

.element:hover:after {
  width: 100%;
}

HTML:
<div class="element">Element</div>

*/ 

/* ?              scrollbar design
                                                                                                                                                                                                                                                                                                       
      Scrollbar Firefox
            el{
            scrollbar-color: dark;
            scrollbar-width: .5rem;
            scrollbar-gutter: both-edges ;
            }
      Scrollbar Chrome, Safari,...
            ::-webkit-scrollbar — the entire scrollbar.
            ::-webkit-scrollbar-button — the buttons on the scrollbar (arrows pointing upwards and downwards that scroll one line at a time).
            ::-webkit-scrollbar-thumb — the draggable scrolling handle.
            ::-webkit-scrollbar-track — the track (progress bar) of the scrollbar, where there is a gray bar on top of a white bar.
            ::-webkit-scrollbar-track-piece — the part of the track (progress bar) not covered by the handle.
            ::-webkit-scrollbar-corner — the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet This is often the bottom-right corner of the browser window.
            ::-webkit-resizer — the draggable resizing handle that appears at the bottom corner of some element

*/

/* ?              social media links without font awesome
/*
      
<div class="div-socialmedia">
<h3 class="headline-socialmedia"></h3>
<div class="wrapper-socialicons">
      <a href="https://www.facebook.com/barstevie/"><img src="folder_graphics/folder_icons/facebook/facebook-original.svg" alt="Facebook-Logo with profile link." title="My Facebook-Profile." class="img-socialmedia"></a>
      <a href="https://www.youtube.com/channel/UCVUfjupaBJzqm4JfgWllumQ/about"><img src="folder_graphics/folder_icons/youtube.svg" alt="Youtube-Logo with profile link."  title="My Youtube-Profile."  class="img-socialmedia"></a>
      <a href="https://www.instagram.com/_steve_vie/?hl=de"><img src="folder_graphics/folder_icons/instagram.svg" alt="Instagram-Logo with profile link."  title="My Instagram-Profile."  class="img-socialmedia"></a>
      <a href="https://twitter.com/stevVIEsprotest/"><img src="folder_graphics/folder_icons/twitter-original.svg" alt="Twitter-Logo with profile link."  title="My Twitter-Profile." class="img-socialmedia"></a>
      <a href="https://www.linkedin.com/in/stefan-bartl-660556112/"><img src="folder_graphics/folder_icons/linkedin.svg" alt="Linkedin-Logo with profile link."  title="My Linkedin-Profile."  class="img-socialmedia"></a>
      <a href="https://github.com/StefanBartl"><img src="folder_graphics/folder_icons/github/github-original.svg" alt="Github-Logo with profile link."  title="My Github-Profile." class="img-socialmedia"></a>   
</div>
</div>

*/

/* ?              social media links with font awesome

<div id="div_socialmedia">
<h3 id="headline_socialmedia">Über die sozialen Medien</h3>
<div id="wrapper_socialicons">
    <a href="https://www.facebook.com/barstevie/" target="_blank"><i class="fa-brands fa-facebook"></i></a>
    <a href="https://www.youtube.com/channel/UCVUfjupaBJzqm4JfgWllumQ/about" target="_blank"><i class="fa-brands fa-youtube"></i></a>
    <a href="https://www.instagram.com/_steve_vie/?hl=de" target="_blank"><i class="fa-brands fa-instagram"></i></a>
    <a href="https://twitter.com/stevVIEsprotest/" target="_blank"><i class="fa-brands fa-twitter"></i></a>
    <a href="https://www.linkedin.com/in/stefan-bartl-660556112/" target="_blank"><i class="fa-brands fa-linkedin"></i></a>
    <a href="https://github.com/StefanBartl" target="_blank"><i class="fa-brands fa-github"></i></a>
</div>
</div>

*/

